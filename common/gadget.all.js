// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                return new Date (this.Y () - 1, 11, 31).formatDate ("W");
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1217582308:0},
"Africa/Accra":{1217582309:0},
"Africa/Addis Ababa":{1217582310:180},
"Africa/Algiers":{1217582311:60},
"Africa/Asmara":{1217582312:180},
"Africa/Asmera":{1217582312:180},
"Africa/Bamako":{1217582313:0},
"Africa/Bangui":{1217582314:60},
"Africa/Banjul":{1217582314:0},
"Africa/Bissau":{1217582315:0},
"Africa/Blantyre":{1217582316:120},
"Africa/Brazzaville":{1217582316:60},
"Africa/Bujumbura":{1217582317:120},
"Africa/Cairo":{1217582317:180,1219958317:120,1240525117:180,1251407917:120,1272579517:180,1282857517:120,1304029117:180,1314307117:120,1335478717:180,1346361517:120,1366928317:180,1377811117:120,1398377917:180,1409260717:120,1429827517:180,1440710317:120,1461881917:180,1472159917:120,1493331517:180,1504214317:120,1524781117:180},
"Africa/Casablanca":{1217582318:60,1222557518:0},
"Africa/Ceuta":{1217582319:120,1224983919:60,1238289519:120,1256433519:60,1269739119:120,1288487919:60,1301188719:120,1319937519:60,1332638319:120,1351387119:60,1364692719:120,1382836719:60,1396142319:120,1414286319:60,1427591919:120,1445735919:60,1459041519:120,1477790319:60,1490491119:120,1509239919:60,1521940719:120},
"Africa/Conakry":{1217582319:0},
"Africa/Dakar":{1217582320:0},
"Africa/Dar es Salaam":{1217582321:180},
"Africa/Djibouti":{1217582321:180},
"Africa/Douala":{1217582322:60},
"Africa/El Aaiun":{1217582323:0},
"Africa/Freetown":{1217582323:0},
"Africa/Gaborone":{1217582324:120},
"Africa/Harare":{1217582325:120},
"Africa/Johannesburg":{1217582325:120},
"Africa/Kampala":{1217582326:180},
"Africa/Khartoum":{1217582327:180},
"Africa/Kigali":{1217582327:120},
"Africa/Kinshasa":{1217582328:60},
"Africa/Lagos":{1217582328:60},
"Africa/Libreville":{1217582329:60},
"Africa/Lome":{1217582330:0},
"Africa/Luanda":{1217582330:60},
"Africa/Lubumbashi":{1217582331:120},
"Africa/Lusaka":{1217582331:120},
"Africa/Malabo":{1217582332:60},
"Africa/Maputo":{1217582332:120},
"Africa/Maseru":{1217582333:120},
"Africa/Mbabane":{1217582334:120},
"Africa/Mogadishu":{1217582335:180},
"Africa/Monrovia":{1217582335:0},
"Africa/Nairobi":{1217582336:180},
"Africa/Ndjamena":{1217582337:60},
"Africa/Niamey":{1217582337:60},
"Africa/Nouakchott":{1217582338:0},
"Africa/Ouagadougou":{1217582339:0},
"Africa/Porto-Novo":{1217582339:60},
"Africa/Sao Tome":{1217582340:0},
"Africa/Timbuktu":{1217582341:0},
"Africa/Tripoli":{1217582341:120},
"Africa/Tunis":{1217582342:120,1224983942:60,1238289542:120,1256433542:60,1269739142:120,1288487942:60,1301188742:120,1319937542:60,1332638342:120,1351387142:60,1364692742:120,1382836742:60,1396142342:120,1414286342:60,1427591942:120,1445735942:60,1459041542:120,1477790342:60,1490491142:120,1509239942:60,1521940742:120},
"Africa/Windhoek":{1217582343:60,1220750343:120,1238890743:60,1252199943:120,1270340343:60,1283649543:120,1301789943:60,1315099143:120,1333239543:60,1346548743:120,1365293943:60,1377998343:120,1396743543:60,1410052743:120,1428193143:60,1441502343:120,1459642743:60,1472951943:120,1491092343:60,1504401543:120,1522541943:60},
"America/Adak":{1217582343:-540,1225624743:-600,1236514743:-540,1257074343:-600,1268569143:-540,1289128743:-600,1300018743:-540,1320578343:-600,1331468343:-540,1352027943:-600,1362917943:-540,1383477543:-600,1394367543:-540,1414927143:-600,1425817143:-540,1446376743:-600,1457871543:-540,1478431143:-600,1489321143:-540,1509880743:-600,1520770743:-540},
"America/Anchorage":{1217582344:-480,1225621144:-540,1236511144:-480,1257070744:-540,1268565544:-480,1289125144:-540,1300015144:-480,1320574744:-540,1331464744:-480,1352024344:-540,1362914344:-480,1383473944:-540,1394363944:-480,1414923544:-540,1425813544:-480,1446373144:-540,1457867944:-480,1478427544:-540,1489317544:-480,1509877144:-540,1520767144:-480},
"America/Anguilla":{1217582345:-240},
"America/Antigua":{1217582346:-240},
"America/Araguaina":{1217582346:-180},
"America/Aruba":{1217582347:-240},
"America/Asuncion":{1217582348:-240,1224389948:-180,1236482348:-240,1255839548:-180,1268536748:-240,1287289148:-180,1299986348:-240,1318738748:-180,1331435948:-240,1350793148:-180,1362885548:-240,1382242748:-180,1394335148:-240,1413692348:-180,1425784748:-240,1445141948:-180,1457839148:-240,1476591548:-180,1489288748:-240,1508041148:-180,1520738348:-240},
"America/Atikokan":{1217582348:-300},
"America/Atka":{1217582349:-540,1225624749:-600,1236514749:-540,1257074349:-600,1268569149:-540,1289128749:-600,1300018749:-540,1320578349:-600,1331468349:-540,1352027949:-600,1362917949:-540,1383477549:-600,1394367549:-540,1414927149:-600,1425817149:-540,1446376749:-600,1457871549:-540,1478431149:-600,1489321149:-540,1509880749:-600,1520770749:-540},
"America/Bahia":{1217582350:-180},
"America/Barbados":{1217582350:-240},
"America/Belem":{1217582351:-180},
"America/Belize":{1217582352:-360},
"America/Blanc-Sablon":{1217582353:-240},
"America/Boa Vista":{1217582353:-240},
"America/Bogota":{1217582354:-300},
"America/Boise":{1217582355:-360,1225613955:-420,1236503955:-360,1257063555:-420,1268558355:-360,1289117955:-420,1300007955:-360,1320567555:-420,1331457555:-360,1352017155:-420,1362907155:-360,1383466755:-420,1394356755:-360,1414916355:-420,1425806355:-360,1446365955:-420,1457860755:-360,1478420355:-420,1489310355:-360,1509869955:-420,1520759955:-360},
"America/Buenos Aires":{1217582355:-180,1223176755:-120,1237083555:-180,1254626355:-120,1269137955:-180,1286075955:-120,1300587555:-180,1317525555:-120,1332037155:-180,1349579955:-120,1363486755:-180,1381029555:-120,1394936355:-180,1412479155:-120,1426385955:-180,1443928755:-120,1458440355:-180,1475378355:-120,1489889955:-180,1506827955:-120,1521339555:-180},
"America/Cambridge Bay":{1217582356:-360,1225613956:-420,1236503956:-360,1257063556:-420,1268558356:-360,1289117956:-420,1300007956:-360,1320567556:-420,1331457556:-360,1352017156:-420,1362907156:-360,1383466756:-420,1394356756:-360,1414916356:-420,1425806356:-360,1446365956:-420,1457860756:-360,1478420356:-420,1489310356:-360,1509869956:-420,1520759956:-360},
"America/Campo Grande":{1217582357:-240,1223785157:-180,1234667957:-240,1255234757:-180,1266722357:-240,1286684357:-180,1298171957:-240,1318133957:-180,1329621557:-240,1350188357:-180,1361071157:-240,1381637957:-180,1392520757:-240,1413087557:-180,1423970357:-240,1444537157:-180,1456024757:-240,1475986757:-180,1487474357:-240,1507436357:-180,1518923957:-240},
"America/Cancun":{1217582357:-300,1225005557:-360,1238919557:-300,1256455157:-360,1270369157:-300,1288509557:-360,1301818757:-300,1319959157:-360,1333268357:-300,1351408757:-360,1365322757:-300,1382858357:-360,1396772357:-300,1414307957:-360,1428221957:-300,1445757557:-360,1459671557:-300,1477811957:-360,1491121157:-300,1509261557:-360,1522570757:-300},
"America/Caracas":{1217582358:-270},
"America/Catamarca":{1217582359:-180,1223176759:-120,1237083559:-180,1254626359:-120,1269137959:-180,1286075959:-120,1300587559:-180,1317525559:-120,1332037159:-180,1349579959:-120,1363486759:-180,1381029559:-120,1394936359:-180,1412479159:-120,1426385959:-180,1443928759:-120,1458440359:-180,1475378359:-120,1489889959:-180,1506827959:-120,1521339559:-180},
"America/Cayenne":{1217582360:-180},
"America/Cayman":{1217582360:-300},
"America/Chicago":{1217582361:-300,1225610361:-360,1236500361:-300,1257059961:-360,1268554761:-300,1289114361:-360,1300004361:-300,1320563961:-360,1331453961:-300,1352013561:-360,1362903561:-300,1383463161:-360,1394353161:-300,1414912761:-360,1425802761:-300,1446362361:-360,1457857161:-300,1478416761:-360,1489306761:-300,1509866361:-360,1520756361:-300},
"America/Chihuahua":{1217582362:-360,1225009162:-420,1238923162:-360,1256458762:-420,1270372762:-360,1288513162:-420,1301822362:-360,1319962762:-420,1333271962:-360,1351412362:-420,1365326362:-360,1382861962:-420,1396775962:-360,1414311562:-420,1428225562:-360,1445761162:-420,1459675162:-360,1477815562:-420,1491124762:-360,1509265162:-420,1522574362:-360},
"America/Coral Harbour":{1217582362:-300},
"America/Cordoba":{1217582363:-180,1223176763:-120,1237083563:-180,1254626363:-120,1269137963:-180,1286075963:-120,1300587563:-180,1317525563:-120,1332037163:-180,1349579963:-120,1363486763:-180,1381029563:-120,1394936363:-180,1412479163:-120,1426385963:-180,1443928763:-120,1458440363:-180,1475378363:-120,1489889963:-180,1506827963:-120,1521339563:-180},
"America/Costa Rica":{1217582364:-360},
"America/Cuiaba":{1217582364:-240,1223785164:-180,1234667964:-240,1255234764:-180,1266722364:-240,1286684364:-180,1298171964:-240,1318133964:-180,1329621564:-240,1350188364:-180,1361071164:-240,1381637964:-180,1392520764:-240,1413087564:-180,1423970364:-240,1444537164:-180,1456024764:-240,1475986764:-180,1487474364:-240,1507436364:-180,1518923964:-240},
"America/Curacao":{1217582365:-240},
"America/Danmarkshavn":{1217582366:0},
"America/Dawson":{1217582367:-420,1225617567:-480,1236507567:-420,1257067167:-480,1268561967:-420,1289121567:-480,1300011567:-420,1320571167:-480,1331461167:-420,1352020767:-480,1362910767:-420,1383470367:-480,1394360367:-420,1414919967:-480,1425809967:-420,1446369567:-480,1457864367:-420,1478423967:-480,1489313967:-420,1509873567:-480,1520763567:-420},
"America/Dawson Creek":{1217582367:-420},
"America/Denver":{1217582368:-360,1225613968:-420,1236503968:-360,1257063568:-420,1268558368:-360,1289117968:-420,1300007968:-360,1320567568:-420,1331457568:-360,1352017168:-420,1362907168:-360,1383466768:-420,1394356768:-360,1414916368:-420,1425806368:-360,1446365968:-420,1457860768:-360,1478420368:-420,1489310368:-360,1509869968:-420,1520759968:-360},
"America/Detroit":{1217582369:-240,1225606769:-300,1236496769:-240,1257056369:-300,1268551169:-240,1289110769:-300,1300000769:-240,1320560369:-300,1331450369:-240,1352009969:-300,1362899969:-240,1383459569:-300,1394349569:-240,1414909169:-300,1425799169:-240,1446358769:-300,1457853569:-240,1478413169:-300,1489303169:-240,1509862769:-300,1520752769:-240},
"America/Dominica":{1217582369:-240},
"America/Edmonton":{1217582370:-360,1225613970:-420,1236503970:-360,1257063570:-420,1268558370:-360,1289117970:-420,1300007970:-360,1320567570:-420,1331457570:-360,1352017170:-420,1362907170:-360,1383466770:-420,1394356770:-360,1414916370:-420,1425806370:-360,1446365970:-420,1457860770:-360,1478420370:-420,1489310370:-360,1509869970:-420,1520759970:-360},
"America/Eirunepe":{1217582371:-300},
"America/El Salvador":{1217582371:-360},
"America/Ensenada":{1217582372:-420,1225012772:-480,1238926772:-420,1256462372:-480,1270376372:-420,1288516772:-480,1301825972:-420,1319966372:-480,1333275572:-420,1351415972:-480,1365329972:-420,1382865572:-480,1396779572:-420,1414315172:-480,1428229172:-420,1445764772:-480,1459678772:-420,1477819172:-480,1491128372:-420,1509268772:-480,1522577972:-420},
"America/Fort Wayne":{1217582373:-240,1225606773:-300,1236496773:-240,1257056373:-300,1268551173:-240,1289110773:-300,1300000773:-240,1320560373:-300,1331450373:-240,1352009973:-300,1362899973:-240,1383459573:-300,1394349573:-240,1414909173:-300,1425799173:-240,1446358773:-300,1457853573:-240,1478413173:-300,1489303173:-240,1509862773:-300,1520752773:-240},
"America/Fortaleza":{1217582374:-180},
"America/Glace Bay":{1217582374:-180,1225603174:-240,1236493174:-180,1257052774:-240,1268547574:-180,1289107174:-240,1299997174:-180,1320556774:-240,1331446774:-180,1352006374:-240,1362896374:-180,1383455974:-240,1394345974:-180,1414905574:-240,1425795574:-180,1446355174:-240,1457849974:-180,1478409574:-240,1489299574:-180,1509859174:-240,1520749174:-180},
"America/Godthab":{1217582375:-120,1224983975:-180,1238289575:-120,1256433575:-180,1269739175:-120,1288487975:-180,1301188775:-120,1319937575:-180,1332638375:-120,1351387175:-180,1364692775:-120,1382836775:-180,1396142375:-120,1414286375:-180,1427591975:-120,1445735975:-180,1459041575:-120,1477790375:-180,1490491175:-120,1509239975:-180,1521940775:-120},
"America/Goose Bay":{1217582376:-180,1225595976:-240,1236485976:-180,1257045576:-240,1268540376:-180,1289099976:-240,1299989976:-180,1320549576:-240,1331439576:-180,1351999176:-240,1362889176:-180,1383448776:-240,1394338776:-180,1414898376:-240,1425788376:-180,1446347976:-240,1457842776:-180,1478402376:-240,1489292376:-180,1509851976:-240,1520741976:-180},
"America/Grand Turk":{1217582376:-240,1225606776:-300,1236496776:-240,1257056376:-300,1268551176:-240,1289110776:-300,1300000776:-240,1320560376:-300,1331450376:-240,1352009976:-300,1362899976:-240,1383459576:-300,1394349576:-240,1414909176:-300,1425799176:-240,1446358776:-300,1457853576:-240,1478413176:-300,1489303176:-240,1509862776:-300,1520752776:-240},
"America/Grenada":{1217582377:-240},
"America/Guadeloupe":{1217582378:-240},
"America/Guatemala":{1217582379:-360},
"America/Guayaquil":{1217582379:-300},
"America/Guyana":{1217582380:-240},
"America/Halifax":{1217582381:-180,1225603181:-240,1236493181:-180,1257052781:-240,1268547581:-180,1289107181:-240,1299997181:-180,1320556781:-240,1331446781:-180,1352006381:-240,1362896381:-180,1383455981:-240,1394345981:-180,1414905581:-240,1425795581:-180,1446355181:-240,1457849981:-180,1478409581:-240,1489299581:-180,1509859181:-240,1520749181:-180},
"America/Havana":{1217582381:-240,1224998381:-300,1237094381:-240,1256447981:-300,1269148781:-240,1288502381:-300,1300598381:-240,1319951981:-300,1332047981:-240,1351401581:-300,1363497581:-240,1382851181:-300,1394947181:-240,1414300781:-300,1426396781:-240,1445750381:-300,1458451181:-240,1477804781:-300,1489900781:-240,1509254381:-300,1521350381:-240},
"America/Hermosillo":{1217582382:-420},
"America/Indianapolis":{1217582383:-240,1225606783:-300,1236496783:-240,1257056383:-300,1268551183:-240,1289110783:-300,1300000783:-240,1320560383:-300,1331450383:-240,1352009983:-300,1362899983:-240,1383459583:-300,1394349583:-240,1414909183:-300,1425799183:-240,1446358783:-300,1457853583:-240,1478413183:-300,1489303183:-240,1509862783:-300,1520752783:-240},
"America/Inuvik":{1217582384:-360,1225613984:-420,1236503984:-360,1257063584:-420,1268558384:-360,1289117984:-420,1300007984:-360,1320567584:-420,1331457584:-360,1352017184:-420,1362907184:-360,1383466784:-420,1394356784:-360,1414916384:-420,1425806384:-360,1446365984:-420,1457860784:-360,1478420384:-420,1489310384:-360,1509869984:-420,1520759984:-360},
"America/Iqaluit":{1217582384:-240,1225606784:-300,1236496784:-240,1257056384:-300,1268551184:-240,1289110784:-300,1300000784:-240,1320560384:-300,1331450384:-240,1352009984:-300,1362899984:-240,1383459584:-300,1394349584:-240,1414909184:-300,1425799184:-240,1446358784:-300,1457853584:-240,1478413184:-300,1489303184:-240,1509862784:-300,1520752784:-240},
"America/Jamaica":{1217582385:-300},
"America/Jujuy":{1217582386:-180,1223176786:-120,1237083586:-180,1254626386:-120,1269137986:-180,1286075986:-120,1300587586:-180,1317525586:-120,1332037186:-180,1349579986:-120,1363486786:-180,1381029586:-120,1394936386:-180,1412479186:-120,1426385986:-180,1443928786:-120,1458440386:-180,1475378386:-120,1489889986:-180,1506827986:-120,1521339586:-180},
"America/Juneau":{1217582386:-480,1225621186:-540,1236511186:-480,1257070786:-540,1268565586:-480,1289125186:-540,1300015186:-480,1320574786:-540,1331464786:-480,1352024386:-540,1362914386:-480,1383473986:-540,1394363986:-480,1414923586:-540,1425813586:-480,1446373186:-540,1457867986:-480,1478427586:-540,1489317586:-480,1509877186:-540,1520767186:-480},
"America/Knox IN":{1217582387:-300,1225610387:-360,1236500387:-300,1257059987:-360,1268554787:-300,1289114387:-360,1300004387:-300,1320563987:-360,1331453987:-300,1352013587:-360,1362903587:-300,1383463187:-360,1394353187:-300,1414912787:-360,1425802787:-300,1446362387:-360,1457857187:-300,1478416787:-360,1489306787:-300,1509866387:-360,1520756387:-300},
"America/La Paz":{1217582388:-240},
"America/Lima":{1217582389:-300},
"America/Los Angeles":{1217582389:-420,1225617589:-480,1236507589:-420,1257067189:-480,1268561989:-420,1289121589:-480,1300011589:-420,1320571189:-480,1331461189:-420,1352020789:-480,1362910789:-420,1383470389:-480,1394360389:-420,1414919989:-480,1425809989:-420,1446369589:-480,1457864389:-420,1478423989:-480,1489313989:-420,1509873589:-480,1520763589:-420},
"America/Louisville":{1217582390:-240,1225606790:-300,1236496790:-240,1257056390:-300,1268551190:-240,1289110790:-300,1300000790:-240,1320560390:-300,1331450390:-240,1352009990:-300,1362899990:-240,1383459590:-300,1394349590:-240,1414909190:-300,1425799190:-240,1446358790:-300,1457853590:-240,1478413190:-300,1489303190:-240,1509862790:-300,1520752790:-240},
"America/Maceio":{1217582391:-180},
"America/Managua":{1217582391:-360},
"America/Manaus":{1217582392:-240},
"America/Marigot":{1217582393:-240},
"America/Martinique":{1217582393:-240},
"America/Mazatlan":{1217582394:-360,1225009194:-420,1238923194:-360,1256458794:-420,1270372794:-360,1288513194:-420,1301822394:-360,1319962794:-420,1333271994:-360,1351412394:-420,1365326394:-360,1382861994:-420,1396775994:-360,1414311594:-420,1428225594:-360,1445761194:-420,1459675194:-360,1477815594:-420,1491124794:-360,1509265194:-420,1522574394:-360},
"America/Mendoza":{1217582395:-180,1223176795:-120,1237083595:-180,1254626395:-120,1269137995:-180,1286075995:-120,1300587595:-180,1317525595:-120,1332037195:-180,1349579995:-120,1363486795:-180,1381029595:-120,1394936395:-180,1412479195:-120,1426385995:-180,1443928795:-120,1458440395:-180,1475378395:-120,1489889995:-180,1506827995:-120,1521339595:-180},
"America/Menominee":{1217582395:-300,1225610395:-360,1236500395:-300,1257059995:-360,1268554795:-300,1289114395:-360,1300004395:-300,1320563995:-360,1331453995:-300,1352013595:-360,1362903595:-300,1383463195:-360,1394353195:-300,1414912795:-360,1425802795:-300,1446362395:-360,1457857195:-300,1478416795:-360,1489306795:-300,1509866395:-360,1520756395:-300},
"America/Merida":{1217582396:-300,1225005596:-360,1238919596:-300,1256455196:-360,1270369196:-300,1288509596:-360,1301818796:-300,1319959196:-360,1333268396:-300,1351408796:-360,1365322796:-300,1382858396:-360,1396772396:-300,1414307996:-360,1428221996:-300,1445757596:-360,1459671596:-300,1477811996:-360,1491121196:-300,1509261596:-360,1522570796:-300},
"America/Mexico City":{1217582397:-300,1225005597:-360,1238919597:-300,1256455197:-360,1270369197:-300,1288509597:-360,1301818797:-300,1319959197:-360,1333268397:-300,1351408797:-360,1365322797:-300,1382858397:-360,1396772397:-300,1414307997:-360,1428221997:-300,1445757597:-360,1459671597:-300,1477811997:-360,1491121197:-300,1509261597:-360,1522570797:-300},
"America/Miquelon":{1217582398:-120,1225599598:-180,1236489598:-120,1257049198:-180,1268543998:-120,1289103598:-180,1299993598:-120,1320553198:-180,1331443198:-120,1352002798:-180,1362892798:-120,1383452398:-180,1394342398:-120,1414901998:-180,1425791998:-120,1446351598:-180,1457846398:-120,1478405998:-180,1489295998:-120,1509855598:-180,1520745598:-120},
"America/Moncton":{1217582398:-180,1225603198:-240,1236493198:-180,1257052798:-240,1268547598:-180,1289107198:-240,1299997198:-180,1320556798:-240,1331446798:-180,1352006398:-240,1362896398:-180,1383455998:-240,1394345998:-180,1414905598:-240,1425795598:-180,1446355198:-240,1457849998:-180,1478409598:-240,1489299598:-180,1509859198:-240,1520749198:-180},
"America/Monterrey":{1217582399:-300,1225005599:-360,1238919599:-300,1256455199:-360,1270369199:-300,1288509599:-360,1301818799:-300,1319959199:-360,1333268399:-300,1351408799:-360,1365322799:-300,1382858399:-360,1396772399:-300,1414307999:-360,1428221999:-300,1445757599:-360,1459671599:-300,1477811999:-360,1491121199:-300,1509261599:-360,1522570799:-300},
"America/Montevideo":{1217582400:-180,1223184000:-120,1236486000:-180,1254633600:-120,1268540400:-180,1286083200:-120,1299990000:-180,1317532800:-120,1331439600:-180,1349587200:-120,1362889200:-180,1381036800:-120,1394338800:-180,1412486400:-120,1425788400:-180,1443936000:-120,1457842800:-180,1475385600:-120,1489292400:-180,1506835200:-120,1520742000:-180},
"America/Montreal":{1217582400:-240,1225606800:-300,1236496800:-240,1257056400:-300,1268551200:-240,1289110800:-300,1300000800:-240,1320560400:-300,1331450400:-240,1352010000:-300,1362900000:-240,1383459600:-300,1394349600:-240,1414909200:-300,1425799200:-240,1446358800:-300,1457853600:-240,1478413200:-300,1489303200:-240,1509862800:-300,1520752800:-240},
"America/Montserrat":{1217582401:-240},
"America/Nassau":{1217582402:-240,1225606802:-300,1236496802:-240,1257056402:-300,1268551202:-240,1289110802:-300,1300000802:-240,1320560402:-300,1331450402:-240,1352010002:-300,1362900002:-240,1383459602:-300,1394349602:-240,1414909202:-300,1425799202:-240,1446358802:-300,1457853602:-240,1478413202:-300,1489303202:-240,1509862802:-300,1520752802:-240},
"America/New York":{1217582403:-240,1225606803:-300,1236496803:-240,1257056403:-300,1268551203:-240,1289110803:-300,1300000803:-240,1320560403:-300,1331450403:-240,1352010003:-300,1362900003:-240,1383459603:-300,1394349603:-240,1414909203:-300,1425799203:-240,1446358803:-300,1457853603:-240,1478413203:-300,1489303203:-240,1509862803:-300,1520752803:-240},
"America/Nipigon":{1217582403:-240,1225606803:-300,1236496803:-240,1257056403:-300,1268551203:-240,1289110803:-300,1300000803:-240,1320560403:-300,1331450403:-240,1352010003:-300,1362900003:-240,1383459603:-300,1394349603:-240,1414909203:-300,1425799203:-240,1446358803:-300,1457853603:-240,1478413203:-300,1489303203:-240,1509862803:-300,1520752803:-240},
"America/Nome":{1217582404:-480,1225621204:-540,1236511204:-480,1257070804:-540,1268565604:-480,1289125204:-540,1300015204:-480,1320574804:-540,1331464804:-480,1352024404:-540,1362914404:-480,1383474004:-540,1394364004:-480,1414923604:-540,1425813604:-480,1446373204:-540,1457868004:-480,1478427604:-540,1489317604:-480,1509877204:-540,1520767204:-480},
"America/Noronha":{1217582405:-120},
"America/Panama":{1217582405:-300},
"America/Pangnirtung":{1217582406:-240,1225606806:-300,1236496806:-240,1257056406:-300,1268551206:-240,1289110806:-300,1300000806:-240,1320560406:-300,1331450406:-240,1352010006:-300,1362900006:-240,1383459606:-300,1394349606:-240,1414909206:-300,1425799206:-240,1446358806:-300,1457853606:-240,1478413206:-300,1489303206:-240,1509862806:-300,1520752806:-240},
"America/Paramaribo":{1217582407:-180},
"America/Phoenix":{1217582408:-420},
"America/Port of Spain":{1217582408:-240},
"America/Port-au-Prince":{1217582409:-300},
"America/Porto Acre":{1217582410:-300},
"America/Porto Velho":{1217582410:-240},
"America/Puerto Rico":{1217582411:-240},
"America/Rainy River":{1217582412:-300,1225610412:-360,1236500412:-300,1257060012:-360,1268554812:-300,1289114412:-360,1300004412:-300,1320564012:-360,1331454012:-300,1352013612:-360,1362903612:-300,1383463212:-360,1394353212:-300,1414912812:-360,1425802812:-300,1446362412:-360,1457857212:-300,1478416812:-360,1489306812:-300,1509866412:-360,1520756412:-300},
"America/Rankin Inlet":{1217582412:-300,1225610412:-360,1236500412:-300,1257060012:-360,1268554812:-300,1289114412:-360,1300004412:-300,1320564012:-360,1331454012:-300,1352013612:-360,1362903612:-300,1383463212:-360,1394353212:-300,1414912812:-360,1425802812:-300,1446362412:-360,1457857212:-300,1478416812:-360,1489306812:-300,1509866412:-360,1520756412:-300},
"America/Recife":{1217582413:-180},
"America/Regina":{1217582414:-360},
"America/Resolute":{1217582415:-300},
"America/Rio Branco":{1217582415:-300},
"America/Rosario":{1217582416:-180,1223176816:-120,1237083616:-180,1254626416:-120,1269138016:-180,1286076016:-120,1300587616:-180,1317525616:-120,1332037216:-180,1349580016:-120,1363486816:-180,1381029616:-120,1394936416:-180,1412479216:-120,1426386016:-180,1443928816:-120,1458440416:-180,1475378416:-120,1489890016:-180,1506828016:-120,1521339616:-180},
"America/Santiago":{1217582417:-240,1223785217:-180,1237087217:-240,1255234817:-180,1268536817:-240,1286684417:-180,1299986417:-240,1318134017:-180,1331436017:-240,1350188417:-180,1362885617:-240,1381638017:-180,1394335217:-240,1413087617:-180,1426389617:-240,1444537217:-180,1457839217:-240,1475986817:-180,1489288817:-240,1508041217:-180,1520738417:-240},
"America/Santo Domingo":{1217582418:-240},
"America/Sao Paulo":{1217582418:-180,1223781618:-120,1234664418:-180,1255231218:-120,1266718818:-180,1286680818:-120,1298168418:-180,1318130418:-120,1329618018:-180,1350184818:-120,1361067618:-180,1381634418:-120,1392517218:-180,1413084018:-120,1423966818:-180,1444533618:-120,1456021218:-180,1475983218:-120,1487470818:-180,1507432818:-120,1518920418:-180},
"America/Scoresbysund":{1217582419:0,1224984019:-60,1238289619:0,1256433619:-60,1269739219:0,1288488019:-60,1301188819:0,1319937619:-60,1332638419:0,1351387219:-60,1364692819:0,1382836819:-60,1396142419:0,1414286419:-60,1427592019:0,1445736019:-60,1459041619:0,1477790419:-60,1490491219:0,1509240019:-60,1521940819:0},
"America/Shiprock":{1217582420:-360,1225614020:-420,1236504020:-360,1257063620:-420,1268558420:-360,1289118020:-420,1300008020:-360,1320567620:-420,1331457620:-360,1352017220:-420,1362907220:-360,1383466820:-420,1394356820:-360,1414916420:-420,1425806420:-360,1446366020:-420,1457860820:-360,1478420420:-420,1489310420:-360,1509870020:-420,1520760020:-360},
"America/St Barthelemy":{1217582420:-240},
"America/St Johns":{1217582421:-150,1225596021:-210,1236486021:-150,1257045621:-210,1268540421:-150,1289100021:-210,1299990021:-150,1320549621:-210,1331439621:-150,1351999221:-210,1362889221:-150,1383448821:-210,1394338821:-150,1414898421:-210,1425788421:-150,1446348021:-210,1457842821:-150,1478402421:-210,1489292421:-150,1509852021:-210,1520742021:-150},
"America/St Kitts":{1217582422:-240},
"America/St Lucia":{1217582423:-240},
"America/St Thomas":{1217582423:-240},
"America/St Vincent":{1217582424:-240},
"America/Swift Current":{1217582425:-360},
"America/Tegucigalpa":{1217582425:-360},
"America/Thule":{1217582426:-180,1225603226:-240,1236493226:-180,1257052826:-240,1268547626:-180,1289107226:-240,1299997226:-180,1320556826:-240,1331446826:-180,1352006426:-240,1362896426:-180,1383456026:-240,1394346026:-180,1414905626:-240,1425795626:-180,1446355226:-240,1457850026:-180,1478409626:-240,1489299626:-180,1509859226:-240,1520749226:-180},
"America/Thunder Bay":{1217582427:-240,1225606827:-300,1236496827:-240,1257056427:-300,1268551227:-240,1289110827:-300,1300000827:-240,1320560427:-300,1331450427:-240,1352010027:-300,1362900027:-240,1383459627:-300,1394349627:-240,1414909227:-300,1425799227:-240,1446358827:-300,1457853627:-240,1478413227:-300,1489303227:-240,1509862827:-300,1520752827:-240},
"America/Tijuana":{1217582427:-420,1225012827:-480,1238926827:-420,1256462427:-480,1270376427:-420,1288516827:-480,1301826027:-420,1319966427:-480,1333275627:-420,1351416027:-480,1365330027:-420,1382865627:-480,1396779627:-420,1414315227:-480,1428229227:-420,1445764827:-480,1459678827:-420,1477819227:-480,1491128427:-420,1509268827:-480,1522578027:-420},
"America/Toronto":{1217582428:-240,1225606828:-300,1236496828:-240,1257056428:-300,1268551228:-240,1289110828:-300,1300000828:-240,1320560428:-300,1331450428:-240,1352010028:-300,1362900028:-240,1383459628:-300,1394349628:-240,1414909228:-300,1425799228:-240,1446358828:-300,1457853628:-240,1478413228:-300,1489303228:-240,1509862828:-300,1520752828:-240},
"America/Tortola":{1217582429:-240},
"America/Vancouver":{1217582430:-420,1225617630:-480,1236507630:-420,1257067230:-480,1268562030:-420,1289121630:-480,1300011630:-420,1320571230:-480,1331461230:-420,1352020830:-480,1362910830:-420,1383470430:-480,1394360430:-420,1414920030:-480,1425810030:-420,1446369630:-480,1457864430:-420,1478424030:-480,1489314030:-420,1509873630:-480,1520763630:-420},
"America/Virgin":{1217582430:-240},
"America/Whitehorse":{1217582431:-420,1225617631:-480,1236507631:-420,1257067231:-480,1268562031:-420,1289121631:-480,1300011631:-420,1320571231:-480,1331461231:-420,1352020831:-480,1362910831:-420,1383470431:-480,1394360431:-420,1414920031:-480,1425810031:-420,1446369631:-480,1457864431:-420,1478424031:-480,1489314031:-420,1509873631:-480,1520763631:-420},
"America/Winnipeg":{1217582432:-300,1225610432:-360,1236500432:-300,1257060032:-360,1268554832:-300,1289114432:-360,1300004432:-300,1320564032:-360,1331454032:-300,1352013632:-360,1362903632:-300,1383463232:-360,1394353232:-300,1414912832:-360,1425802832:-300,1446362432:-360,1457857232:-300,1478416832:-360,1489306832:-300,1509866432:-360,1520756432:-300},
"America/Yakutat":{1217582432:-480,1225621232:-540,1236511232:-480,1257070832:-540,1268565632:-480,1289125232:-540,1300015232:-480,1320574832:-540,1331464832:-480,1352024432:-540,1362914432:-480,1383474032:-540,1394364032:-480,1414923632:-540,1425813632:-480,1446373232:-540,1457868032:-480,1478427632:-540,1489317632:-480,1509877232:-540,1520767232:-480},
"America/Yellowknife":{1217582433:-360,1225614033:-420,1236504033:-360,1257063633:-420,1268558433:-360,1289118033:-420,1300008033:-360,1320567633:-420,1331457633:-360,1352017233:-420,1362907233:-360,1383466833:-420,1394356833:-360,1414916433:-420,1425806433:-360,1446366033:-420,1457860833:-360,1478420433:-420,1489310433:-360,1509870033:-420,1520760033:-360},
"Antarctica/Casey":{1217582434:480},
"Antarctica/Davis":{1217582434:420},
"Antarctica/DumontDUrville":{1217582435:600},
"Antarctica/Mawson":{1217582436:360},
"Antarctica/McMurdo":{1217582436:720,1222525236:780,1238854836:720,1253974836:780,1270304436:720,1285424436:780,1301754036:720,1316874036:780,1333203636:720,1348928436:780,1365258036:720,1380378036:780,1396707636:720,1411827636:780,1428157236:720,1443277236:780,1459606836:720,1474726836:780,1491056436:720,1506176436:780,1522506036:720},
"Antarctica/Palmer":{1217582437:-240,1223785237:-180,1237087237:-240,1255234837:-180,1268536837:-240,1286684437:-180,1299986437:-240,1318134037:-180,1331436037:-240,1350188437:-180,1362885637:-240,1381638037:-180,1394335237:-240,1413087637:-180,1426389637:-240,1444537237:-180,1457839237:-240,1475986837:-180,1489288837:-240,1508041237:-180,1520738437:-240},
"Antarctica/Rothera":{1217582438:-180},
"Antarctica/South Pole":{1217582439:720,1222525239:780,1238854839:720,1253974839:780,1270304439:720,1285424439:780,1301754039:720,1316874039:780,1333203639:720,1348928439:780,1365258039:720,1380378039:780,1396707639:720,1411827639:780,1428157239:720,1443277239:780,1459606839:720,1474726839:780,1491056439:720,1506176439:780,1522506039:720},
"Antarctica/Syowa":{1217582439:180},
"Antarctica/Vostok":{1217582440:360},
"Arctic/Longyearbyen":{1217582441:120,1224984041:60,1238289641:120,1256433641:60,1269739241:120,1288488041:60,1301188841:120,1319937641:60,1332638441:120,1351387241:60,1364692841:120,1382836841:60,1396142441:120,1414286441:60,1427592041:120,1445736041:60,1459041641:120,1477790441:60,1490491241:120,1509240041:60,1521940841:120},
"Asia/Aden":{1217582441:180},
"Asia/Almaty":{1217582442:360},
"Asia/Amman":{1217582443:180,1225405243:120,1238019643:180,1256854843:120,1269469243:180,1288304443:120,1301523643:180,1319754043:120,1332973243:180,1351203643:120,1364422843:180,1382653243:120,1395872443:180,1414707643:120,1427322043:180,1446157243:120,1459376443:180,1477606843:120,1490826043:180,1509056443:120,1522275643:180},
"Asia/Anadyr":{1217582444:780,1224944444:720,1238250044:780,1256394044:720,1269699644:780,1288448444:720,1301149244:780,1319898044:720,1332598844:780,1351347644:720,1364653244:780,1382797244:720,1396102844:780,1414246844:720,1427552444:780,1445696444:720,1459002044:780,1477750844:720,1490451644:780,1509200444:720,1521901244:780},
"Asia/Aqtau":{1217582444:300},
"Asia/Aqtobe":{1217582445:300},
"Asia/Ashgabat":{1217582446:300},
"Asia/Ashkhabad":{1217582446:300},
"Asia/Baghdad":{1217582447:180},
"Asia/Bahrain":{1217582448:180},
"Asia/Baku":{1217582449:300,1224980449:240,1238286049:300,1256430049:240,1269735649:300,1288484449:240,1301185249:300,1319934049:240,1332634849:300,1351383649:240,1364689249:300,1382833249:240,1396138849:300,1414282849:240,1427588449:300,1445732449:240,1459038049:300,1477786849:240,1490487649:300,1509236449:240,1521937249:300},
"Asia/Bangkok":{1217582449:420},
"Asia/Beirut":{1217582450:180,1224969650:120,1238278850:180,1256419250:120,1269728450:180,1288473650:120,1301178050:180,1319923250:120,1332627650:180,1351372850:120,1364682050:180,1382822450:120,1396131650:180,1414272050:120,1427581250:180,1445721650:120,1459030850:180,1477776050:120,1490480450:180,1509225650:120,1521930050:180},
"Asia/Bishkek":{1217582451:360},
"Asia/Brunei":{1217582451:480},
"Asia/Calcutta":{1217582452:330},
"Asia/Choibalsan":{1217582453:480},
"Asia/Chongqing":{1217582453:480},
"Asia/Chungking":{1217582454:480},
"Asia/Colombo":{1217582455:330},
"Asia/Dacca":{1217582456:360},
"Asia/Damascus":{1217582456:180,1222809656:120,1238710856:180,1254345656:120,1270160456:180,1285881656:120,1301610056:180,1317417656:120,1333664456:180,1349040056:120,1365114056:180,1380576056:120,1396563656:180,1412112056:120,1428013256:180,1443648056:120,1459462856:180,1475270456:120,1491517256:180,1506806456:120,1522966856:180},
"Asia/Dhaka":{1217582457:360},
"Asia/Dili":{1217582458:540},
"Asia/Dubai":{1217582458:240},
"Asia/Dushanbe":{1217582459:300},
"Asia/Gaza":{1217582460:180,1221088860:120,1238538060:180,1252538460:120,1270074060:180,1283988060:120,1301610060:180,1315437660:120,1333232460:180,1347492060:120,1364768460:180,1378941660:120,1396304460:180,1410391260:120,1427840460:180,1441840860:120,1459462860:180,1473290460:120,1490998860:180,1505344860:120,1522534860:180},
"Asia/Harbin":{1217582460:480},
"Asia/Ho Chi Minh":{1217582461:420},
"Asia/Hong Kong":{1217582462:480},
"Asia/Hovd":{1217582463:420},
"Asia/Irkutsk":{1217582463:540,1224958863:480,1238264463:540,1256408463:480,1269714063:540,1288462863:480,1301163663:540,1319912463:480,1332613263:540,1351362063:480,1364667663:540,1382811663:480,1396117263:540,1414261263:480,1427566863:540,1445710863:480,1459016463:540,1477765263:480,1490466063:540,1509214863:480,1521915663:540},
"Asia/Istanbul":{1217582464:180,1224984064:120,1238289664:180,1256433664:120,1269739264:180,1288488064:120,1301188864:180,1319937664:120,1332638464:180,1351387264:120,1364692864:180,1382836864:120,1396142464:180,1414286464:120,1427592064:180,1445736064:120,1459041664:180,1477790464:120,1490491264:180,1509240064:120,1521940864:180},
"Asia/Jakarta":{1217582465:420},
"Asia/Jayapura":{1217582465:540},
"Asia/Jerusalem":{1217582466:180,1223162466:120,1238113266:180,1254007266:120,1269562866:180,1284247266:120,1301617266:180,1317511266:120,1333066866:180,1348356066:120,1364516466:180,1378596066:120,1395966066:180,1411860066:120,1427415666:180,1442704866:120,1459470066:180,1475968866:120,1490919666:180,1506208866:120,1522369266:180},
"Asia/Kabul":{1217582467:270},
"Asia/Kamchatka":{1217582468:780,1224944468:720,1238250068:780,1256394068:720,1269699668:780,1288448468:720,1301149268:780,1319898068:720,1332598868:780,1351347668:720,1364653268:780,1382797268:720,1396102868:780,1414246868:720,1427552468:780,1445696468:720,1459002068:780,1477750868:720,1490451668:780,1509200468:720,1521901268:780},
"Asia/Karachi":{1217582468:360,1220206868:300},
"Asia/Kashgar":{1217582469:480},
"Asia/Katmandu":{1217582470:345},
"Asia/Kolkata":{1217582470:330},
"Asia/Krasnoyarsk":{1217582471:480,1224962471:420,1238268071:480,1256412071:420,1269717671:480,1288466471:420,1301167271:480,1319916071:420,1332616871:480,1351365671:420,1364671271:480,1382815271:420,1396120871:480,1414264871:420,1427570471:480,1445714471:420,1459020071:480,1477768871:420,1490469671:480,1509218471:420,1521919271:480},
"Asia/Kuala Lumpur":{1217582472:480},
"Asia/Kuching":{1217582472:480},
"Asia/Kuwait":{1217582473:180},
"Asia/Macao":{1217582474:480},
"Asia/Macau":{1217582475:480},
"Asia/Magadan":{1217582475:720,1224948075:660,1238253675:720,1256397675:660,1269703275:720,1288452075:660,1301152875:720,1319901675:660,1332602475:720,1351351275:660,1364656875:720,1382800875:660,1396106475:720,1414250475:660,1427556075:720,1445700075:660,1459005675:720,1477754475:660,1490455275:720,1509204075:660,1521904875:720},
"Asia/Makassar":{1217582476:480},
"Asia/Manila":{1217582477:480},
"Asia/Muscat":{1217582477:240},
"Asia/New Delhi":{1217582478:330},
"Asia/Nicosia":{1217582479:180,1224984079:120,1238289679:180,1256433679:120,1269739279:180,1288488079:120,1301188879:180,1319937679:120,1332638479:180,1351387279:120,1364692879:180,1382836879:120,1396142479:180,1414286479:120,1427592079:180,1445736079:120,1459041679:180,1477790479:120,1490491279:180,1509240079:120,1521940879:180},
"Asia/Novosibirsk":{1217582480:420,1224966080:360,1238271680:420,1256415680:360,1269721280:420,1288470080:360,1301170880:420,1319919680:360,1332620480:420,1351369280:360,1364674880:420,1382818880:360,1396124480:420,1414268480:360,1427574080:420,1445718080:360,1459023680:420,1477772480:360,1490473280:420,1509222080:360,1521922880:420},
"Asia/Omsk":{1217582480:420,1224966080:360,1238271680:420,1256415680:360,1269721280:420,1288470080:360,1301170880:420,1319919680:360,1332620480:420,1351369280:360,1364674880:420,1382818880:360,1396124480:420,1414268480:360,1427574080:420,1445718080:360,1459023680:420,1477772480:360,1490473280:420,1509222080:360,1521922880:420},
"Asia/Oral":{1217582481:300},
"Asia/Phnom Penh":{1217582482:420},
"Asia/Pontianak":{1217582482:420},
"Asia/Pyongyang":{1217582483:540},
"Asia/Qatar":{1217582484:180},
"Asia/Qyzylorda":{1217582484:360},
"Asia/Rangoon":{1217582485:390},
"Asia/Riyadh":{1217582486:180},
"Asia/Saigon":{1217582486:420},
"Asia/Sakhalin":{1217582487:660,1224951687:600,1238257287:660,1256401287:600,1269706887:660,1288455687:600,1301156487:660,1319905287:600,1332606087:660,1351354887:600,1364660487:660,1382804487:600,1396110087:660,1414254087:600,1427559687:660,1445703687:600,1459009287:660,1477758087:600,1490458887:660,1509207687:600,1521908487:660},
"Asia/Samarkand":{1217582488:300},
"Asia/Seoul":{1217582489:540},
"Asia/Shanghai":{1217582489:480},
"Asia/Singapore":{1217582490:480},
"Asia/Taipei":{1217582491:480},
"Asia/Tashkent":{1217582491:300},
"Asia/Tbilisi":{1217582492:240},
"Asia/Tehran":{1217582493:270,1221942093:210,1237670493:270,1253564493:210,1269206493:270,1285100493:210,1300742493:270,1316636493:210,1332278493:270,1348172493:210,1363900893:270,1379794893:210,1395436893:270,1411330893:210,1426972893:270,1442866893:210,1458508893:270,1474402893:210,1490131293:270,1506025293:210,1521667293:270},
"Asia/Tel Aviv":{1217582494:180,1223162494:120,1238113294:180,1254007294:120,1269562894:180,1284247294:120,1301617294:180,1317511294:120,1333066894:180,1348356094:120,1364516494:180,1378596094:120,1395966094:180,1411860094:120,1427415694:180,1442704894:120,1459470094:180,1475968894:120,1490919694:180,1506208894:120,1522369294:180},
"Asia/Thimbu":{1217582494:360},
"Asia/Thimphu":{1217582495:360},
"Asia/Tokyo":{1217582496:540},
"Asia/Ujung Pandang":{1217582496:480},
"Asia/Ulaanbaatar":{1217582497:480},
"Asia/Ulan Bator":{1217582498:480},
"Asia/Urumqi":{1217582498:480},
"Asia/Vientiane":{1217582499:420},
"Asia/Vladivostok":{1217582500:660,1224951700:600,1238257300:660,1256401300:600,1269706900:660,1288455700:600,1301156500:660,1319905300:600,1332606100:660,1351354900:600,1364660500:660,1382804500:600,1396110100:660,1414254100:600,1427559700:660,1445703700:600,1459009300:660,1477758100:600,1490458900:660,1509207700:600,1521908500:660},
"Asia/Yakutsk":{1217582500:600,1224955300:540,1238260900:600,1256404900:540,1269710500:600,1288459300:540,1301160100:600,1319908900:540,1332609700:600,1351358500:540,1364664100:600,1382808100:540,1396113700:600,1414257700:540,1427563300:600,1445707300:540,1459012900:600,1477761700:540,1490462500:600,1509211300:540,1521912100:600},
"Asia/Yekaterinburg":{1217582501:360,1224969701:300,1238275301:360,1256419301:300,1269724901:360,1288473701:300,1301174501:360,1319923301:300,1332624101:360,1351372901:300,1364678501:360,1382822501:300,1396128101:360,1414272101:300,1427577701:360,1445721701:300,1459027301:360,1477776101:300,1490476901:360,1509225701:300,1521926501:360},
"Asia/Yerevan":{1217582502:300,1224973302:240,1238278902:300,1256422902:240,1269728502:300,1288477302:240,1301178102:300,1319926902:240,1332627702:300,1351376502:240,1364682102:300,1382826102:240,1396131702:300,1414275702:240,1427581302:300,1445725302:240,1459030902:300,1477779702:240,1490480502:300,1509229302:240,1521930102:300},
"Atlantic/Azores":{1217582503:0,1224984103:-60,1238289703:0,1256433703:-60,1269739303:0,1288488103:-60,1301188903:0,1319937703:-60,1332638503:0,1351387303:-60,1364692903:0,1382836903:-60,1396142503:0,1414286503:-60,1427592103:0,1445736103:-60,1459041703:0,1477790503:-60,1490491303:0,1509240103:-60,1521940903:0},
"Atlantic/Bermuda":{1217582503:-180,1225603303:-240,1236493303:-180,1257052903:-240,1268547703:-180,1289107303:-240,1299997303:-180,1320556903:-240,1331446903:-180,1352006503:-240,1362896503:-180,1383456103:-240,1394346103:-180,1414905703:-240,1425795703:-180,1446355303:-240,1457850103:-180,1478409703:-240,1489299703:-180,1509859303:-240,1520749303:-180},
"Atlantic/Canary":{1217582504:60,1224984104:0,1238289704:60,1256433704:0,1269739304:60,1288488104:0,1301188904:60,1319937704:0,1332638504:60,1351387304:0,1364692904:60,1382836904:0,1396142504:60,1414286504:0,1427592104:60,1445736104:0,1459041704:60,1477790504:0,1490491304:60,1509240104:0,1521940904:60},
"Atlantic/Cape Verde":{1217582505:-60},
"Atlantic/Faeroe":{1217582506:60,1224984106:0,1238289706:60,1256433706:0,1269739306:60,1288488106:0,1301188906:60,1319937706:0,1332638506:60,1351387306:0,1364692906:60,1382836906:0,1396142506:60,1414286506:0,1427592106:60,1445736106:0,1459041706:60,1477790506:0,1490491306:60,1509240106:0,1521940906:60},
"Atlantic/Faroe":{1217582506:60,1224984106:0,1238289706:60,1256433706:0,1269739306:60,1288488106:0,1301188906:60,1319937706:0,1332638506:60,1351387306:0,1364692906:60,1382836906:0,1396142506:60,1414286506:0,1427592106:60,1445736106:0,1459041706:60,1477790506:0,1490491306:60,1509240106:0,1521940906:60},
"Atlantic/Jan Mayen":{1217582507:120,1224984107:60,1238289707:120,1256433707:60,1269739307:120,1288488107:60,1301188907:120,1319937707:60,1332638507:120,1351387307:60,1364692907:120,1382836907:60,1396142507:120,1414286507:60,1427592107:120,1445736107:60,1459041707:120,1477790507:60,1490491307:120,1509240107:60,1521940907:120},
"Atlantic/Madeira":{1217582508:60,1224984108:0,1238289708:60,1256433708:0,1269739308:60,1288488108:0,1301188908:60,1319937708:0,1332638508:60,1351387308:0,1364692908:60,1382836908:0,1396142508:60,1414286508:0,1427592108:60,1445736108:0,1459041708:60,1477790508:0,1490491308:60,1509240108:0,1521940908:60},
"Atlantic/Reykjavik":{1217582509:0},
"Atlantic/South Georgia":{1217582509:-120},
"Atlantic/St Helena":{1217582510:0},
"Atlantic/Stanley":{1217582510:-240,1220768510:-180,1240118510:-240,1252218110:-180,1271568110:-240,1283667710:-180,1303017710:-240,1315117310:-180,1334467310:-240,1346566910:-180,1366521710:-240,1378016510:-180,1397971310:-240,1410070910:-180,1429420910:-240,1441520510:-180,1460870510:-240,1472970110:-180,1492320110:-240,1504419710:-180,1523769710:-240},
"Australia/ACT":{1217582511:600,1223137311:660,1238862111:600,1254586911:660,1270311711:600,1286036511:660,1301761311:600,1317486111:660,1333210911:600,1349540511:660,1365265311:600,1380990111:660,1396714911:600,1412439711:660,1428164511:600,1443889311:660,1459614111:600,1475338911:660,1491063711:600,1506788511:660,1522513311:600},
"Australia/Adelaide":{1217582512:570,1223140912:630,1238865712:570,1254590512:630,1270315312:570,1286040112:630,1301764912:570,1317489712:630,1333214512:570,1349544112:630,1365268912:570,1380993712:630,1396718512:570,1412443312:630,1428168112:570,1443892912:630,1459617712:570,1475342512:630,1491067312:570,1506792112:630,1522516912:570},
"Australia/Brisbane":{1217582512:600},
"Australia/Broken Hill":{1217582513:570,1223140913:630,1238865713:570,1254590513:630,1270315313:570,1286040113:630,1301764913:570,1317489713:630,1333214513:570,1349544113:630,1365268913:570,1380993713:630,1396718513:570,1412443313:630,1428168113:570,1443892913:630,1459617713:570,1475342513:630,1491067313:570,1506792113:630,1522516913:570},
"Australia/Canberra":{1217582514:600,1223137314:660,1238862114:600,1254586914:660,1270311714:600,1286036514:660,1301761314:600,1317486114:660,1333210914:600,1349540514:660,1365265314:600,1380990114:660,1396714914:600,1412439714:660,1428164514:600,1443889314:660,1459614114:600,1475338914:660,1491063714:600,1506788514:660,1522513314:600},
"Australia/Currie":{1217582515:600,1223137315:660,1238862115:600,1254586915:660,1270311715:600,1286036515:660,1301761315:600,1317486115:660,1333210915:600,1349540515:660,1365265315:600,1380990115:660,1396714915:600,1412439715:660,1428164515:600,1443889315:660,1459614115:600,1475338915:660,1491063715:600,1506788515:660,1522513315:600},
"Australia/Darwin":{1217582515:570},
"Australia/Eucla":{1217582516:525,1224955316:585,1238260916:525},
"Australia/Hobart":{1217582517:600,1223137317:660,1238862117:600,1254586917:660,1270311717:600,1286036517:660,1301761317:600,1317486117:660,1333210917:600,1349540517:660,1365265317:600,1380990117:660,1396714917:600,1412439717:660,1428164517:600,1443889317:660,1459614117:600,1475338917:660,1491063717:600,1506788517:660,1522513317:600},
"Australia/LHI":{1217582517:630,1223137317:660,1238858517:630,1254586917:660,1270308117:630,1286036517:660,1301757717:630,1317486117:660,1333207317:630,1349540517:660,1365261717:630,1380990117:660,1396711317:630,1412439717:660,1428160917:630,1443889317:660,1459610517:630,1475338917:660,1491060117:630,1506788517:660,1522509717:630},
"Australia/Lindeman":{1217582518:600},
"Australia/Lord Howe":{1217582519:630,1223137319:660,1238858519:630,1254586919:660,1270308119:630,1286036519:660,1301757719:630,1317486119:660,1333207319:630,1349540519:660,1365261719:630,1380990119:660,1396711319:630,1412439719:660,1428160919:630,1443889319:660,1459610519:630,1475338919:660,1491060119:630,1506788519:660,1522509719:630},
"Australia/Melbourne":{1217582520:600,1223137320:660,1238862120:600,1254586920:660,1270311720:600,1286036520:660,1301761320:600,1317486120:660,1333210920:600,1349540520:660,1365265320:600,1380990120:660,1396714920:600,1412439720:660,1428164520:600,1443889320:660,1459614120:600,1475338920:660,1491063720:600,1506788520:660,1522513320:600},
"Australia/NSW":{1217582520:600,1223137320:660,1238862120:600,1254586920:660,1270311720:600,1286036520:660,1301761320:600,1317486120:660,1333210920:600,1349540520:660,1365265320:600,1380990120:660,1396714920:600,1412439720:660,1428164520:600,1443889320:660,1459614120:600,1475338920:660,1491063720:600,1506788520:660,1522513320:600},
"Australia/North":{1217582521:570},
"Australia/Perth":{1217582522:480,1224958922:540,1238264522:480},
"Australia/Queensland":{1217582522:600},
"Australia/South":{1217582523:570,1223140923:630,1238865723:570,1254590523:630,1270315323:570,1286040123:630,1301764923:570,1317489723:630,1333214523:570,1349544123:630,1365268923:570,1380993723:630,1396718523:570,1412443323:630,1428168123:570,1443892923:630,1459617723:570,1475342523:630,1491067323:570,1506792123:630,1522516923:570},
"Australia/Sydney":{1217582524:600,1223137324:660,1238862124:600,1254586924:660,1270311724:600,1286036524:660,1301761324:600,1317486124:660,1333210924:600,1349540524:660,1365265324:600,1380990124:660,1396714924:600,1412439724:660,1428164524:600,1443889324:660,1459614124:600,1475338924:660,1491063724:600,1506788524:660,1522513324:600},
"Australia/Tasmania":{1217582525:600,1223137325:660,1238862125:600,1254586925:660,1270311725:600,1286036525:660,1301761325:600,1317486125:660,1333210925:600,1349540525:660,1365265325:600,1380990125:660,1396714925:600,1412439725:660,1428164525:600,1443889325:660,1459614125:600,1475338925:660,1491063725:600,1506788525:660,1522513325:600},
"Australia/Victoria":{1217582525:600,1223137325:660,1238862125:600,1254586925:660,1270311725:600,1286036525:660,1301761325:600,1317486125:660,1333210925:600,1349540525:660,1365265325:600,1380990125:660,1396714925:600,1412439725:660,1428164525:600,1443889325:660,1459614125:600,1475338925:660,1491063725:600,1506788525:660,1522513325:600},
"Australia/West":{1217582526:480,1224958926:540,1238264526:480},
"Australia/Yancowinna":{1217582527:570,1223140927:630,1238865727:570,1254590527:630,1270315327:570,1286040127:630,1301764927:570,1317489727:630,1333214527:570,1349544127:630,1365268927:570,1380993727:630,1396718527:570,1412443327:630,1428168127:570,1443892927:630,1459617727:570,1475342527:630,1491067327:570,1506792127:630,1522516927:570},
"Brazil/Acre":{1217582527:-300},
"Brazil/DeNoronha":{1217582528:-120},
"Brazil/East":{1217582529:-180,1223781729:-120,1234664529:-180,1255231329:-120,1266718929:-180,1286680929:-120,1298168529:-180,1318130529:-120,1329618129:-180,1350184929:-120,1361067729:-180,1381634529:-120,1392517329:-180,1413084129:-120,1423966929:-180,1444533729:-120,1456021329:-180,1475983329:-120,1487470929:-180,1507432929:-120,1518920529:-180},
"Brazil/West":{1217582530:-240},
"Chile/Continental":{1217582530:-240,1223785330:-180,1237087330:-240,1255234930:-180,1268536930:-240,1286684530:-180,1299986530:-240,1318134130:-180,1331436130:-240,1350188530:-180,1362885730:-240,1381638130:-180,1394335330:-240,1413087730:-180,1426389730:-240,1444537330:-180,1457839330:-240,1475986930:-180,1489288930:-240,1508041330:-180,1520738530:-240},
"Chile/EasterIsland":{1217582531:-360,1223785331:-300,1237087331:-360,1255234931:-300,1268536931:-360,1286684531:-300,1299986531:-360,1318134131:-300,1331436131:-360,1350188531:-300,1362885731:-360,1381638131:-300,1394335331:-360,1413087731:-300,1426389731:-360,1444537331:-300,1457839331:-360,1475986931:-300,1489288931:-360,1508041331:-300,1520738531:-360},
"Europe/Amsterdam":{1217582532:120,1224984132:60,1238289732:120,1256433732:60,1269739332:120,1288488132:60,1301188932:120,1319937732:60,1332638532:120,1351387332:60,1364692932:120,1382836932:60,1396142532:120,1414286532:60,1427592132:120,1445736132:60,1459041732:120,1477790532:60,1490491332:120,1509240132:60,1521940932:120},
"Europe/Andorra":{1217582532:120,1224984132:60,1238289732:120,1256433732:60,1269739332:120,1288488132:60,1301188932:120,1319937732:60,1332638532:120,1351387332:60,1364692932:120,1382836932:60,1396142532:120,1414286532:60,1427592132:120,1445736132:60,1459041732:120,1477790532:60,1490491332:120,1509240132:60,1521940932:120},
"Europe/Athens":{1217582533:180,1224984133:120,1238289733:180,1256433733:120,1269739333:180,1288488133:120,1301188933:180,1319937733:120,1332638533:180,1351387333:120,1364692933:180,1382836933:120,1396142533:180,1414286533:120,1427592133:180,1445736133:120,1459041733:180,1477790533:120,1490491333:180,1509240133:120,1521940933:180},
"Europe/Belfast":{1217582534:60,1224984134:0,1238289734:60,1256433734:0,1269739334:60,1288488134:0,1301188934:60,1319937734:0,1332638534:60,1351387334:0,1364692934:60,1382836934:0,1396142534:60,1414286534:0,1427592134:60,1445736134:0,1459041734:60,1477790534:0,1490491334:60,1509240134:0,1521940934:60},
"Europe/Belgrade":{1217582535:120,1224984135:60,1238289735:120,1256433735:60,1269739335:120,1288488135:60,1301188935:120,1319937735:60,1332638535:120,1351387335:60,1364692935:120,1382836935:60,1396142535:120,1414286535:60,1427592135:120,1445736135:60,1459041735:120,1477790535:60,1490491335:120,1509240135:60,1521940935:120},
"Europe/Berlin":{1217582535:120,1224984135:60,1238289735:120,1256433735:60,1269739335:120,1288488135:60,1301188935:120,1319937735:60,1332638535:120,1351387335:60,1364692935:120,1382836935:60,1396142535:120,1414286535:60,1427592135:120,1445736135:60,1459041735:120,1477790535:60,1490491335:120,1509240135:60,1521940935:120},
"Europe/Bratislava":{1217582536:120,1224984136:60,1238289736:120,1256433736:60,1269739336:120,1288488136:60,1301188936:120,1319937736:60,1332638536:120,1351387336:60,1364692936:120,1382836936:60,1396142536:120,1414286536:60,1427592136:120,1445736136:60,1459041736:120,1477790536:60,1490491336:120,1509240136:60,1521940936:120},
"Europe/Brussels":{1217582537:120,1224984137:60,1238289737:120,1256433737:60,1269739337:120,1288488137:60,1301188937:120,1319937737:60,1332638537:120,1351387337:60,1364692937:120,1382836937:60,1396142537:120,1414286537:60,1427592137:120,1445736137:60,1459041737:120,1477790537:60,1490491337:120,1509240137:60,1521940937:120},
"Europe/Bucharest":{1217582538:180,1224984138:120,1238289738:180,1256433738:120,1269739338:180,1288488138:120,1301188938:180,1319937738:120,1332638538:180,1351387338:120,1364692938:180,1382836938:120,1396142538:180,1414286538:120,1427592138:180,1445736138:120,1459041738:180,1477790538:120,1490491338:180,1509240138:120,1521940938:180},
"Europe/Budapest":{1217582538:120,1224984138:60,1238289738:120,1256433738:60,1269739338:120,1288488138:60,1301188938:120,1319937738:60,1332638538:120,1351387338:60,1364692938:120,1382836938:60,1396142538:120,1414286538:60,1427592138:120,1445736138:60,1459041738:120,1477790538:60,1490491338:120,1509240138:60,1521940938:120},
"Europe/Chisinau":{1217582539:180,1224984139:120,1238289739:180,1256433739:120,1269739339:180,1288488139:120,1301188939:180,1319937739:120,1332638539:180,1351387339:120,1364692939:180,1382836939:120,1396142539:180,1414286539:120,1427592139:180,1445736139:120,1459041739:180,1477790539:120,1490491339:180,1509240139:120,1521940939:180},
"Europe/Copenhagen":{1217582540:120,1224984140:60,1238289740:120,1256433740:60,1269739340:120,1288488140:60,1301188940:120,1319937740:60,1332638540:120,1351387340:60,1364692940:120,1382836940:60,1396142540:120,1414286540:60,1427592140:120,1445736140:60,1459041740:120,1477790540:60,1490491340:120,1509240140:60,1521940940:120},
"Europe/Dublin":{1217582541:60,1224984141:0,1238289741:60,1256433741:0,1269739341:60,1288488141:0,1301188941:60,1319937741:0,1332638541:60,1351387341:0,1364692941:60,1382836941:0,1396142541:60,1414286541:0,1427592141:60,1445736141:0,1459041741:60,1477790541:0,1490491341:60,1509240141:0,1521940941:60},
"Europe/Gibraltar":{1217582541:120,1224984141:60,1238289741:120,1256433741:60,1269739341:120,1288488141:60,1301188941:120,1319937741:60,1332638541:120,1351387341:60,1364692941:120,1382836941:60,1396142541:120,1414286541:60,1427592141:120,1445736141:60,1459041741:120,1477790541:60,1490491341:120,1509240141:60,1521940941:120},
"Europe/Guernsey":{1217582542:60,1224984142:0,1238289742:60,1256433742:0,1269739342:60,1288488142:0,1301188942:60,1319937742:0,1332638542:60,1351387342:0,1364692942:60,1382836942:0,1396142542:60,1414286542:0,1427592142:60,1445736142:0,1459041742:60,1477790542:0,1490491342:60,1509240142:0,1521940942:60},
"Europe/Helsinki":{1217582543:180,1224984143:120,1238289743:180,1256433743:120,1269739343:180,1288488143:120,1301188943:180,1319937743:120,1332638543:180,1351387343:120,1364692943:180,1382836943:120,1396142543:180,1414286543:120,1427592143:180,1445736143:120,1459041743:180,1477790543:120,1490491343:180,1509240143:120,1521940943:180},
"Europe/Isle of Man":{1217582543:60,1224984143:0,1238289743:60,1256433743:0,1269739343:60,1288488143:0,1301188943:60,1319937743:0,1332638543:60,1351387343:0,1364692943:60,1382836943:0,1396142543:60,1414286543:0,1427592143:60,1445736143:0,1459041743:60,1477790543:0,1490491343:60,1509240143:0,1521940943:60},
"Europe/Istanbul":{1217582544:180,1224984144:120,1238289744:180,1256433744:120,1269739344:180,1288488144:120,1301188944:180,1319937744:120,1332638544:180,1351387344:120,1364692944:180,1382836944:120,1396142544:180,1414286544:120,1427592144:180,1445736144:120,1459041744:180,1477790544:120,1490491344:180,1509240144:120,1521940944:180},
"Europe/Jersey":{1217582545:60,1224984145:0,1238289745:60,1256433745:0,1269739345:60,1288488145:0,1301188945:60,1319937745:0,1332638545:60,1351387345:0,1364692945:60,1382836945:0,1396142545:60,1414286545:0,1427592145:60,1445736145:0,1459041745:60,1477790545:0,1490491345:60,1509240145:0,1521940945:60},
"Europe/Kaliningrad":{1217582546:180,1224980546:120,1238286146:180,1256430146:120,1269735746:180,1288484546:120,1301185346:180,1319934146:120,1332634946:180,1351383746:120,1364689346:180,1382833346:120,1396138946:180,1414282946:120,1427588546:180,1445732546:120,1459038146:180,1477786946:120,1490487746:180,1509236546:120,1521937346:180},
"Europe/Kiev":{1217582546:180,1224984146:120,1238289746:180,1256433746:120,1269739346:180,1288488146:120,1301188946:180,1319937746:120,1332638546:180,1351387346:120,1364692946:180,1382836946:120,1396142546:180,1414286546:120,1427592146:180,1445736146:120,1459041746:180,1477790546:120,1490491346:180,1509240146:120,1521940946:180},
"Europe/Lisbon":{1217582547:60,1224984147:0,1238289747:60,1256433747:0,1269739347:60,1288488147:0,1301188947:60,1319937747:0,1332638547:60,1351387347:0,1364692947:60,1382836947:0,1396142547:60,1414286547:0,1427592147:60,1445736147:0,1459041747:60,1477790547:0,1490491347:60,1509240147:0,1521940947:60},
"Europe/Ljubljana":{1217582548:120,1224984148:60,1238289748:120,1256433748:60,1269739348:120,1288488148:60,1301188948:120,1319937748:60,1332638548:120,1351387348:60,1364692948:120,1382836948:60,1396142548:120,1414286548:60,1427592148:120,1445736148:60,1459041748:120,1477790548:60,1490491348:120,1509240148:60,1521940948:120},
"Europe/London":{1217582549:60,1224984149:0,1238289749:60,1256433749:0,1269739349:60,1288488149:0,1301188949:60,1319937749:0,1332638549:60,1351387349:0,1364692949:60,1382836949:0,1396142549:60,1414286549:0,1427592149:60,1445736149:0,1459041749:60,1477790549:0,1490491349:60,1509240149:0,1521940949:60},
"Europe/Luxembourg":{1217582549:120,1224984149:60,1238289749:120,1256433749:60,1269739349:120,1288488149:60,1301188949:120,1319937749:60,1332638549:120,1351387349:60,1364692949:120,1382836949:60,1396142549:120,1414286549:60,1427592149:120,1445736149:60,1459041749:120,1477790549:60,1490491349:120,1509240149:60,1521940949:120},
"Europe/Madrid":{1217582550:120,1224984150:60,1238289750:120,1256433750:60,1269739350:120,1288488150:60,1301188950:120,1319937750:60,1332638550:120,1351387350:60,1364692950:120,1382836950:60,1396142550:120,1414286550:60,1427592150:120,1445736150:60,1459041750:120,1477790550:60,1490491350:120,1509240150:60,1521940950:120},
"Europe/Malta":{1217582551:120,1224984151:60,1238289751:120,1256433751:60,1269739351:120,1288488151:60,1301188951:120,1319937751:60,1332638551:120,1351387351:60,1364692951:120,1382836951:60,1396142551:120,1414286551:60,1427592151:120,1445736151:60,1459041751:120,1477790551:60,1490491351:120,1509240151:60,1521940951:120},
"Europe/Mariehamn":{1217582551:180,1224984151:120,1238289751:180,1256433751:120,1269739351:180,1288488151:120,1301188951:180,1319937751:120,1332638551:180,1351387351:120,1364692951:180,1382836951:120,1396142551:180,1414286551:120,1427592151:180,1445736151:120,1459041751:180,1477790551:120,1490491351:180,1509240151:120,1521940951:180},
"Europe/Minsk":{1217582552:180,1224980552:120,1238286152:180,1256430152:120,1269735752:180,1288484552:120,1301185352:180,1319934152:120,1332634952:180,1351383752:120,1364689352:180,1382833352:120,1396138952:180,1414282952:120,1427588552:180,1445732552:120,1459038152:180,1477786952:120,1490487752:180,1509236552:120,1521937352:180},
"Europe/Monaco":{1217582553:120,1224984153:60,1238289753:120,1256433753:60,1269739353:120,1288488153:60,1301188953:120,1319937753:60,1332638553:120,1351387353:60,1364692953:120,1382836953:60,1396142553:120,1414286553:60,1427592153:120,1445736153:60,1459041753:120,1477790553:60,1490491353:120,1509240153:60,1521940953:120},
"Europe/Moscow":{1217582554:240,1224976954:180,1238282554:240,1256426554:180,1269732154:240,1288480954:180,1301181754:240,1319930554:180,1332631354:240,1351380154:180,1364685754:240,1382829754:180,1396135354:240,1414279354:180,1427584954:240,1445728954:180,1459034554:240,1477783354:180,1490484154:240,1509232954:180,1521933754:240},
"Europe/Nicosia":{1217582554:180,1224984154:120,1238289754:180,1256433754:120,1269739354:180,1288488154:120,1301188954:180,1319937754:120,1332638554:180,1351387354:120,1364692954:180,1382836954:120,1396142554:180,1414286554:120,1427592154:180,1445736154:120,1459041754:180,1477790554:120,1490491354:180,1509240154:120,1521940954:180},
"Europe/Oslo":{1217582555:120,1224984155:60,1238289755:120,1256433755:60,1269739355:120,1288488155:60,1301188955:120,1319937755:60,1332638555:120,1351387355:60,1364692955:120,1382836955:60,1396142555:120,1414286555:60,1427592155:120,1445736155:60,1459041755:120,1477790555:60,1490491355:120,1509240155:60,1521940955:120},
"Europe/Paris":{1217582556:120,1224984156:60,1238289756:120,1256433756:60,1269739356:120,1288488156:60,1301188956:120,1319937756:60,1332638556:120,1351387356:60,1364692956:120,1382836956:60,1396142556:120,1414286556:60,1427592156:120,1445736156:60,1459041756:120,1477790556:60,1490491356:120,1509240156:60,1521940956:120},
"Europe/Podgorica":{1217582556:120,1224984156:60,1238289756:120,1256433756:60,1269739356:120,1288488156:60,1301188956:120,1319937756:60,1332638556:120,1351387356:60,1364692956:120,1382836956:60,1396142556:120,1414286556:60,1427592156:120,1445736156:60,1459041756:120,1477790556:60,1490491356:120,1509240156:60,1521940956:120},
"Europe/Prague":{1217582557:120,1224984157:60,1238289757:120,1256433757:60,1269739357:120,1288488157:60,1301188957:120,1319937757:60,1332638557:120,1351387357:60,1364692957:120,1382836957:60,1396142557:120,1414286557:60,1427592157:120,1445736157:60,1459041757:120,1477790557:60,1490491357:120,1509240157:60,1521940957:120},
"Europe/Riga":{1217582558:180,1224984158:120,1238289758:180,1256433758:120,1269739358:180,1288488158:120,1301188958:180,1319937758:120,1332638558:180,1351387358:120,1364692958:180,1382836958:120,1396142558:180,1414286558:120,1427592158:180,1445736158:120,1459041758:180,1477790558:120,1490491358:180,1509240158:120,1521940958:180},
"Europe/Rome":{1217582559:120,1224984159:60,1238289759:120,1256433759:60,1269739359:120,1288488159:60,1301188959:120,1319937759:60,1332638559:120,1351387359:60,1364692959:120,1382836959:60,1396142559:120,1414286559:60,1427592159:120,1445736159:60,1459041759:120,1477790559:60,1490491359:120,1509240159:60,1521940959:120},
"Europe/Samara":{1217582559:300,1224973359:240,1238278959:300,1256422959:240,1269728559:300,1288477359:240,1301178159:300,1319926959:240,1332627759:300,1351376559:240,1364682159:300,1382826159:240,1396131759:300,1414275759:240,1427581359:300,1445725359:240,1459030959:300,1477779759:240,1490480559:300,1509229359:240,1521930159:300},
"Europe/San Marino":{1217582560:120,1224984160:60,1238289760:120,1256433760:60,1269739360:120,1288488160:60,1301188960:120,1319937760:60,1332638560:120,1351387360:60,1364692960:120,1382836960:60,1396142560:120,1414286560:60,1427592160:120,1445736160:60,1459041760:120,1477790560:60,1490491360:120,1509240160:60,1521940960:120},
"Europe/Sarajevo":{1217582561:120,1224984161:60,1238289761:120,1256433761:60,1269739361:120,1288488161:60,1301188961:120,1319937761:60,1332638561:120,1351387361:60,1364692961:120,1382836961:60,1396142561:120,1414286561:60,1427592161:120,1445736161:60,1459041761:120,1477790561:60,1490491361:120,1509240161:60,1521940961:120},
"Europe/Simferopol":{1217582561:180,1224984161:120,1238289761:180,1256433761:120,1269739361:180,1288488161:120,1301188961:180,1319937761:120,1332638561:180,1351387361:120,1364692961:180,1382836961:120,1396142561:180,1414286561:120,1427592161:180,1445736161:120,1459041761:180,1477790561:120,1490491361:180,1509240161:120,1521940961:180},
"Europe/Skopje":{1217582562:120,1224984162:60,1238289762:120,1256433762:60,1269739362:120,1288488162:60,1301188962:120,1319937762:60,1332638562:120,1351387362:60,1364692962:120,1382836962:60,1396142562:120,1414286562:60,1427592162:120,1445736162:60,1459041762:120,1477790562:60,1490491362:120,1509240162:60,1521940962:120},
"Europe/Sofia":{1217582563:180,1224984163:120,1238289763:180,1256433763:120,1269739363:180,1288488163:120,1301188963:180,1319937763:120,1332638563:180,1351387363:120,1364692963:180,1382836963:120,1396142563:180,1414286563:120,1427592163:180,1445736163:120,1459041763:180,1477790563:120,1490491363:180,1509240163:120,1521940963:180},
"Europe/Stockholm":{1217582563:120,1224984163:60,1238289763:120,1256433763:60,1269739363:120,1288488163:60,1301188963:120,1319937763:60,1332638563:120,1351387363:60,1364692963:120,1382836963:60,1396142563:120,1414286563:60,1427592163:120,1445736163:60,1459041763:120,1477790563:60,1490491363:120,1509240163:60,1521940963:120},
"Europe/Tallinn":{1217582564:180,1224984164:120,1238289764:180,1256433764:120,1269739364:180,1288488164:120,1301188964:180,1319937764:120,1332638564:180,1351387364:120,1364692964:180,1382836964:120,1396142564:180,1414286564:120,1427592164:180,1445736164:120,1459041764:180,1477790564:120,1490491364:180,1509240164:120,1521940964:180},
"Europe/Tirane":{1217582565:120,1224984165:60,1238289765:120,1256433765:60,1269739365:120,1288488165:60,1301188965:120,1319937765:60,1332638565:120,1351387365:60,1364692965:120,1382836965:60,1396142565:120,1414286565:60,1427592165:120,1445736165:60,1459041765:120,1477790565:60,1490491365:120,1509240165:60,1521940965:120},
"Europe/Tiraspol":{1217582566:180,1224984166:120,1238289766:180,1256433766:120,1269739366:180,1288488166:120,1301188966:180,1319937766:120,1332638566:180,1351387366:120,1364692966:180,1382836966:120,1396142566:180,1414286566:120,1427592166:180,1445736166:120,1459041766:180,1477790566:120,1490491366:180,1509240166:120,1521940966:180},
"Europe/Uzhgorod":{1217582566:180,1224984166:120,1238289766:180,1256433766:120,1269739366:180,1288488166:120,1301188966:180,1319937766:120,1332638566:180,1351387366:120,1364692966:180,1382836966:120,1396142566:180,1414286566:120,1427592166:180,1445736166:120,1459041766:180,1477790566:120,1490491366:180,1509240166:120,1521940966:180},
"Europe/Vaduz":{1217582567:120,1224984167:60,1238289767:120,1256433767:60,1269739367:120,1288488167:60,1301188967:120,1319937767:60,1332638567:120,1351387367:60,1364692967:120,1382836967:60,1396142567:120,1414286567:60,1427592167:120,1445736167:60,1459041767:120,1477790567:60,1490491367:120,1509240167:60,1521940967:120},
"Europe/Vatican":{1217582568:120,1224984168:60,1238289768:120,1256433768:60,1269739368:120,1288488168:60,1301188968:120,1319937768:60,1332638568:120,1351387368:60,1364692968:120,1382836968:60,1396142568:120,1414286568:60,1427592168:120,1445736168:60,1459041768:120,1477790568:60,1490491368:120,1509240168:60,1521940968:120},
"Europe/Vienna":{1217582568:120,1224984168:60,1238289768:120,1256433768:60,1269739368:120,1288488168:60,1301188968:120,1319937768:60,1332638568:120,1351387368:60,1364692968:120,1382836968:60,1396142568:120,1414286568:60,1427592168:120,1445736168:60,1459041768:120,1477790568:60,1490491368:120,1509240168:60,1521940968:120},
"Europe/Vilnius":{1217582569:180,1224984169:120,1238289769:180,1256433769:120,1269739369:180,1288488169:120,1301188969:180,1319937769:120,1332638569:180,1351387369:120,1364692969:180,1382836969:120,1396142569:180,1414286569:120,1427592169:180,1445736169:120,1459041769:180,1477790569:120,1490491369:180,1509240169:120,1521940969:180},
"Europe/Volgograd":{1217582570:240,1224976970:180,1238282570:240,1256426570:180,1269732170:240,1288480970:180,1301181770:240,1319930570:180,1332631370:240,1351380170:180,1364685770:240,1382829770:180,1396135370:240,1414279370:180,1427584970:240,1445728970:180,1459034570:240,1477783370:180,1490484170:240,1509232970:180,1521933770:240},
"Europe/Warsaw":{1217582570:120,1224984170:60,1238289770:120,1256433770:60,1269739370:120,1288488170:60,1301188970:120,1319937770:60,1332638570:120,1351387370:60,1364692970:120,1382836970:60,1396142570:120,1414286570:60,1427592170:120,1445736170:60,1459041770:120,1477790570:60,1490491370:120,1509240170:60,1521940970:120},
"Europe/Zagreb":{1217582571:120,1224984171:60,1238289771:120,1256433771:60,1269739371:120,1288488171:60,1301188971:120,1319937771:60,1332638571:120,1351387371:60,1364692971:120,1382836971:60,1396142571:120,1414286571:60,1427592171:120,1445736171:60,1459041771:120,1477790571:60,1490491371:120,1509240171:60,1521940971:120},
"Europe/Zaporozhye":{1217582572:180,1224984172:120,1238289772:180,1256433772:120,1269739372:180,1288488172:120,1301188972:180,1319937772:120,1332638572:180,1351387372:120,1364692972:180,1382836972:120,1396142572:180,1414286572:120,1427592172:180,1445736172:120,1459041772:180,1477790572:120,1490491372:180,1509240172:120,1521940972:180},
"Europe/Zurich":{1217582573:120,1224984173:60,1238289773:120,1256433773:60,1269739373:120,1288488173:60,1301188973:120,1319937773:60,1332638573:120,1351387373:60,1364692973:120,1382836973:60,1396142573:120,1414286573:60,1427592173:120,1445736173:60,1459041773:120,1477790573:60,1490491373:120,1509240173:60,1521940973:120},
"GMT":{1217582573:0},
"Indian Ocean/Antananarivo":{1217582574:180},
"Indian Ocean/Chagos":{1217582574:360},
"Indian Ocean/Christmas":{1217582575:420},
"Indian Ocean/Cocos":{1217582575:390},
"Indian Ocean/Comoro":{1217582576:180},
"Indian Ocean/Kerguelen":{1217582576:300},
"Indian Ocean/Mahe":{1217582577:240},
"Indian Ocean/Maldives":{1217582578:300},
"Indian Ocean/Mauritius":{1217582578:240},
"Indian Ocean/Mayotte":{1217582579:180},
"Indian Ocean/Reunion":{1217582580:240},
"Mexico/BajaNorte":{1217582580:-420,1225012980:-480,1238926980:-420,1256462580:-480,1270376580:-420,1288516980:-480,1301826180:-420,1319966580:-480,1333275780:-420,1351416180:-480,1365330180:-420,1382865780:-480,1396779780:-420,1414315380:-480,1428229380:-420,1445764980:-480,1459678980:-420,1477819380:-480,1491128580:-420,1509268980:-480,1522578180:-420},
"Mexico/BajaSur":{1217582581:-360,1225009381:-420,1238923381:-360,1256458981:-420,1270372981:-360,1288513381:-420,1301822581:-360,1319962981:-420,1333272181:-360,1351412581:-420,1365326581:-360,1382862181:-420,1396776181:-360,1414311781:-420,1428225781:-360,1445761381:-420,1459675381:-360,1477815781:-420,1491124981:-360,1509265381:-420,1522574581:-360},
"Mexico/General":{1217582582:-300,1225005782:-360,1238919782:-300,1256455382:-360,1270369382:-300,1288509782:-360,1301818982:-300,1319959382:-360,1333268582:-300,1351408982:-360,1365322982:-300,1382858582:-360,1396772582:-300,1414308182:-360,1428222182:-300,1445757782:-360,1459671782:-300,1477812182:-360,1491121382:-300,1509261782:-360,1522570982:-300},
"Pacific/Apia":{1217582582:-660},
"Pacific/Auckland":{1217582583:720,1222525383:780,1238854983:720,1253974983:780,1270304583:720,1285424583:780,1301754183:720,1316874183:780,1333203783:720,1348928583:780,1365258183:720,1380378183:780,1396707783:720,1411827783:780,1428157383:720,1443277383:780,1459606983:720,1474726983:780,1491056583:720,1506176583:780,1522506183:720},
"Pacific/Chatham":{1217582584:765,1222525384:825,1238854984:765,1253974984:825,1270304584:765,1285424584:825,1301754184:765,1316874184:825,1333203784:765,1348928584:825,1365258184:765,1380378184:825,1396707784:765,1411827784:825,1428157384:765,1443277384:825,1459606984:765,1474726984:825,1491056584:765,1506176584:825,1522506184:765},
"Pacific/Easter":{1217582585:-360,1223785385:-300,1237087385:-360,1255234985:-300,1268536985:-360,1286684585:-300,1299986585:-360,1318134185:-300,1331436185:-360,1350188585:-300,1362885785:-360,1381638185:-300,1394335385:-360,1413087785:-300,1426389785:-360,1444537385:-300,1457839385:-360,1475986985:-300,1489288985:-360,1508041385:-300,1520738585:-360},
"Pacific/Efate":{1217582585:660},
"Pacific/Enderbury":{1217582586:780},
"Pacific/Fakaofo":{1217582587:-600},
"Pacific/Fiji":{1217582587:720},
"Pacific/Funafuti":{1217582588:720},
"Pacific/Galapagos":{1217582588:-360},
"Pacific/Gambier":{1217582589:-540},
"Pacific/Guadalcanal":{1217582589:660},
"Pacific/Guam":{1217582590:600},
"Pacific/Honolulu":{1217582591:-600},
"Pacific/Johnston":{1217582591:-600},
"Pacific/Kiritimati":{1217582592:840},
"Pacific/Kosrae":{1217582592:660},
"Pacific/Kwajalein":{1217582593:720},
"Pacific/Majuro":{1217582594:720},
"Pacific/Marquesas":{1217582594:-570},
"Pacific/Midway":{1217582595:-660},
"Pacific/Nauru":{1217582596:720},
"Pacific/Niue":{1217582597:-660},
"Pacific/Norfolk":{1217582597:690},
"Pacific/Noumea":{1217582598:660},
"Pacific/Pago Pago":{1217582599:-660},
"Pacific/Palau":{1217582599:540},
"Pacific/Pitcairn":{1217582600:-480},
"Pacific/Ponape":{1217582600:660},
"Pacific/Port Moresby":{1217582601:600},
"Pacific/Rarotonga":{1217582601:-600},
"Pacific/Saipan":{1217582602:600},
"Pacific/Samoa":{1217582603:-660},
"Pacific/Tahiti":{1217582603:-600},
"Pacific/Tarawa":{1217582604:720},
"Pacific/Tongatapu":{1217582604:780},
"Pacific/Truk":{1217582605:600},
"Pacific/Wake":{1217582605:720},
"Pacific/Wallis":{1217582606:720},
"Pacific/Yap":{1217582606:600},
"UTC":{1217582607:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: encoding=utf-8 nospell ts=2 et

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o)',
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2008, Preston Hunt'
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre' // TODO
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om'
},


// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2008, Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  var background = document.getElementById('imgBackground');
  background.src = 'images/background-black.png';

  gDate = background.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = background.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = background.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  return;
/*
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  dateArea.innerHTML = sunrise + " " + sunset;
*/
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = '';
      // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = formatDate( G.mainTimeFormat, now );

  //if ( G.swaplabels ) {
    //var temp = gDate.value;
    //gDate.value = gLabel.value;
    //gLabel.value = temp;
  //}

  //updateFonts();
  adjustTimeToFit();
  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function adjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;

  //if ( window.timeArea.className == 'bigTime' ) return 67;
  //if ( window.timeArea.className == 'smallTime' ) return 33;
  //return 44; // was 45
}


var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}


function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }

//		var tzName = document.getElementById('tzName').value;
//    var tzOffsets = tzdata2007k[ tzName ];
//		System.Gadget.Settings.write( 'tzOffsets', tzOffsets );
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}


/*
function oldgetSystemFontsList() {
  // http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1959226&SiteID=1
  var HKLM = 2147483650;
  var rPath = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\\";
  var rValue;

  // connect to the registry
  var oSwbem = new ActiveXObject("WbemScripting.SwbemLocator");
  var oSvc = oSwbem.ConnectServer(null, "root\\default");
  var oReg = oSvc.Get("StdRegProv");

  // enumerate the values 
  var oMethod = oReg.Methods_.Item("EnumValues");
  var oInParam = oMethod.InParameters.SpawnInstance_();
  oInParam.hDefKey = HKLM;
  oInParam.sSubKeyName = rPath;
  var oOutParam = oReg.ExecMethod_(oMethod.Name, oInParam);

  // get the values into an array
  var sNames = oOutParam.sNames.toArray();

  return sNames;

//  for (var i = 0; i < sNames.length; i++) {
//    document.write( sNames[i] );
//   // font names are in sNames[i]
//  }
}
*/

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}
