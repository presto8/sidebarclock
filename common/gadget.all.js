// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//  - levon ghazaryan. pointing out an error in z switch.
//  - Andy Pemberton. pointing out error in c switch 
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11 ? L.pm : L.am;
            //return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.H() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();
            var t = new Date(s);
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
			return this.z() + 1;
			/*
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
			*/
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1258052400:0},
"Africa/Accra":{1258052400:0},
"Africa/Addis Ababa":{1258052400:180},
"Africa/Algiers":{1258052400:60},
"Africa/Asmara":{1258052400:180},
"Africa/Bamako":{1258052400:0},
"Africa/Bangui":{1258052400:60},
"Africa/Banjul":{1258052400:0},
"Africa/Bissau":{1258052400:0},
"Africa/Blantyre":{1258052400:120},
"Africa/Brazzaville":{1258052400:60},
"Africa/Bujumbura":{1258052400:120},
"Africa/Cairo":{1258052400:120,1272578400:180,1285880400:120,1304028000:180,1317330000:120,1335477600:180,1348779600:120,1366927200:180,1380229200:120,1398376800:180,1411678800:120,1429826400:180,1443128400:120,1461880800:180,1475182800:120,1493330400:180,1506632400:120,1524780000:180,1538082000:120,1556229600:180,1569531600:120},
"Africa/Casablanca":{1258052400:0},
"Africa/Ceuta":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Africa/Conakry":{1258052400:0},
"Africa/Dakar":{1258052400:0},
"Africa/Dar es Salaam":{1258052400:180},
"Africa/Djibouti":{1258052400:180},
"Africa/Douala":{1258052400:60},
"Africa/El Aaiun":{1258052400:0},
"Africa/Freetown":{1258052400:0},
"Africa/Gaborone":{1258052400:120},
"Africa/Harare":{1258052400:120},
"Africa/Johannesburg":{1258052400:120},
"Africa/Kampala":{1258052400:180},
"Africa/Khartoum":{1258052400:180},
"Africa/Kigali":{1258052400:120},
"Africa/Kinshasa":{1258052400:60},
"Africa/Lagos":{1258052400:60},
"Africa/Libreville":{1258052400:60},
"Africa/Lome":{1258052400:0},
"Africa/Luanda":{1258052400:60},
"Africa/Lubumbashi":{1258052400:120},
"Africa/Lusaka":{1258052400:120},
"Africa/Malabo":{1258052400:60},
"Africa/Maputo":{1258052400:120},
"Africa/Maseru":{1258052400:120},
"Africa/Mbabane":{1258052400:120},
"Africa/Mogadishu":{1258052400:180},
"Africa/Monrovia":{1258052400:0},
"Africa/Nairobi":{1258052400:180},
"Africa/Ndjamena":{1258052400:60},
"Africa/Niamey":{1258052400:60},
"Africa/Nouakchott":{1258052400:0},
"Africa/Ouagadougou":{1258052400:0},
"Africa/Porto-Novo":{1258052400:60},
"Africa/Sao Tome":{1258052400:0},
"Africa/Tripoli":{1258052400:120},
"Africa/Tunis":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Africa/Windhoek":{1258052400:120,1270339200:60,1283648400:120,1301788800:60,1315098000:120,1333238400:60,1346547600:120,1365292800:60,1377997200:120,1396742400:60,1410051600:120,1428192000:60,1441501200:120,1459641600:60,1472950800:120,1491091200:60,1504400400:120,1522540800:60,1535850000:120,1554595200:60,1567299600:120},
"America/Adak":{1258052400:-600,1268568000:-540,1289127600:-600,1300017600:-540,1320577200:-600,1331467200:-540,1352026800:-600,1362916800:-540,1383476400:-600,1394366400:-540,1414926000:-600,1425816000:-540,1446375600:-600,1457870400:-540,1478430000:-600,1489320000:-540,1509879600:-600,1520769600:-540,1541329200:-600,1552219200:-540,1572778800:-600},
"America/Anchorage":{1258052400:-540,1268564400:-480,1289124000:-540,1300014000:-480,1320573600:-540,1331463600:-480,1352023200:-540,1362913200:-480,1383472800:-540,1394362800:-480,1414922400:-540,1425812400:-480,1446372000:-540,1457866800:-480,1478426400:-540,1489316400:-480,1509876000:-540,1520766000:-480,1541325600:-540,1552215600:-480,1572775200:-540},
"America/Anguilla":{1258052400:-240},
"America/Antigua":{1258052400:-240},
"America/Araguaina":{1258052400:-180},
"America/Argentina/Buenos Aires":{1258052400:-180},
"America/Argentina/Catamarca":{1258052400:-180},
"America/Argentina/Cordoba":{1258052400:-180},
"America/Argentina/Jujuy":{1258052400:-180},
"America/Argentina/La Rioja":{1258052400:-180},
"America/Argentina/Mendoza":{1258052400:-180},
"America/Argentina/Rio Gallegos":{1258052400:-180},
"America/Argentina/Salta":{1258052400:-180},
"America/Argentina/San Juan":{1258052400:-180},
"America/Argentina/San Luis":{1258052400:-180,1268535600:-240,1286683200:-180,1299985200:-240,1318132800:-180,1331434800:-240,1350187200:-180,1362884400:-240,1381636800:-180,1394334000:-240,1413086400:-180,1425783600:-240,1444536000:-180,1457838000:-240,1475985600:-180,1489287600:-240,1507435200:-180,1520737200:-240,1539489600:-180,1552186800:-240,1570939200:-180},
"America/Argentina/Tucuman":{1258052400:-180},
"America/Argentina/Ushuaia":{1258052400:-180},
"America/Aruba":{1258052400:-240},
"America/Asuncion":{1258052400:-180,1268535600:-240,1287288000:-180,1299985200:-240,1318737600:-180,1331434800:-240,1350792000:-180,1362884400:-240,1382241600:-180,1394334000:-240,1413691200:-180,1425783600:-240,1445140800:-180,1457838000:-240,1476590400:-180,1489287600:-240,1508040000:-180,1520737200:-240,1540094400:-180,1552186800:-240,1571544000:-180},
"America/Atikokan":{1258052400:-300},
"America/Bahia":{1258052400:-180},
"America/Barbados":{1258052400:-240},
"America/Belem":{1258052400:-180},
"America/Belize":{1258052400:-360},
"America/Blanc-Sablon":{1258052400:-240},
"America/Boa Vista":{1258052400:-240},
"America/Bogota":{1258052400:-300},
"America/Boise":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"America/Cambridge Bay":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"America/Campo Grande":{1258052400:-180,1266721200:-240,1287288000:-180,1298170800:-240,1318737600:-180,1330225200:-240,1350792000:-180,1361070000:-240,1382241600:-180,1392519600:-240,1413691200:-180,1424574000:-240,1445140800:-180,1456023600:-240,1476590400:-180,1487473200:-240,1508040000:-180,1518922800:-240,1540094400:-180,1550372400:-240,1571544000:-180},
"America/Cancun":{1258052400:-360,1270368000:-300,1288508400:-360,1301817600:-300,1319958000:-360,1333267200:-300,1351407600:-360,1365321600:-300,1382857200:-360,1396771200:-300,1414306800:-360,1428220800:-300,1445756400:-360,1459670400:-300,1477810800:-360,1491120000:-300,1509260400:-360,1522569600:-300,1540710000:-360,1554624000:-300,1572159600:-360},
"America/Caracas":{1258052400:-270},
"America/Cayenne":{1258052400:-180},
"America/Cayman":{1258052400:-300},
"America/Chicago":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Chihuahua":{1258052400:-420,1270371600:-360,1288512000:-420,1301821200:-360,1319961600:-420,1333270800:-360,1351411200:-420,1365325200:-360,1382860800:-420,1396774800:-360,1414310400:-420,1428224400:-360,1445760000:-420,1459674000:-360,1477814400:-420,1491123600:-360,1509264000:-420,1522573200:-360,1540713600:-420,1554627600:-360,1572163200:-420},
"America/Costa Rica":{1258052400:-360},
"America/Cuiaba":{1258052400:-180,1266721200:-240,1287288000:-180,1298170800:-240,1318737600:-180,1330225200:-240,1350792000:-180,1361070000:-240,1382241600:-180,1392519600:-240,1413691200:-180,1424574000:-240,1445140800:-180,1456023600:-240,1476590400:-180,1487473200:-240,1508040000:-180,1518922800:-240,1540094400:-180,1550372400:-240,1571544000:-180},
"America/Curacao":{1258052400:-240},
"America/Danmarkshavn":{1258052400:0},
"America/Dawson":{1258052400:-480,1268560800:-420,1289120400:-480,1300010400:-420,1320570000:-480,1331460000:-420,1352019600:-480,1362909600:-420,1383469200:-480,1394359200:-420,1414918800:-480,1425808800:-420,1446368400:-480,1457863200:-420,1478422800:-480,1489312800:-420,1509872400:-480,1520762400:-420,1541322000:-480,1552212000:-420,1572771600:-480},
"America/Dawson Creek":{1258052400:-420},
"America/Denver":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"America/Detroit":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Dominica":{1258052400:-240},
"America/Edmonton":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"America/Eirunepe":{1258052400:-240},
"America/El Salvador":{1258052400:-360},
"America/Fortaleza":{1258052400:-180},
"America/Glace Bay":{1258052400:-240,1268546400:-180,1289106000:-240,1299996000:-180,1320555600:-240,1331445600:-180,1352005200:-240,1362895200:-180,1383454800:-240,1394344800:-180,1414904400:-240,1425794400:-180,1446354000:-240,1457848800:-180,1478408400:-240,1489298400:-180,1509858000:-240,1520748000:-180,1541307600:-240,1552197600:-180,1572757200:-240},
"America/Godthab":{1258052400:-180,1269738000:-120,1288486800:-180,1301187600:-120,1319936400:-180,1332637200:-120,1351386000:-180,1364691600:-120,1382835600:-180,1396141200:-120,1414285200:-180,1427590800:-120,1445734800:-180,1459040400:-120,1477789200:-180,1490490000:-120,1509238800:-180,1521939600:-120,1540688400:-180,1553994000:-120,1572138000:-180},
"America/Goose Bay":{1258052400:-240,1268540100:-180,1289099700:-240,1299989700:-180,1320549300:-240,1331439300:-180,1351998900:-240,1362888900:-180,1383448500:-240,1394338500:-180,1414898100:-240,1425788100:-180,1446347700:-240,1457842500:-180,1478402100:-240,1489292100:-180,1509851700:-240,1520741700:-180,1541301300:-240,1552191300:-180,1572750900:-240},
"America/Grand Turk":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Grenada":{1258052400:-240},
"America/Guadeloupe":{1258052400:-240},
"America/Guatemala":{1258052400:-360},
"America/Guayaquil":{1258052400:-300},
"America/Guyana":{1258052400:-240},
"America/Halifax":{1258052400:-240,1268546400:-180,1289106000:-240,1299996000:-180,1320555600:-240,1331445600:-180,1352005200:-240,1362895200:-180,1383454800:-240,1394344800:-180,1414904400:-240,1425794400:-180,1446354000:-240,1457848800:-180,1478408400:-240,1489298400:-180,1509858000:-240,1520748000:-180,1541307600:-240,1552197600:-180,1572757200:-240},
"America/Havana":{1258052400:-300,1268542800:-240,1288501200:-300,1299992400:-240,1319950800:-300,1331442000:-240,1351400400:-300,1362891600:-240,1382850000:-300,1394341200:-240,1414299600:-300,1425790800:-240,1445749200:-300,1457845200:-240,1477803600:-300,1489294800:-240,1509253200:-300,1520744400:-240,1540702800:-300,1552194000:-240,1572152400:-300},
"America/Hermosillo":{1258052400:-420},
"America/Indiana/Indianapolis":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Indiana/Knox":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Indiana/Marengo":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Indiana/Petersburg":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Indiana/Tell City":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Indiana/Vevay":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Indiana/Vincennes":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Indiana/Winamac":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Inuvik":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"America/Iqaluit":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Jamaica":{1258052400:-300},
"America/Juneau":{1258052400:-540,1268564400:-480,1289124000:-540,1300014000:-480,1320573600:-540,1331463600:-480,1352023200:-540,1362913200:-480,1383472800:-540,1394362800:-480,1414922400:-540,1425812400:-480,1446372000:-540,1457866800:-480,1478426400:-540,1489316400:-480,1509876000:-540,1520766000:-480,1541325600:-540,1552215600:-480,1572775200:-540},
"America/Kentucky/Louisville":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Kentucky/Monticello":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/La Paz":{1258052400:-240},
"America/Lima":{1258052400:-300},
"America/Los Angeles":{1258052400:-480,1268560800:-420,1289120400:-480,1300010400:-420,1320570000:-480,1331460000:-420,1352019600:-480,1362909600:-420,1383469200:-480,1394359200:-420,1414918800:-480,1425808800:-420,1446368400:-480,1457863200:-420,1478422800:-480,1489312800:-420,1509872400:-480,1520762400:-420,1541322000:-480,1552212000:-420,1572771600:-480},
"America/Maceio":{1258052400:-180},
"America/Managua":{1258052400:-360},
"America/Manaus":{1258052400:-240},
"America/Martinique":{1258052400:-240},
"America/Mazatlan":{1258052400:-420,1270371600:-360,1288512000:-420,1301821200:-360,1319961600:-420,1333270800:-360,1351411200:-420,1365325200:-360,1382860800:-420,1396774800:-360,1414310400:-420,1428224400:-360,1445760000:-420,1459674000:-360,1477814400:-420,1491123600:-360,1509264000:-420,1522573200:-360,1540713600:-420,1554627600:-360,1572163200:-420},
"America/Menominee":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Merida":{1258052400:-360,1270368000:-300,1288508400:-360,1301817600:-300,1319958000:-360,1333267200:-300,1351407600:-360,1365321600:-300,1382857200:-360,1396771200:-300,1414306800:-360,1428220800:-300,1445756400:-360,1459670400:-300,1477810800:-360,1491120000:-300,1509260400:-360,1522569600:-300,1540710000:-360,1554624000:-300,1572159600:-360},
"America/Mexico City":{1258052400:-360,1270368000:-300,1288508400:-360,1301817600:-300,1319958000:-360,1333267200:-300,1351407600:-360,1365321600:-300,1382857200:-360,1396771200:-300,1414306800:-360,1428220800:-300,1445756400:-360,1459670400:-300,1477810800:-360,1491120000:-300,1509260400:-360,1522569600:-300,1540710000:-360,1554624000:-300,1572159600:-360},
"America/Miquelon":{1258052400:-180,1268542800:-120,1289102400:-180,1299992400:-120,1320552000:-180,1331442000:-120,1352001600:-180,1362891600:-120,1383451200:-180,1394341200:-120,1414900800:-180,1425790800:-120,1446350400:-180,1457845200:-120,1478404800:-180,1489294800:-120,1509854400:-180,1520744400:-120,1541304000:-180,1552194000:-120,1572753600:-180},
"America/Moncton":{1258052400:-240,1268546400:-180,1289106000:-240,1299996000:-180,1320555600:-240,1331445600:-180,1352005200:-240,1362895200:-180,1383454800:-240,1394344800:-180,1414904400:-240,1425794400:-180,1446354000:-240,1457848800:-180,1478408400:-240,1489298400:-180,1509858000:-240,1520748000:-180,1541307600:-240,1552197600:-180,1572757200:-240},
"America/Monterrey":{1258052400:-360,1270368000:-300,1288508400:-360,1301817600:-300,1319958000:-360,1333267200:-300,1351407600:-360,1365321600:-300,1382857200:-360,1396771200:-300,1414306800:-360,1428220800:-300,1445756400:-360,1459670400:-300,1477810800:-360,1491120000:-300,1509260400:-360,1522569600:-300,1540710000:-360,1554624000:-300,1572159600:-360},
"America/Montevideo":{1258052400:-120,1268539200:-180,1286082000:-120,1299988800:-180,1317531600:-120,1331438400:-180,1349586000:-120,1362888000:-180,1381035600:-120,1394337600:-180,1412485200:-120,1425787200:-180,1443934800:-120,1457841600:-180,1475384400:-120,1489291200:-180,1506834000:-120,1520740800:-180,1538888400:-120,1552190400:-180,1570338000:-120},
"America/Montreal":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Montserrat":{1258052400:-240},
"America/Nassau":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/New York":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Nipigon":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Nome":{1258052400:-540,1268564400:-480,1289124000:-540,1300014000:-480,1320573600:-540,1331463600:-480,1352023200:-540,1362913200:-480,1383472800:-540,1394362800:-480,1414922400:-540,1425812400:-480,1446372000:-540,1457866800:-480,1478426400:-540,1489316400:-480,1509876000:-540,1520766000:-480,1541325600:-540,1552215600:-480,1572775200:-540},
"America/Noronha":{1258052400:-120},
"America/North Dakota/Center":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/North Dakota/New Salem":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Panama":{1258052400:-300},
"America/Pangnirtung":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Paramaribo":{1258052400:-180},
"America/Phoenix":{1258052400:-420},
"America/Port of Spain":{1258052400:-240},
"America/Port-au-Prince":{1258052400:-300},
"America/Porto Velho":{1258052400:-240},
"America/Puerto Rico":{1258052400:-240},
"America/Rainy River":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Rankin Inlet":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Recife":{1258052400:-180},
"America/Regina":{1258052400:-360},
"America/Resolute":{1258052400:-300},
"America/Rio Branco":{1258052400:-240},
"America/Santarem":{1258052400:-180},
"America/Santiago":{1258052400:-180,1268535600:-240,1286683200:-180,1299985200:-240,1318132800:-180,1331434800:-240,1350187200:-180,1362884400:-240,1381636800:-180,1394334000:-240,1413086400:-180,1426388400:-240,1444536000:-180,1457838000:-240,1475985600:-180,1489287600:-240,1508040000:-180,1520737200:-240,1539489600:-180,1552186800:-240,1570939200:-180},
"America/Santo Domingo":{1258052400:-240},
"America/Sao Paulo":{1258052400:-120,1266717600:-180,1287284400:-120,1298167200:-180,1318734000:-120,1330221600:-180,1350788400:-120,1361066400:-180,1382238000:-120,1392516000:-180,1413687600:-120,1424570400:-180,1445137200:-120,1456020000:-180,1476586800:-120,1487469600:-180,1508036400:-120,1518919200:-180,1540090800:-120,1550368800:-180,1571540400:-120},
"America/Scoresbysund":{1258052400:-60,1269738000:0,1288486800:-60,1301187600:0,1319936400:-60,1332637200:0,1351386000:-60,1364691600:0,1382835600:-60,1396141200:0,1414285200:-60,1427590800:0,1445734800:-60,1459040400:0,1477789200:-60,1490490000:0,1509238800:-60,1521939600:0,1540688400:-60,1553994000:0,1572138000:-60},
"America/St Johns":{1258052400:-210,1268538300:-150,1289097900:-210,1299987900:-150,1320547500:-210,1331437500:-150,1351997100:-210,1362887100:-150,1383446700:-210,1394336700:-150,1414896300:-210,1425786300:-150,1446345900:-210,1457840700:-150,1478400300:-210,1489290300:-150,1509849900:-210,1520739900:-150,1541299500:-210,1552189500:-150,1572749100:-210},
"America/St Kitts":{1258052400:-240},
"America/St Lucia":{1258052400:-240},
"America/St Thomas":{1258052400:-240},
"America/St Vincent":{1258052400:-240},
"America/Swift Current":{1258052400:-360},
"America/Tegucigalpa":{1258052400:-360},
"America/Thule":{1258052400:-240,1268546400:-180,1289106000:-240,1299996000:-180,1320555600:-240,1331445600:-180,1352005200:-240,1362895200:-180,1383454800:-240,1394344800:-180,1414904400:-240,1425794400:-180,1446354000:-240,1457848800:-180,1478408400:-240,1489298400:-180,1509858000:-240,1520748000:-180,1541307600:-240,1552197600:-180,1572757200:-240},
"America/Thunder Bay":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Tijuana":{1258052400:-480,1270375200:-420,1288515600:-480,1301824800:-420,1319965200:-480,1333274400:-420,1351414800:-480,1365328800:-420,1382864400:-480,1396778400:-420,1414314000:-480,1428228000:-420,1445763600:-480,1459677600:-420,1477818000:-480,1491127200:-420,1509267600:-480,1522576800:-420,1540717200:-480,1554631200:-420,1572166800:-480},
"America/Toronto":{1258052400:-300,1268550000:-240,1289109600:-300,1299999600:-240,1320559200:-300,1331449200:-240,1352008800:-300,1362898800:-240,1383458400:-300,1394348400:-240,1414908000:-300,1425798000:-240,1446357600:-300,1457852400:-240,1478412000:-300,1489302000:-240,1509861600:-300,1520751600:-240,1541311200:-300,1552201200:-240,1572760800:-300},
"America/Tortola":{1258052400:-240},
"America/Vancouver":{1258052400:-480,1268560800:-420,1289120400:-480,1300010400:-420,1320570000:-480,1331460000:-420,1352019600:-480,1362909600:-420,1383469200:-480,1394359200:-420,1414918800:-480,1425808800:-420,1446368400:-480,1457863200:-420,1478422800:-480,1489312800:-420,1509872400:-480,1520762400:-420,1541322000:-480,1552212000:-420,1572771600:-480},
"America/Whitehorse":{1258052400:-480,1268560800:-420,1289120400:-480,1300010400:-420,1320570000:-480,1331460000:-420,1352019600:-480,1362909600:-420,1383469200:-480,1394359200:-420,1414918800:-480,1425808800:-420,1446368400:-480,1457863200:-420,1478422800:-480,1489312800:-420,1509872400:-480,1520762400:-420,1541322000:-480,1552212000:-420,1572771600:-480},
"America/Winnipeg":{1258052400:-360,1268553600:-300,1289113200:-360,1300003200:-300,1320562800:-360,1331452800:-300,1352012400:-360,1362902400:-300,1383462000:-360,1394352000:-300,1414911600:-360,1425801600:-300,1446361200:-360,1457856000:-300,1478415600:-360,1489305600:-300,1509865200:-360,1520755200:-300,1541314800:-360,1552204800:-300,1572764400:-360},
"America/Yakutat":{1258052400:-540,1268564400:-480,1289124000:-540,1300014000:-480,1320573600:-540,1331463600:-480,1352023200:-540,1362913200:-480,1383472800:-540,1394362800:-480,1414922400:-540,1425812400:-480,1446372000:-540,1457866800:-480,1478426400:-540,1489316400:-480,1509876000:-540,1520766000:-480,1541325600:-540,1552215600:-480,1572775200:-540},
"America/Yellowknife":{1258052400:-420,1268557200:-360,1289116800:-420,1300006800:-360,1320566400:-420,1331456400:-360,1352016000:-420,1362906000:-360,1383465600:-420,1394355600:-360,1414915200:-420,1425805200:-360,1446364800:-420,1457859600:-360,1478419200:-420,1489309200:-360,1509868800:-420,1520758800:-360,1541318400:-420,1552208400:-360,1572768000:-420},
"Antarctica/Casey":{1258052400:660},
"Antarctica/Davis":{1258052400:300},
"Antarctica/DumontDUrville":{1258052400:600},
"Antarctica/Mawson":{1258052400:300},
"Antarctica/McMurdo":{1258052400:780,1270303200:720,1285423200:780,1301752800:720,1316872800:780,1333202400:720,1348927200:780,1365256800:720,1380376800:780,1396706400:720,1411826400:780,1428156000:720,1443276000:780,1459605600:720,1474725600:780,1491055200:720,1506175200:780,1522504800:720,1538229600:780,1554559200:720,1569679200:780},
"Antarctica/Palmer":{1258052400:-180,1268535600:-240,1286683200:-180,1299985200:-240,1318132800:-180,1331434800:-240,1350187200:-180,1362884400:-240,1381636800:-180,1394334000:-240,1413086400:-180,1426388400:-240,1444536000:-180,1457838000:-240,1475985600:-180,1489287600:-240,1508040000:-180,1520737200:-240,1539489600:-180,1552186800:-240,1570939200:-180},
"Antarctica/Rothera":{1258052400:-180},
"Antarctica/Syowa":{1258052400:180},
"Antarctica/Vostok":{1258052400:360},
"Asia/Aden":{1258052400:180},
"Asia/Almaty":{1258052400:360},
"Asia/Amman":{1258052400:120,1269554400:180,1288303200:120,1301608800:180,1319752800:120,1333058400:180,1351202400:120,1364508000:180,1382652000:120,1395957600:180,1414706400:120,1427407200:180,1446156000:120,1459461600:180,1477605600:120,1490911200:180,1509055200:120,1522360800:180,1540504800:120,1553810400:180,1571954400:120},
"Asia/Anadyr":{1258052400:720,1269698400:780,1288447200:720,1301148000:780,1319896800:720,1332597600:780,1351346400:720,1364652000:780,1382796000:720,1396101600:780,1414245600:720,1427551200:780,1445695200:720,1459000800:780,1477749600:720,1490450400:780,1509199200:720,1521900000:780,1540648800:720,1553954400:780,1572098400:720},
"Asia/Aqtau":{1258052400:300},
"Asia/Aqtobe":{1258052400:300},
"Asia/Ashgabat":{1258052400:300},
"Asia/Baghdad":{1258052400:180},
"Asia/Bahrain":{1258052400:180},
"Asia/Baku":{1258052400:240,1269734400:300,1288483200:240,1301184000:300,1319932800:240,1332633600:300,1351382400:240,1364688000:300,1382832000:240,1396137600:300,1414281600:240,1427587200:300,1445731200:240,1459036800:300,1477785600:240,1490486400:300,1509235200:240,1521936000:300,1540684800:240,1553990400:300,1572134400:240},
"Asia/Bangkok":{1258052400:420},
"Asia/Beirut":{1258052400:120,1269727200:180,1288472400:120,1301176800:180,1319922000:120,1332626400:180,1351371600:120,1364680800:180,1382821200:120,1396130400:180,1414270800:120,1427580000:180,1445720400:120,1459029600:180,1477774800:120,1490479200:180,1509224400:120,1521928800:180,1540674000:120,1553983200:180,1572123600:120},
"Asia/Bishkek":{1258052400:360},
"Asia/Brunei":{1258052400:480},
"Asia/Choibalsan":{1258052400:480},
"Asia/Chongqing":{1258052400:480},
"Asia/Colombo":{1258052400:330},
"Asia/Damascus":{1258052400:120,1269554400:180,1288299600:120,1301004000:180,1319749200:120,1333058400:180,1351198800:120,1364508000:180,1382648400:120,1395957600:180,1414702800:120,1427407200:180,1446152400:120,1458856800:180,1477602000:120,1490911200:180,1509051600:120,1522360800:180,1540501200:120,1553810400:180,1571950800:120},
"Asia/Dhaka":{1258052400:420},
"Asia/Dili":{1258052400:540},
"Asia/Dubai":{1258052400:240},
"Asia/Dushanbe":{1258052400:300},
"Asia/Gaza":{1258052400:120,1269554400:180,1283468400:120,1301004000:180,1314918000:120,1333058400:180,1346972400:120,1364508000:180,1378422000:120,1395957600:180,1409871600:120,1427407200:180,1441321200:120,1458856800:180,1472770800:120,1490911200:180,1504220400:120,1522360800:180,1536274800:120,1553810400:180,1567724400:120},
"Asia/Harbin":{1258052400:480},
"Asia/Ho Chi Minh":{1258052400:420},
"Asia/Hong Kong":{1258052400:480},
"Asia/Hovd":{1258052400:420},
"Asia/Irkutsk":{1258052400:480,1269712800:540,1288461600:480,1301162400:540,1319911200:480,1332612000:540,1351360800:480,1364666400:540,1382810400:480,1396116000:540,1414260000:480,1427565600:540,1445709600:480,1459015200:540,1477764000:480,1490464800:540,1509213600:480,1521914400:540,1540663200:480,1553968800:540,1572112800:480},
"Asia/Jakarta":{1258052400:420},
"Asia/Jayapura":{1258052400:540},
"Asia/Jerusalem":{1258052400:120,1269561600:180,1284246000:120,1301616000:180,1317510000:120,1333065600:180,1348354800:120,1364515200:180,1378594800:120,1395964800:180,1411858800:120,1427414400:180,1442703600:120,1459468800:180,1475967600:120,1490918400:180,1506207600:120,1522368000:180,1537052400:120,1553817600:180,1570316400:120},
"Asia/Kabul":{1258052400:270},
"Asia/Kamchatka":{1258052400:720,1269698400:780,1288447200:720,1301148000:780,1319896800:720,1332597600:780,1351346400:720,1364652000:780,1382796000:720,1396101600:780,1414245600:720,1427551200:780,1445695200:720,1459000800:780,1477749600:720,1490450400:780,1509199200:720,1521900000:780,1540648800:720,1553954400:780,1572098400:720},
"Asia/Karachi":{1258052400:300,1271271600:360,1288548000:300,1302807600:360,1320084000:300,1334430000:360,1351706400:300,1365966000:360,1383242400:300,1397502000:360,1414778400:300,1429038000:360,1446314400:300,1460660400:360,1477936800:300,1492196400:360,1509472800:300,1523732400:360,1541008800:300,1555268400:360,1572544800:300},
"Asia/Kashgar":{1258052400:480},
"Asia/Kathmandu":{1258052400:345},
"Asia/Kolkata":{1258052400:330},
"Asia/Krasnoyarsk":{1258052400:420,1269716400:480,1288465200:420,1301166000:480,1319914800:420,1332615600:480,1351364400:420,1364670000:480,1382814000:420,1396119600:480,1414263600:420,1427569200:480,1445713200:420,1459018800:480,1477767600:420,1490468400:480,1509217200:420,1521918000:480,1540666800:420,1553972400:480,1572116400:420},
"Asia/Kuala Lumpur":{1258052400:480},
"Asia/Kuching":{1258052400:480},
"Asia/Kuwait":{1258052400:180},
"Asia/Macau":{1258052400:480},
"Asia/Magadan":{1258052400:660,1269702000:720,1288450800:660,1301151600:720,1319900400:660,1332601200:720,1351350000:660,1364655600:720,1382799600:660,1396105200:720,1414249200:660,1427554800:720,1445698800:660,1459004400:720,1477753200:660,1490454000:720,1509202800:660,1521903600:720,1540652400:660,1553958000:720,1572102000:660},
"Asia/Makassar":{1258052400:480},
"Asia/Manila":{1258052400:480},
"Asia/Muscat":{1258052400:240},
"Asia/New Delhi":{1258052400:330},
"Asia/Nicosia":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Asia/Novokuznetsk":{1258052400:420,1288468800:360,1301169600:420,1319918400:360,1332619200:420,1351368000:360,1364673600:420,1382817600:360,1396123200:420,1414267200:360,1427572800:420,1445716800:360,1459022400:420,1477771200:360,1490472000:420,1509220800:360,1521921600:420,1540670400:360,1553976000:420,1572120000:360},
"Asia/Novosibirsk":{1258052400:360,1269720000:420,1288468800:360,1301169600:420,1319918400:360,1332619200:420,1351368000:360,1364673600:420,1382817600:360,1396123200:420,1414267200:360,1427572800:420,1445716800:360,1459022400:420,1477771200:360,1490472000:420,1509220800:360,1521921600:420,1540670400:360,1553976000:420,1572120000:360},
"Asia/Omsk":{1258052400:360,1269720000:420,1288468800:360,1301169600:420,1319918400:360,1332619200:420,1351368000:360,1364673600:420,1382817600:360,1396123200:420,1414267200:360,1427572800:420,1445716800:360,1459022400:420,1477771200:360,1490472000:420,1509220800:360,1521921600:420,1540670400:360,1553976000:420,1572120000:360},
"Asia/Oral":{1258052400:300},
"Asia/Phnom Penh":{1258052400:420},
"Asia/Pontianak":{1258052400:420},
"Asia/Pyongyang":{1258052400:540},
"Asia/Qatar":{1258052400:180},
"Asia/Qyzylorda":{1258052400:360},
"Asia/Rangoon":{1258052400:390},
"Asia/Riyadh":{1258052400:180},
"Asia/Sakhalin":{1258052400:600,1269705600:660,1288454400:600,1301155200:660,1319904000:600,1332604800:660,1351353600:600,1364659200:660,1382803200:600,1396108800:660,1414252800:600,1427558400:660,1445702400:600,1459008000:660,1477756800:600,1490457600:660,1509206400:600,1521907200:660,1540656000:600,1553961600:660,1572105600:600},
"Asia/Samarkand":{1258052400:300},
"Asia/Seoul":{1258052400:540},
"Asia/Shanghai":{1258052400:480},
"Asia/Singapore":{1258052400:480},
"Asia/Taipei":{1258052400:480},
"Asia/Tashkent":{1258052400:300},
"Asia/Tbilisi":{1258052400:240},
"Asia/Tehran":{1258052400:210,1269203400:270,1285097400:210,1300739400:270,1316633400:210,1332275400:270,1348169400:210,1363897800:270,1379791800:210,1395433800:270,1411327800:210,1426969800:270,1442863800:210,1458505800:270,1474399800:210,1490128200:270,1506022200:210,1521664200:270,1537558200:210,1553200200:270,1569094200:210},
"Asia/Thimphu":{1258052400:360},
"Asia/Tokyo":{1258052400:540},
"Asia/Ulaanbaatar":{1258052400:480},
"Asia/Urumqi":{1258052400:480},
"Asia/Vientiane":{1258052400:420},
"Asia/Vladivostok":{1258052400:600,1269705600:660,1288454400:600,1301155200:660,1319904000:600,1332604800:660,1351353600:600,1364659200:660,1382803200:600,1396108800:660,1414252800:600,1427558400:660,1445702400:600,1459008000:660,1477756800:600,1490457600:660,1509206400:600,1521907200:660,1540656000:600,1553961600:660,1572105600:600},
"Asia/Yakutsk":{1258052400:540,1269709200:600,1288458000:540,1301158800:600,1319907600:540,1332608400:600,1351357200:540,1364662800:600,1382806800:540,1396112400:600,1414256400:540,1427562000:600,1445706000:540,1459011600:600,1477760400:540,1490461200:600,1509210000:540,1521910800:600,1540659600:540,1553965200:600,1572109200:540},
"Asia/Yekaterinburg":{1258052400:300,1269723600:360,1288472400:300,1301173200:360,1319922000:300,1332622800:360,1351371600:300,1364677200:360,1382821200:300,1396126800:360,1414270800:300,1427576400:360,1445720400:300,1459026000:360,1477774800:300,1490475600:360,1509224400:300,1521925200:360,1540674000:300,1553979600:360,1572123600:300},
"Asia/Yerevan":{1258052400:240,1269727200:300,1288476000:240,1301176800:300,1319925600:240,1332626400:300,1351375200:240,1364680800:300,1382824800:240,1396130400:300,1414274400:240,1427580000:300,1445724000:240,1459029600:300,1477778400:240,1490479200:300,1509228000:240,1521928800:300,1540677600:240,1553983200:300,1572127200:240},
"Atlantic/Azores":{1258052400:-60,1269738000:0,1288486800:-60,1301187600:0,1319936400:-60,1332637200:0,1351386000:-60,1364691600:0,1382835600:-60,1396141200:0,1414285200:-60,1427590800:0,1445734800:-60,1459040400:0,1477789200:-60,1490490000:0,1509238800:-60,1521939600:0,1540688400:-60,1553994000:0,1572138000:-60},
"Atlantic/Bermuda":{1258052400:-240,1268546400:-180,1289106000:-240,1299996000:-180,1320555600:-240,1331445600:-180,1352005200:-240,1362895200:-180,1383454800:-240,1394344800:-180,1414904400:-240,1425794400:-180,1446354000:-240,1457848800:-180,1478408400:-240,1489298400:-180,1509858000:-240,1520748000:-180,1541307600:-240,1552197600:-180,1572757200:-240},
"Atlantic/Canary":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Atlantic/Cape Verde":{1258052400:-60},
"Atlantic/Faroe":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Atlantic/Madeira":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Atlantic/Reykjavik":{1258052400:0},
"Atlantic/South Georgia":{1258052400:-120},
"Atlantic/St Helena":{1258052400:0},
"Atlantic/Stanley":{1258052400:-180,1271566800:-240,1283666400:-180,1303016400:-240,1315116000:-180,1334466000:-240,1346565600:-180,1366520400:-240,1378015200:-180,1397970000:-240,1410069600:-180,1429419600:-240,1441519200:-180,1460869200:-240,1472968800:-180,1492318800:-240,1504418400:-180,1523768400:-240,1535868000:-180,1555822800:-240,1567317600:-180},
"Australia/Adelaide":{1258052400:630,1270312200:570,1286037000:630,1301761800:570,1317486600:630,1333211400:570,1349541000:630,1365265800:570,1380990600:630,1396715400:570,1412440200:630,1428165000:570,1443889800:630,1459614600:570,1475339400:630,1491064200:570,1506789000:630,1522513800:570,1538843400:630,1554568200:570,1570293000:630},
"Australia/Brisbane":{1258052400:600},
"Australia/Broken Hill":{1258052400:630,1270312200:570,1286037000:630,1301761800:570,1317486600:630,1333211400:570,1349541000:630,1365265800:570,1380990600:630,1396715400:570,1412440200:630,1428165000:570,1443889800:630,1459614600:570,1475339400:630,1491064200:570,1506789000:630,1522513800:570,1538843400:630,1554568200:570,1570293000:630},
"Australia/Currie":{1258052400:660,1270310400:600,1286035200:660,1301760000:600,1317484800:660,1333209600:600,1349539200:660,1365264000:600,1380988800:660,1396713600:600,1412438400:660,1428163200:600,1443888000:660,1459612800:600,1475337600:660,1491062400:600,1506787200:660,1522512000:600,1538841600:660,1554566400:600,1570291200:660},
"Australia/Darwin":{1258052400:570},
"Australia/Eucla":{1258052400:525},
"Australia/Hobart":{1258052400:660,1270310400:600,1286035200:660,1301760000:600,1317484800:660,1333209600:600,1349539200:660,1365264000:600,1380988800:660,1396713600:600,1412438400:660,1428163200:600,1443888000:660,1459612800:600,1475337600:660,1491062400:600,1506787200:660,1522512000:600,1538841600:660,1554566400:600,1570291200:660},
"Australia/Lindeman":{1258052400:600},
"Australia/Lord Howe":{1258052400:660,1270306800:630,1286033400:660,1301756400:630,1317483000:660,1333206000:630,1349537400:660,1365260400:630,1380987000:660,1396710000:630,1412436600:660,1428159600:630,1443886200:660,1459609200:630,1475335800:660,1491058800:630,1506785400:660,1522508400:630,1538839800:660,1554562800:630,1570289400:660},
"Australia/Melbourne":{1258052400:660,1270310400:600,1286035200:660,1301760000:600,1317484800:660,1333209600:600,1349539200:660,1365264000:600,1380988800:660,1396713600:600,1412438400:660,1428163200:600,1443888000:660,1459612800:600,1475337600:660,1491062400:600,1506787200:660,1522512000:600,1538841600:660,1554566400:600,1570291200:660},
"Australia/Perth":{1258052400:480},
"Australia/Sydney":{1258052400:660,1270310400:600,1286035200:660,1301760000:600,1317484800:660,1333209600:600,1349539200:660,1365264000:600,1380988800:660,1396713600:600,1412438400:660,1428163200:600,1443888000:660,1459612800:600,1475337600:660,1491062400:600,1506787200:660,1522512000:600,1538841600:660,1554566400:600,1570291200:660},
"Europe/Amsterdam":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Andorra":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Athens":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Belgrade":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Berlin":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Brussels":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Bucharest":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Budapest":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Chisinau":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Copenhagen":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Dublin":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Europe/Gibraltar":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Helsinki":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Istanbul":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Kaliningrad":{1258052400:120,1269734400:180,1288483200:120,1301184000:180,1319932800:120,1332633600:180,1351382400:120,1364688000:180,1382832000:120,1396137600:180,1414281600:120,1427587200:180,1445731200:120,1459036800:180,1477785600:120,1490486400:180,1509235200:120,1521936000:180,1540684800:120,1553990400:180,1572134400:120},
"Europe/Kiev":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Lisbon":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Europe/London":{1258052400:0,1269738000:60,1288486800:0,1301187600:60,1319936400:0,1332637200:60,1351386000:0,1364691600:60,1382835600:0,1396141200:60,1414285200:0,1427590800:60,1445734800:0,1459040400:60,1477789200:0,1490490000:60,1509238800:0,1521939600:60,1540688400:0,1553994000:60,1572138000:0},
"Europe/Luxembourg":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Madrid":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Malta":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Minsk":{1258052400:120,1269734400:180,1288483200:120,1301184000:180,1319932800:120,1332633600:180,1351382400:120,1364688000:180,1382832000:120,1396137600:180,1414281600:120,1427587200:180,1445731200:120,1459036800:180,1477785600:120,1490486400:180,1509235200:120,1521936000:180,1540684800:120,1553990400:180,1572134400:120},
"Europe/Monaco":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Moscow":{1258052400:180,1269730800:240,1288479600:180,1301180400:240,1319929200:180,1332630000:240,1351378800:180,1364684400:240,1382828400:180,1396134000:240,1414278000:180,1427583600:240,1445727600:180,1459033200:240,1477782000:180,1490482800:240,1509231600:180,1521932400:240,1540681200:180,1553986800:240,1572130800:180},
"Europe/Oslo":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Paris":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Prague":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Riga":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Rome":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Samara":{1258052400:240,1269727200:300,1288476000:240,1301176800:300,1319925600:240,1332626400:300,1351375200:240,1364680800:300,1382824800:240,1396130400:300,1414274400:240,1427580000:300,1445724000:240,1459029600:300,1477778400:240,1490479200:300,1509228000:240,1521928800:300,1540677600:240,1553983200:300,1572127200:240},
"Europe/Simferopol":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Sofia":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Stockholm":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Tallinn":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Tirane":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Uzhgorod":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Vaduz":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Vienna":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Vilnius":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Volgograd":{1258052400:180,1269730800:240,1288479600:180,1301180400:240,1319929200:180,1332630000:240,1351378800:180,1364684400:240,1382828400:180,1396134000:240,1414278000:180,1427583600:240,1445727600:180,1459033200:240,1477782000:180,1490482800:240,1509231600:180,1521932400:240,1540681200:180,1553986800:240,1572130800:180},
"Europe/Warsaw":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"Europe/Zaporozhye":{1258052400:120,1269738000:180,1288486800:120,1301187600:180,1319936400:120,1332637200:180,1351386000:120,1364691600:180,1382835600:120,1396141200:180,1414285200:120,1427590800:180,1445734800:120,1459040400:180,1477789200:120,1490490000:180,1509238800:120,1521939600:180,1540688400:120,1553994000:180,1572138000:120},
"Europe/Zurich":{1258052400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60,1553994000:120,1572138000:60},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-09":{0:-540},
"GMT-08":{0:-480},
"GMT-07":{0:-420},
"GMT-06":{0:-360},
"GMT-05":{0:-300},
"GMT-04":{0:-240},
"GMT-03":{0:-180},
"GMT-02":{0:-120},
"GMT-01":{0:-60},
"GMT+00":{0:0},
"GMT+01":{0:60},
"GMT+02":{0:120},
"GMT+03":{0:180},
"GMT+04":{0:240},
"GMT+05":{0:300},
"GMT+06":{0:360},
"GMT+07":{0:420},
"GMT+08":{0:480},
"GMT+09":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660},
"GMT+12":{0:720},
"Indian Ocean/Antananarivo":{1258052400:180},
"Indian Ocean/Chagos":{1258052400:360},
"Indian Ocean/Christmas":{1258052400:420},
"Indian Ocean/Cocos":{1258052400:390},
"Indian Ocean/Comoro":{1258052400:180},
"Indian Ocean/Kerguelen":{1258052400:300},
"Indian Ocean/Mahe":{1258052400:240},
"Indian Ocean/Maldives":{1258052400:300},
"Indian Ocean/Mauritius":{1258052400:240},
"Indian Ocean/Mayotte":{1258052400:180},
"Indian Ocean/Reunion":{1258052400:240},
"Pacific/Apia":{1258052400:-600,1269770400:-660},
"Pacific/Auckland":{1258052400:780,1270303200:720,1285423200:780,1301752800:720,1316872800:780,1333202400:720,1348927200:780,1365256800:720,1380376800:780,1396706400:720,1411826400:780,1428156000:720,1443276000:780,1459605600:720,1474725600:780,1491055200:720,1506175200:780,1522504800:720,1538229600:780,1554559200:720,1569679200:780},
"Pacific/Chatham":{1258052400:825,1270303200:765,1285423200:825,1301752800:765,1316872800:825,1333202400:765,1348927200:825,1365256800:765,1380376800:825,1396706400:765,1411826400:825,1428156000:765,1443276000:825,1459605600:765,1474725600:825,1491055200:765,1506175200:825,1522504800:765,1538229600:825,1554559200:765,1569679200:825},
"Pacific/Easter":{1258052400:-300,1268535600:-360,1286683200:-300,1299985200:-360,1318132800:-300,1331434800:-360,1350187200:-300,1362884400:-360,1381636800:-300,1394334000:-360,1413086400:-300,1426388400:-360,1444536000:-300,1457838000:-360,1475985600:-300,1489287600:-360,1508040000:-300,1520737200:-360,1539489600:-300,1552186800:-360,1570939200:-300},
"Pacific/Efate":{1258052400:660},
"Pacific/Enderbury":{1258052400:780},
"Pacific/Fakaofo":{1258052400:-600},
"Pacific/Fiji":{1258052400:720},
"Pacific/Funafuti":{1258052400:720},
"Pacific/Galapagos":{1258052400:-360},
"Pacific/Gambier":{1258052400:-540},
"Pacific/Guadalcanal":{1258052400:660},
"Pacific/Guam":{1258052400:600},
"Pacific/Honolulu":{1258052400:-600},
"Pacific/Johnston":{1258052400:-600},
"Pacific/Kiritimati":{1258052400:840},
"Pacific/Kosrae":{1258052400:660},
"Pacific/Kwajalein":{1258052400:720},
"Pacific/Majuro":{1258052400:720},
"Pacific/Marquesas":{1258052400:-570},
"Pacific/Midway":{1258052400:-660},
"Pacific/Nauru":{1258052400:720},
"Pacific/Niue":{1258052400:-660},
"Pacific/Norfolk":{1258052400:690},
"Pacific/Noumea":{1258052400:660},
"Pacific/Pago Pago":{1258052400:-660},
"Pacific/Palau":{1258052400:540},
"Pacific/Pitcairn":{1258052400:-480},
"Pacific/Ponape":{1258052400:660},
"Pacific/Port Moresby":{1258052400:600},
"Pacific/Rarotonga":{1258052400:-600},
"Pacific/Saipan":{1258052400:600},
"Pacific/Tahiti":{1258052400:-600},
"Pacific/Tarawa":{1258052400:720},
"Pacific/Tongatapu":{1258052400:780},
"Pacific/Truk":{1258052400:600},
"Pacific/Wake":{1258052400:720},
"Pacific/Wallis":{1258052400:720},
"UTC":{1258052400:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
/*
    http://www.JSON.org/json2.js
    2009-09-29

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, strict: false */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (!this.JSON) {
    this.JSON = {};
}

(function () {

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ?
                   this.getUTCFullYear()   + '-' +
                 f(this.getUTCMonth() + 1) + '-' +
                 f(this.getUTCDate())      + 'T' +
                 f(this.getUTCHours())     + ':' +
                 f(this.getUTCMinutes())   + ':' +
                 f(this.getUTCSeconds())   + 'Z' : null;
        };

        String.prototype.toJSON =
        Number.prototype.toJSON =
        Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ?
            '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c :
                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' :
            '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0 ? '[]' :
                    gap ? '[\n' + gap +
                            partial.join(',\n' + gap) + '\n' +
                                mind + ']' :
                          '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0 ? '{}' :
                gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
                        mind + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                     typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/.
test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function' ?
                    walk({'': j}, '') : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
// vim: fileencoding=utf-8 nospell ts=2 et

// All email addresses get stripped from this file before publishing

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  'am':          'am',
  'pm':          'pm',
  // Update these with the correct format for your country
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
  // Don't modify xxVER or xxDATE
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
  // If you want credit for translation, translate "Languagename translation by your name"
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_tab4':            'Background',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "A newer version of Presto's Clock is available. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  // Replace English with the name of your language in your language
  't_languagename':    'English',

  't_backup_settings': "Backup settings",
  't_backup':          "Backup settings to clipboard",
  't_restore':         "Restore settings from clipboard"
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Bulgarian translation by Artyom Ivanov <artyom.ivanov@abv.bg>

"bg": {
  "daysLong":          ["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],
  "daysShort":         ["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],
  "monthsLong":        ["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],
  "monthsShort":       ["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Ное","Дек"],
  "defaultDateFormat": "D M d",
  "defaultTimeFormat": "H:i:s",
  "t_dateformat":      "Формат на датата:",
  "t_timeformat":      "Формат на часа:",
  "t_timezone":        "Часови пояс:",
  "t_localtime":       "Местно време",
  "t_bottomlabel":     "Текст:",
  "t_optional":        "(допълнително)",
  "t_examples":        "Примери:",
  "t_date":            "Дата:",
  "t_time":            "Час:",
  "t_label":           "Текст:",
  "t_dateexamples":    "D M d = Съб Апр 07<br>n/j l = 4/7 Събота",
  "t_timeexamples":    "g:i a = 5:44 pm<br>H:i = 17:44",
  "t_labelexamples":   "София, GMT+2",
  "t_formathelp":      '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a>',
  "t_formathelplong":  '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a> (не се поддържат: T, e, o, u)',
  "t_version":         "Версия xxVER (xxDATE)",
  "t_about":           "За гаджета",
  "t_translateby":     "Превод на български ArTy  &copy;",
  "t_language":        "Език:",
  "t_charity":         'Presto\'s Clock това е Charityware. Ако приложението Ви е харесало, моля направете дарение за да подпомогнете нуждаещите се по света. Повече <a href="http://prestonhunt.com/story/110">информация за да направите дарение</a> може да намерите на страницата на проекта.',
  "t_fontfamily1":     "Шрифт:",
  "t_fontfamily2":     "Шрифт:",
  "t_fontfamily3":     "Шрифт:",
  "t_fontsize1":       "Размер на шрифта:",
  "t_fontsize2":       "Размер на шрифта:",
  "t_fontsize3":       "Размер на шрифта:",
  "t_fontcolor1":      "Цвят на шрифта:",
  "t_fontcolor2":      "Цвят на шрифта:",
  "t_fontcolor3":      "Цвят на шрифта:",
  "t_date2":           "Дата",
  "t_time2":           "Час",
  "t_label2":          "Текст",
  "t_swap_labels":     "Размени местата на датата и текста",
  "t_tab1":            "Настройки",
  "t_tab2":            "Външност",
  "t_tab3":            "За програмата",
  "t_copyright":       "Copyright 2009 Preston Hunt",
  "t_languagename":    "Български"
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Domenica", "Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto\'s Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'Einstellungen',
  't_tab2':            'Darstellung',
  't_tab3':            'Über',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Portuguese translation by Mateus Scherer Cardoso <matschcar@terra.com.br>
pt: {
  daysLong:      ["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"],
  daysShort:      ["dom","seg","ter","qua","qui","sex","sáb"],
  monthsLong:     ["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],
  monthsShort:    ["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],
  defaultDateFormat:    "D M d",
  defaultTimeFormat:    "h:i a",
  t_dateformat:         "Formato da data:",
  t_timeformat:         "Formato do horário:",
  t_timezone:           "Fuso horário:",
  t_localtime:          "Horário local",
  t_bottomlabel:        "Linha inferior:",
  t_optional:           "(opcional)",
  t_examples:           "Exemplos:",
  t_date:               "Data:",
  t_time:               "Horário:",
  t_label:              "Linha:",
  t_dateexamples:       "D M d = Sáb Abr 07<br>n/j l = 4/7 Sábado",
  t_timeexamples:       "g:i a = 5:44 pm<br>H:i = 17:44",
  t_labelexamples:      "Portland, Tokyo, GMT+2",
  t_formathelp:         '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a>',
  t_formathelplong:     '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a> (não suportado: T, e, o, u)',
  t_version:            "Versão xxVER (xxDATE)",
  t_about:              "Sobre este gadget",
  t_translateby:        "",
  t_language:           "Idioma:",
  t_charity:            'Presto\'s Clock é Charityware. Se você gostar, por favor considere uma doação para o menos afortunado do mundo. Veja a página do projeto para <a href="http://prestonhunt.com/story/110">informações de como doar</a>.',
  t_fontfamily1:        "Fonte:",
  t_fontfamily2:        "Fonte:",
  t_fontfamily3:        "Fonte:",
  t_fontsize1:          "Tamanho da fonte:",
  t_fontsize2:          "Tamanho da fonte:",
  t_fontsize3:          "Tamanho da fonte:",
  t_fontcolor1:         "Cor da fonte:",
  t_fontcolor2:         "Cor da fonte:",
  t_fontcolor3:         "Cor da fonte:",
  t_date2:              "Data",
  t_time2:              "Horário",
  t_label2:             "Linha",
  t_swap_labels:        "Trocar a data com a linha inferior",
  t_tab1:               "Geral",
  t_tab2:               "Aparência",
  t_tab3:               "Sobre",
  t_copyright:          "Copyright 2009 Preston Hunt",
  t_update:             'Uma nova versão do Presto\'s Clock está disponível. <a href="http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51">Atualize agora!</a>',
  t_languagename:       "Português"
},


// Преведено на македонски од Виктор Манчев <viktor.mancev@gmail.com>
'mk': {
	'daysLong':    ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"],
	'daysShort':   ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"],
	'monthsLong':  ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"],
	'monthsShort': ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Изглед на датумот:',
	't_timeformat':     'Изглед на часовникот:',
	't_timezone':       'Временска зона:',
	't_localtime':      'Локално време',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнително)',
	't_examples':       'Примери:',
	't_date':           'Датум:',
	't_time':           'Време:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Саб 07 Апр<br>n/j l = 4/7 Сабота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Скопје, UTC+1',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a> (не се поддржани: T, e, o, u)',
	't_version':        'Верзија xxVER (xxDATE)',
	't_about':          'За овој gadget',
	't_translateby':    'Преведено на македонски од Виктор Манчев',
	't_language':       'Јазик:',
	't_charity':        "Presto's Clock претставува Charityware. Ако ви се допаѓа и често го користите, ве молам размислете да донирате на помалку среќните. Посетете ја веб-страницата на проектов <a href=\"http://prestonhunt.com/story/110\">за повеќе информации</a>.",
	't_fontfamily1':     'Фонт:',
	't_fontfamily2':     'Фонт:',
	't_fontfamily3':     'Фонт:',
	't_fontsize1':       'Големина на фонтот:',
	't_fontsize2':       'Големина на фонтот:',
	't_fontsize3':       'Големина на фонтот:',
	't_fontcolor1':      'Боја на фонтот:',
	't_fontcolor2':      'Боја на фонтот:',
	't_fontcolor3':      'Боја на фонтот:',
//	't_background':  		'Позадина',
	't_date2': 				 	 'Датум',
	't_time2': 				 	 'Време',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Промени ги местата на датумот и текстот',
  't_tab1':            'Општо', 
  't_tab2':            'Изглеd',
  't_tab3':            'Информации',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "Достапна е понова верзија од Presto's Clock. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Превземете ја!</a>",
  't_languagename':    'Mакедонски'
},

// Afrikaans translation by Constant Van Wyk <constant.vanwyk@xtremekiwi.com>
'af': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
	'daysShort':   ["Son", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
	'monthsLong':  ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  // Update these with the correct format for your country
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Datum formaat:',
	't_timeformat':     'Tyd formaat:',
	't_timezone':       'Tyd zone:',
	't_localtime':      'Plaaslike tyd',
	't_bottomlabel':    'Onderste etiket:',
	't_optional':       '(Optioneel)',
	't_examples':       'Voorbeeld:',
	't_date':           'Datum:',
	't_time':           'Tyd:',
	't_label':          'Etiket:',
	't_dateexamples':   'D M d = Sa Apr 07<br>n/j l = 4/7 Saterdag',
	't_timeexamples':   'g:i a = 5:44 nm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
	't_version':        'Veergawe xxVER (xxDATE)',
	't_about':          'Inligitng oor gadget',
	't_translateby':    '',
	't_language':       'Taal:',
	't_charity':        "Presto's Clock is Liefdadigheids waare. As jy ddar van hou, stuur asseblief `n donasie aan die minder bevoregtes. Verwys asseblief na die project blad <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Karaktertipe:',
	't_fontfamily2':     'Karaktertipe:',
	't_fontfamily3':     'Karaktertipe:',
	't_fontsize1':       'Karaktertipe grootte:',
	't_fontsize2':       'Karaktertipe grootte:',
	't_fontsize3':       'Karaktertipe grootte:',
	't_fontcolor1':      'Karaktertipe kleur:',
	't_fontcolor2':      'Karaktertipe kleur:',
	't_fontcolor3':      'Karaktertipe kleur:',
//	't_background':  		'Agtergrond prentjie',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tyd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Ruil die datum and onderste etiket om',
  't_tab1':            'Algemeen', 
  't_tab2':            'Voorkoms',
  't_tab3':            'Inligting',
  't_copyright':       'Kopiereg 2009 - Preston Hunt',
  't_update':          "1n Nuwer weergawe van die Presto's Clock is hier beskikbaar. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  't_languagename':    'Afrikaans'
},

// Lithuanian translation by Gintaras Pavilionis <fongintas@gmail.com>
'lt': {
	'daysLong':    ["Sekmadienis", "Pirmadienis", "Antradienis", "Trečiadienis", "Ketvirtadienis", "Penktadienis", "Šeštadienis"],
	'daysShort':   ["S", "Pr", "A", "T", "K", "Pn", "Š"],
	'monthsLong':  ["Sausio", "Vasario", "Kovo", "Balandžio", "Gegužės", "Birželio", "Liepos", "Rugpjūčio", "Rugsėjo", "Spalio", "Lapkričio", "Gruodžio"],
	'monthsShort': ["Sau", "Vas", "Kov", "Bal", "Geg", "Birž", "Lie", "Rugpj", "Rugs", "Spa", "Lapkr", "Gruo"],
	'defaultDateFormat': "Y F d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Datos formatas:',
	't_timeformat':     'Laiko formatas:',
	't_timezone':       'Laiko juosta:',
	't_localtime':      'Vietos laikas',
	't_bottomlabel':    'Tekstas:',
	't_optional':       '(papildomai)',
	't_examples':       'Pavyzdžiai:',
	't_date':           'Data:',
	't_time':           'Laikas:',
	't_label':          'Tekstas:',
	't_dateexamples':   'Y F d = 2009 Lapkričio 24<br>y n/j l = 09 11/24 Antradienis',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Vilnius, Ryga, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Formato pagalba</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Formato pagalba</a> (nepalaikoma: T, e, o, u)',
  // Don't modify xxVER or xxDATE
	't_version':        'Versija xxVER (xxDATE)',
	't_about':          'Apie',
	't_translateby':    'Išvertė į lietuvių kalbą Gintaras Pavilionis',
	't_language':       'Kalba:',
	't_charity':        "Presto's Clock yra Charityware (labdaros išlaikoma programa). Jeigu Jums patiko programa ir norėtumėte prisidėti prie jos palaikymo ir tobulinimo, prašome Jus, paaukoti mažiau pasiekusiems šiame pasaulyje. Žiūrėkite projekto puslapyje <a href=\"http://prestonhunt.com/story/110\">informacija kaip paaukoti</a>.",
	't_fontfamily1':     'Šriftas:',
	't_fontfamily2':     'Šriftas:',
	't_fontfamily3':     'Šriftas:',
	't_fontsize1':       'Šrifto dydis:',
	't_fontsize2':       'Šrifto dydis:',
	't_fontsize3':       'Šrifto dydis:',
	't_fontcolor1':      'Šrifto spalva:',
	't_fontcolor2':      'Šrifto spalva:',
	't_fontcolor3':      'Šrifto spalva:',
//	't_background':  		'Fonas',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Laikas',
	't_label2': 			 	 'Tekstas',
	't_swap_labels':     'Sukeisti vietomis datą su tekstu',
  't_tab1':            'Bendri', 
  't_tab2':            'Nustatymai',
  't_tab3':            'Apie programą',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "Galima naujesnė Presto's Clock versija. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Atnaujinti!</a>",
  // Replace English with the name of your language in your language
  't_languagename':    'Lietuvių'
},

// Slovenian translation by Janez Pobezin <janez76@gmail.com>
'sl': {
  // Do not change the order of the days or months!
  'daysLong':    ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"],
  'daysShort':   ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"],
  'monthsLong':  ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
  'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
  // Update these with the correct format for your country
  'defaultDateFormat': "D d M",
  'defaultTimeFormat': "H:i",

  't_dateformat':     'Oblika datuma:',
  't_timeformat':     'Oblika časa:',
  't_timezone':       'Časovna cona:',
  't_localtime':      'Krajevni čas',
  't_bottomlabel':    'Napis spodaj:',
  't_optional':       '(možnost)',
  't_examples':       'Primer:',
  't_date':           'Datum:',
  't_time':           'Čas:',
  't_label':          'Naslov:',
  't_dateexamples':   'D M d = Sob Apr 07<br>n/j l = 4/7 Sobota',
  't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
  't_labelexamples':  'Portland, Tokyo, GMT+2',
  't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
  't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Pomoč</a> (ne podpira: T, e, o, u)',
  // Don't modify xxVER or xxDATE
  't_version':        'Različica xxVER (xxDATE)',
  't_about':          'O programu',
  // If you want credit for translation, translate "V slovenščino prevedel Janez Pobežin"
  't_translateby':    'V slovenščino prevedel Janez Pobežin',
  't_language':       'Jezik:',
  't_charity':        "Presto's Clock je zasnovan na prostovoljnih prispevkih. Če vam je program všeč, vas prosimo, da razmislite o donaciji. Obiščite projektno stran za <a href=\"http://prestonhunt.com/story/110\">informacije kako lahko donirate</a>.",
  't_fontfamily1':     'Pisava:',
  't_fontfamily2':     'Pisava:',
  't_fontfamily3':     'Pisava:',
  't_fontsize1':       'Velikost pisave:',
  't_fontsize2':       'Velikost pisave:',
  't_fontsize3':       'Velikost pisave:',
  't_fontcolor1':      'Barva pisave:',
  't_fontcolor2':      'Barva pisave:',
  't_fontcolor3':      'Barva pisave:',
//  't_background':     'Slika za ozadje',
  't_date2':           'Datum',
  't_time2':           'Ura',
  't_label2':          'Naslov',
  't_swap_labels':     'Zamenjaj datum in spodnjo oznako oz. napis',
  't_tab1':            'Osnovno', 
  't_tab2':            'Izgled',
  't_tab3':            'O programu',
  't_copyright':       'Avtorske pravice 2009 Preston Hunt',
  't_update':          "Novejša različica programa Presto's Clock je dosegljiva. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  't_languagename':    'Slovenščina'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
},

'zh': {
  // Do not change the order of the days or months!
  'daysLong':    ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
  'daysShort':   ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
  'monthsLong':  ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  'monthsShort': ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  //'am':          '上午',
  //'pm':          '下午',
  // Update these with the correct format for your country
  'defaultDateFormat': "n月 j日 D",
  'defaultTimeFormat': "H:i",

  't_dateformat':     '日期格式:',
  't_timeformat':     '时间格式:',
  't_timezone':       '时区:',
  't_localtime':      '本地时间',
  't_bottomlabel':    '下标:',
  't_optional':       '(可选)',
  't_examples':       '样例:',
  't_date':           '日期:',
  't_time':           '时间:',
  't_label':          '标识:',
  't_dateexamples':   'M d D = 4月 7日 星期日',
  't_timeexamples':   'g:i a = 5:44 下午<br>H:i = 17:44',
  't_labelexamples':  '北京,重庆,香港 GMT+8',
  't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">格式信息</a>',
  't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">格式信息</a> (不支持: T, e, o, u)',
  // Don't modify xxVER or xxDATE
  't_version':        '版本 xxVER (xxDATE)',
  't_about':          '关于这个小玩意',
  // If you want credit for translation, translate "Languagename translation by your name"
  't_translateby':    '中文翻译 Knight Lin',
  't_language':       '语言:',
  't_charity':        "Presto's Clock 是一个慈善软件,如果你喜欢,请考虑为需要幸福的世界捐出您的一份心意. 请参照项目页面 <a href=\"http://prestonhunt.com/story/110\">关于如何捐赠</a>.",
  't_fontfamily1':     '字体:',
  't_fontfamily2':     '字体:',
  't_fontfamily3':     '字体:',
  't_fontsize1':       '字体大小:',
  't_fontsize2':       '字体大小:',
  't_fontsize3':       '字体大小:',
  't_fontcolor1':      '字体颜色:',
  't_fontcolor2':      '字体颜色:',
  't_fontcolor3':      '字体颜色:',
//  't_background':     '背景图片',
  't_date2':           '日期',
  't_time2':           '时间',
  't_label2':          '时钟标识',
  't_swap_labels':     '交换日期和时钟标识位置',
  't_tab1':            '常规', 
  't_tab2':            '显示',
  't_tab3':            '关于',
  't_copyright':       '版权 2009 Preston Hunt',
  't_update':          "Presto's Clock 版本更新. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">立即更新!</a>",
  // Replace English with the name of your language in your language
  't_languagename':    '简体中文'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
//  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  settings_registry_to_G();
  setLocale();
}

function set_defaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = after_settings_closed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		set_defaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function after_settings_closed() {
  readSettings();
  updateFonts();

  /* We have to handle a corner case here.  If the time format is
   * changing from not display seconds to display seconds, then the
   * clock won't be updated until the minute changes, which could be up
   * to 59 seconds away.  A quick hack is to simply calculate how many
   * seconds are remaining until the next minute and manually update the
   * clock that many times. 
   */
  var now = new Date();
  var secondsUntilNextMinute = 60 - now.getSeconds();
  var milliseconds_to_wait = 1000 - now.getMilliseconds();
  for ( var i = secondsUntilNextMinute; i >= 0; i-- ) {
    window.setTimeout( displayGadget, i*1000 + milliseconds_to_wait );
  }
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function get_milliseconds_to_wait() {
  /* To reduce power usage, we determine polling frequency based on the
   * time format string.  If seconds are included, then we update every
   * second.  But if no seconds are included, then we only update every
   * minute. */

  var now = new Date();
  var milliseconds_to_wait = 1000 - now.getMilliseconds() + 1;

  if ( G.mainTimeFormat.indexOf('s') >= 0 ) {
    // Time format string includes seconds, need to update quickly
    return milliseconds_to_wait;
  } else {
    // Time format does not include seconds, can delay update until next
    // the next minute.  But we need to make sure that we update after
    // the minute has switched, otherwise we will be out of commission
    // for another whole minute.
    var seconds_to_wait = 60 - now.getSeconds();

    return ( seconds_to_wait * 1000 ) + milliseconds_to_wait;
  }
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout( updateGadget, get_milliseconds_to_wait() );
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0; // force recalculation of width

  gTime.opacity = G.mainTimeFormat ? 100 : 0;
  gTime.value = formatDate( G.mainTimeFormat, now );
  gTime.height = gTime.width = 0; // force recalculation of width

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;
  okToUpdate = true;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

function get_form_value( variablename ) {
  var varEl = document.getElementById( variablename );
  if ( varEl === null ) return "form-element-not-found";

  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  return varVal;
}

function set_form_value( varname, varVal ) {
  var varEl = document.getElementById( varname );
  if ( varEl === null ) return;

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function G_to_form() {
  for ( var key in G ) {
    set_form_value( key, G[key] );
  }
}

function form_to_G() {
  for ( var key in G ) {
    var val = get_form_value( key );
    if ( val !== 'form-element-not-found' ) {
      G[key] = val;
    }
  }
}

function G_to_settings_registry() {
  for ( var key in G ) {
    System.Gadget.Settings.write( key, G[key] );
  }
}

function settings_registry_to_G() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }
}

function create_settings_html_elements() {
  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );
  }
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;

  create_settings_html_elements();

  settings_registry_to_G();
  G_to_form();

  setLocale();
  display_settings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function change_locale( newlocale ) {
  G.locale = newlocale;
  setLocale();
  document.getElementById("mainDateFormat").value = L.defaultDateFormat;
  document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;

  display_settings();
}

function display_settings() {
  setTzOptions();
  localizeText();
  showIfUpdateAvailable();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    form_to_G();
    G_to_settings_registry();
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
    for ( var i=1; i<=3; i++ ) {
        document.getElementById( 'tab'+i ).style.display = 'none';
        document.getElementById( 'tabcontrol'+i ).className = '';
    }

    document.getElementById( 'tab'+tabNum ).style.display = 'block';
    document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}

function getHttpAsText( url ) {
  try {
    var req = new ActiveXObject( "Microsoft.XMLHTTP" );
    req.open( 'GET', url, false );
    req.send();
    if ( req.status == 200 ) {
      return req.responseText;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

function isUpdateAvailable() {
  var newestText = getHttpAsText( 'http://prestonhunt.com/m/2009/prestosidebarclock.version?cacheBuster=' + Math.random() );
  if ( newestText === false ) return false;
  var currentText = 'xxVER';

  var newestVersion = parseFloat( newestText );
  var currentVersion = parseFloat( currentText );

  return newestVersion > currentVersion;
}

function showIfUpdateAvailable() {
  if ( isUpdateAvailable() ) {
    document.getElementById( 't_update' ).style.display = 'block';
  }
}

function saveIniFile() {
  var json_settings = document.getElementById( "json_settings" );

  copy_settings_to_clipboard();
  json_settings.value = "Settings copied to clipboard";
}

function set_backup_status( mesg ) {
  var el = document.getElementById( "t_backup_status" );
  el.innerText = mesg;
}

function loadIniFile() {
  var new_G = paste_settings_from_clipboard();
  if ( ! new_G ) {
    set_backup_status( "Clipboard does not contain valid settings." );
    return;
  }

  G = new_G;
  G_to_form();
  set_backup_status( "Settings loaded from clipboard!" );
}

function copy_settings_to_clipboard() {
  G.settingsVersion = 2;
  form_to_G();
  window.clipboardData.setData( "Text", JSON.stringify( G ) );
  set_backup_status( "Settings copied to clipboard!" );
}

function paste_settings_from_clipboard() {
  try {
    var clip = window.clipboardData.getData( "Text" );
    var new_G = JSON.parse( clip );
  } catch(err) {
    return null;
  }

  if ( new_G.settingsVersion != 2 ) {
    new_G = null;
  }

  return new_G;
}
