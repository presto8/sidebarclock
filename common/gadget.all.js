// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1235239006:0},
"Africa/Accra":{1235239006:0},
"Africa/Addis Ababa":{1235239007:180},
"Africa/Algiers":{1235239008:60},
"Africa/Asmara":{1235239009:180},
"Africa/Bamako":{1235239009:0},
"Africa/Bangui":{1235239010:60},
"Africa/Banjul":{1235239011:0},
"Africa/Bissau":{1235239012:0},
"Africa/Blantyre":{1235239012:120},
"Africa/Brazzaville":{1235239013:60},
"Africa/Bujumbura":{1235239014:120},
"Africa/Cairo":{1235239014:120,1240527414:180,1251410214:120,1272581814:180,1282859814:120,1304031414:180,1314309414:120,1335481014:180,1346363814:120,1366930614:180,1377813414:120,1398380214:180,1409263014:120,1429829814:180,1440712614:120,1461884214:180,1472162214:120,1493333814:180,1504216614:120,1524783414:180,1535666214:120},
"Africa/Casablanca":{1235239015:0},
"Africa/Ceuta":{1235239016:60,1238291816:120,1256435816:60,1269741416:120,1288490216:60,1301191016:120,1319939816:60,1332640616:120,1351389416:60,1364695016:120,1382839016:60,1396144616:120,1414288616:60,1427594216:120,1445738216:60,1459043816:120,1477792616:60,1490493416:120,1509242216:60,1521943016:120,1540691816:60},
"Africa/Conakry":{1235239017:0},
"Africa/Dakar":{1235239017:0},
"Africa/Dar es Salaam":{1235239018:180},
"Africa/Djibouti":{1235239019:180},
"Africa/Douala":{1235239019:60},
"Africa/El Aaiun":{1235239020:0},
"Africa/Freetown":{1235239021:0},
"Africa/Gaborone":{1235239022:120},
"Africa/Harare":{1235239022:120},
"Africa/Johannesburg":{1235239023:120},
"Africa/Kampala":{1235239024:180},
"Africa/Khartoum":{1235239024:180},
"Africa/Kigali":{1235239025:120},
"Africa/Kinshasa":{1235239026:60},
"Africa/Lagos":{1235239026:60},
"Africa/Libreville":{1235239027:60},
"Africa/Lome":{1235239028:0},
"Africa/Luanda":{1235239028:60},
"Africa/Lubumbashi":{1235239029:120},
"Africa/Lusaka":{1235239029:120},
"Africa/Malabo":{1235239030:60},
"Africa/Maputo":{1235239031:120},
"Africa/Maseru":{1235239031:120},
"Africa/Mbabane":{1235239032:120},
"Africa/Mogadishu":{1235239033:180},
"Africa/Monrovia":{1235239034:0},
"Africa/Nairobi":{1235239034:180},
"Africa/Ndjamena":{1235239035:60},
"Africa/Niamey":{1235239036:60},
"Africa/Nouakchott":{1235239037:0},
"Africa/Ouagadougou":{1235239037:0},
"Africa/Porto-Novo":{1235239038:60},
"Africa/Sao Tome":{1235239039:0},
"Africa/Tripoli":{1235239040:120},
"Africa/Tunis":{1235239040:60,1238291840:120,1256435840:60,1269741440:120,1288490240:60,1301191040:120,1319939840:60,1332640640:120,1351389440:60,1364695040:120,1382839040:60,1396144640:120,1414288640:60,1427594240:120,1445738240:60,1459043840:120,1477792640:60,1490493440:120,1509242240:60,1521943040:120,1540691840:60},
"Africa/Windhoek":{1235239041:120,1238893041:60,1252202241:120,1270342641:60,1283651841:120,1301792241:60,1315101441:120,1333241841:60,1346551041:120,1365296241:60,1378000641:120,1396745841:60,1410055041:120,1428195441:60,1441504641:120,1459645041:60,1472954241:120,1491094641:60,1504403841:120,1522544241:60,1535853441:120},
"America/Adak":{1235239042:-600,1236517042:-540,1257076642:-600,1268571442:-540,1289131042:-600,1300021042:-540,1320580642:-600,1331470642:-540,1352030242:-600,1362920242:-540,1383479842:-600,1394369842:-540,1414929442:-600,1425819442:-540,1446379042:-600,1457873842:-540,1478433442:-600,1489323442:-540,1509883042:-600,1520773042:-540,1541332642:-600},
"America/Anchorage":{1235239043:-540,1236513443:-480,1257073043:-540,1268567843:-480,1289127443:-540,1300017443:-480,1320577043:-540,1331467043:-480,1352026643:-540,1362916643:-480,1383476243:-540,1394366243:-480,1414925843:-540,1425815843:-480,1446375443:-540,1457870243:-480,1478429843:-540,1489319843:-480,1509879443:-540,1520769443:-480,1541329043:-540},
"America/Anguilla":{1235239043:-240},
"America/Antigua":{1235239044:-240},
"America/Araguaina":{1235239045:-180},
"America/Argentina/Buenos Aires":{1235239046:-120,1237085846:-180,1255838246:-120,1269140246:-180,1287287846:-120,1300589846:-180,1318737446:-120,1332039446:-180,1350791846:-120,1363489046:-180,1382241446:-120,1394938646:-180,1413691046:-120,1426388246:-180,1445140646:-120,1458442646:-180,1476590246:-120,1489892246:-180,1508039846:-120,1521341846:-180,1540094246:-120},
"America/Argentina/Catamarca":{1235239046:-180},
"America/Argentina/Cordoba":{1235239047:-120,1237085847:-180,1255838247:-120,1269140247:-180,1287287847:-120,1300589847:-180,1318737447:-120,1332039447:-180,1350791847:-120,1363489047:-180,1382241447:-120,1394938647:-180,1413691047:-120,1426388247:-180,1445140647:-120,1458442647:-180,1476590247:-120,1489892247:-180,1508039847:-120,1521341847:-180,1540094247:-120},
"America/Argentina/Jujuy":{1235239048:-180},
"America/Argentina/La Rioja":{1235239049:-180},
"America/Argentina/Mendoza":{1235239050:-180},
"America/Argentina/Rio Gallegos":{1235239050:-180},
"America/Argentina/Salta":{1235239051:-180},
"America/Argentina/San Juan":{1235239052:-180},
"America/Argentina/San Luis":{1235239053:-180},
"America/Argentina/Tucuman":{1235239053:-120,1237085853:-180,1255838253:-120,1269140253:-180,1287287853:-120,1300589853:-180,1318737453:-120,1332039453:-180,1350791853:-120,1363489053:-180,1382241453:-120,1394938653:-180,1413691053:-120,1426388253:-180,1445140653:-120,1458442653:-180,1476590253:-120,1489892253:-180,1508039853:-120,1521341853:-180,1540094253:-120},
"America/Argentina/Ushuaia":{1235239054:-180},
"America/Aruba":{1235239055:-240},
"America/Asuncion":{1235239056:-180,1236484656:-240,1255841856:-180,1268539056:-240,1287291456:-180,1299988656:-240,1318741056:-180,1331438256:-240,1350795456:-180,1362887856:-240,1382245056:-180,1394337456:-240,1413694656:-180,1425787056:-240,1445144256:-180,1457841456:-240,1476593856:-180,1489291056:-240,1508043456:-180,1520740656:-240,1540097856:-180},
"America/Atikokan":{1235239056:-300},
"America/Bahia":{1235239057:-180},
"America/Barbados":{1235239058:-240},
"America/Belem":{1235239059:-180},
"America/Belize":{1235239060:-360},
"America/Blanc-Sablon":{1235239060:-240},
"America/Boa Vista":{1235239061:-240},
"America/Bogota":{1235239062:-300},
"America/Boise":{1235239063:-420,1236506263:-360,1257065863:-420,1268560663:-360,1289120263:-420,1300010263:-360,1320569863:-420,1331459863:-360,1352019463:-420,1362909463:-360,1383469063:-420,1394359063:-360,1414918663:-420,1425808663:-360,1446368263:-420,1457863063:-360,1478422663:-420,1489312663:-360,1509872263:-420,1520762263:-360,1541321863:-420},
"America/Cambridge Bay":{1235239063:-420,1236506263:-360,1257065863:-420,1268560663:-360,1289120263:-420,1300010263:-360,1320569863:-420,1331459863:-360,1352019463:-420,1362909463:-360,1383469063:-420,1394359063:-360,1414918663:-420,1425808663:-360,1446368263:-420,1457863063:-360,1478422663:-420,1489312663:-360,1509872263:-420,1520762263:-360,1541321863:-420},
"America/Campo Grande":{1235239064:-240,1255841864:-180,1266724664:-240,1287291464:-180,1298174264:-240,1318741064:-180,1330228664:-240,1350795464:-180,1361073464:-240,1382245064:-180,1392523064:-240,1413694664:-180,1424577464:-240,1445144264:-180,1456027064:-240,1476593864:-180,1487476664:-240,1508043464:-180,1518926264:-240,1540097864:-180,1550375864:-240},
"America/Cancun":{1235239065:-360,1238921865:-300,1256457465:-360,1270371465:-300,1288511865:-360,1301821065:-300,1319961465:-360,1333270665:-300,1351411065:-360,1365325065:-300,1382860665:-360,1396774665:-300,1414310265:-360,1428224265:-300,1445759865:-360,1459673865:-300,1477814265:-360,1491123465:-300,1509263865:-360,1522573065:-300,1540713465:-360},
"America/Caracas":{1235239066:-270},
"America/Cayenne":{1235239066:-180},
"America/Cayman":{1235239067:-300},
"America/Chicago":{1235239068:-360,1236502668:-300,1257062268:-360,1268557068:-300,1289116668:-360,1300006668:-300,1320566268:-360,1331456268:-300,1352015868:-360,1362905868:-300,1383465468:-360,1394355468:-300,1414915068:-360,1425805068:-300,1446364668:-360,1457859468:-300,1478419068:-360,1489309068:-300,1509868668:-360,1520758668:-300,1541318268:-360},
"America/Chihuahua":{1235239069:-420,1238925469:-360,1256461069:-420,1270375069:-360,1288515469:-420,1301824669:-360,1319965069:-420,1333274269:-360,1351414669:-420,1365328669:-360,1382864269:-420,1396778269:-360,1414313869:-420,1428227869:-360,1445763469:-420,1459677469:-360,1477817869:-420,1491127069:-360,1509267469:-420,1522576669:-360,1540717069:-420},
"America/Costa Rica":{1235239070:-360},
"America/Cuiaba":{1235239071:-240,1255841871:-180,1266724671:-240,1287291471:-180,1298174271:-240,1318741071:-180,1330228671:-240,1350795471:-180,1361073471:-240,1382245071:-180,1392523071:-240,1413694671:-180,1424577471:-240,1445144271:-180,1456027071:-240,1476593871:-180,1487476671:-240,1508043471:-180,1518926271:-240,1540097871:-180,1550375871:-240},
"America/Curacao":{1235239071:-240},
"America/Danmarkshavn":{1235239072:0},
"America/Dawson":{1235239073:-480,1236509873:-420,1257069473:-480,1268564273:-420,1289123873:-480,1300013873:-420,1320573473:-480,1331463473:-420,1352023073:-480,1362913073:-420,1383472673:-480,1394362673:-420,1414922273:-480,1425812273:-420,1446371873:-480,1457866673:-420,1478426273:-480,1489316273:-420,1509875873:-480,1520765873:-420,1541325473:-480},
"America/Dawson Creek":{1235239074:-420},
"America/Denver":{1235239074:-420,1236506274:-360,1257065874:-420,1268560674:-360,1289120274:-420,1300010274:-360,1320569874:-420,1331459874:-360,1352019474:-420,1362909474:-360,1383469074:-420,1394359074:-360,1414918674:-420,1425808674:-360,1446368274:-420,1457863074:-360,1478422674:-420,1489312674:-360,1509872274:-420,1520762274:-360,1541321874:-420},
"America/Detroit":{1235239075:-300,1236499075:-240,1257058675:-300,1268553475:-240,1289113075:-300,1300003075:-240,1320562675:-300,1331452675:-240,1352012275:-300,1362902275:-240,1383461875:-300,1394351875:-240,1414911475:-300,1425801475:-240,1446361075:-300,1457855875:-240,1478415475:-300,1489305475:-240,1509865075:-300,1520755075:-240,1541314675:-300},
"America/Dominica":{1235239076:-240},
"America/Edmonton":{1235239077:-420,1236506277:-360,1257065877:-420,1268560677:-360,1289120277:-420,1300010277:-360,1320569877:-420,1331459877:-360,1352019477:-420,1362909477:-360,1383469077:-420,1394359077:-360,1414918677:-420,1425808677:-360,1446368277:-420,1457863077:-360,1478422677:-420,1489312677:-360,1509872277:-420,1520762277:-360,1541321877:-420},
"America/Eirunepe":{1235239077:-240},
"America/El Salvador":{1235239078:-360},
"America/Fortaleza":{1235239079:-180},
"America/Glace Bay":{1235239080:-240,1236495480:-180,1257055080:-240,1268549880:-180,1289109480:-240,1299999480:-180,1320559080:-240,1331449080:-180,1352008680:-240,1362898680:-180,1383458280:-240,1394348280:-180,1414907880:-240,1425797880:-180,1446357480:-240,1457852280:-180,1478411880:-240,1489301880:-180,1509861480:-240,1520751480:-180,1541311080:-240},
"America/Godthab":{1235239080:-180,1238291880:-120,1256435880:-180,1269741480:-120,1288490280:-180,1301191080:-120,1319939880:-180,1332640680:-120,1351389480:-180,1364695080:-120,1382839080:-180,1396144680:-120,1414288680:-180,1427594280:-120,1445738280:-180,1459043880:-120,1477792680:-180,1490493480:-120,1509242280:-180,1521943080:-120,1540691880:-180},
"America/Goose Bay":{1235239081:-240,1236488281:-180,1257047881:-240,1268542681:-180,1289102281:-240,1299992281:-180,1320551881:-240,1331441881:-180,1352001481:-240,1362891481:-180,1383451081:-240,1394341081:-180,1414900681:-240,1425790681:-180,1446350281:-240,1457845081:-180,1478404681:-240,1489294681:-180,1509854281:-240,1520744281:-180,1541303881:-240},
"America/Grand Turk":{1235239082:-300,1236499082:-240,1257058682:-300,1268553482:-240,1289113082:-300,1300003082:-240,1320562682:-300,1331452682:-240,1352012282:-300,1362902282:-240,1383461882:-300,1394351882:-240,1414911482:-300,1425801482:-240,1446361082:-300,1457855882:-240,1478415482:-300,1489305482:-240,1509865082:-300,1520755082:-240,1541314682:-300},
"America/Grenada":{1235239083:-240},
"America/Guadeloupe":{1235239083:-240},
"America/Guatemala":{1235239084:-360},
"America/Guayaquil":{1235239085:-300},
"America/Guyana":{1235239086:-240},
"America/Halifax":{1235239086:-240,1236495486:-180,1257055086:-240,1268549886:-180,1289109486:-240,1299999486:-180,1320559086:-240,1331449086:-180,1352008686:-240,1362898686:-180,1383458286:-240,1394348286:-180,1414907886:-240,1425797886:-180,1446357486:-240,1457852286:-180,1478411886:-240,1489301886:-180,1509861486:-240,1520751486:-180,1541311086:-240},
"America/Havana":{1235239087:-300,1237096687:-240,1256450287:-300,1269151087:-240,1288504687:-300,1300600687:-240,1319954287:-300,1332050287:-240,1351403887:-300,1363499887:-240,1382853487:-300,1394949487:-240,1414303087:-300,1426399087:-240,1445752687:-300,1458453487:-240,1477807087:-300,1489903087:-240,1509256687:-300,1521352687:-240,1540706287:-300},
"America/Hermosillo":{1235239088:-420},
"America/Indiana/Indianapolis":{1235239089:-300,1236499089:-240,1257058689:-300,1268553489:-240,1289113089:-300,1300003089:-240,1320562689:-300,1331452689:-240,1352012289:-300,1362902289:-240,1383461889:-300,1394351889:-240,1414911489:-300,1425801489:-240,1446361089:-300,1457855889:-240,1478415489:-300,1489305489:-240,1509865089:-300,1520755089:-240,1541314689:-300},
"America/Indiana/Knox":{1235239090:-360,1236502690:-300,1257062290:-360,1268557090:-300,1289116690:-360,1300006690:-300,1320566290:-360,1331456290:-300,1352015890:-360,1362905890:-300,1383465490:-360,1394355490:-300,1414915090:-360,1425805090:-300,1446364690:-360,1457859490:-300,1478419090:-360,1489309090:-300,1509868690:-360,1520758690:-300,1541318290:-360},
"America/Indiana/Marengo":{1235239090:-300,1236499090:-240,1257058690:-300,1268553490:-240,1289113090:-300,1300003090:-240,1320562690:-300,1331452690:-240,1352012290:-300,1362902290:-240,1383461890:-300,1394351890:-240,1414911490:-300,1425801490:-240,1446361090:-300,1457855890:-240,1478415490:-300,1489305490:-240,1509865090:-300,1520755090:-240,1541314690:-300},
"America/Indiana/Petersburg":{1235239091:-300,1236499091:-240,1257058691:-300,1268553491:-240,1289113091:-300,1300003091:-240,1320562691:-300,1331452691:-240,1352012291:-300,1362902291:-240,1383461891:-300,1394351891:-240,1414911491:-300,1425801491:-240,1446361091:-300,1457855891:-240,1478415491:-300,1489305491:-240,1509865091:-300,1520755091:-240,1541314691:-300},
"America/Indiana/Tell City":{1235239092:-360,1236502692:-300,1257062292:-360,1268557092:-300,1289116692:-360,1300006692:-300,1320566292:-360,1331456292:-300,1352015892:-360,1362905892:-300,1383465492:-360,1394355492:-300,1414915092:-360,1425805092:-300,1446364692:-360,1457859492:-300,1478419092:-360,1489309092:-300,1509868692:-360,1520758692:-300,1541318292:-360},
"America/Indiana/Vevay":{1235239093:-300,1236499093:-240,1257058693:-300,1268553493:-240,1289113093:-300,1300003093:-240,1320562693:-300,1331452693:-240,1352012293:-300,1362902293:-240,1383461893:-300,1394351893:-240,1414911493:-300,1425801493:-240,1446361093:-300,1457855893:-240,1478415493:-300,1489305493:-240,1509865093:-300,1520755093:-240,1541314693:-300},
"America/Indiana/Vincennes":{1235239093:-300,1236499093:-240,1257058693:-300,1268553493:-240,1289113093:-300,1300003093:-240,1320562693:-300,1331452693:-240,1352012293:-300,1362902293:-240,1383461893:-300,1394351893:-240,1414911493:-300,1425801493:-240,1446361093:-300,1457855893:-240,1478415493:-300,1489305493:-240,1509865093:-300,1520755093:-240,1541314693:-300},
"America/Indiana/Winamac":{1235239094:-300,1236499094:-240,1257058694:-300,1268553494:-240,1289113094:-300,1300003094:-240,1320562694:-300,1331452694:-240,1352012294:-300,1362902294:-240,1383461894:-300,1394351894:-240,1414911494:-300,1425801494:-240,1446361094:-300,1457855894:-240,1478415494:-300,1489305494:-240,1509865094:-300,1520755094:-240,1541314694:-300},
"America/Inuvik":{1235239095:-420,1236506295:-360,1257065895:-420,1268560695:-360,1289120295:-420,1300010295:-360,1320569895:-420,1331459895:-360,1352019495:-420,1362909495:-360,1383469095:-420,1394359095:-360,1414918695:-420,1425808695:-360,1446368295:-420,1457863095:-360,1478422695:-420,1489312695:-360,1509872295:-420,1520762295:-360,1541321895:-420},
"America/Iqaluit":{1235239096:-300,1236499096:-240,1257058696:-300,1268553496:-240,1289113096:-300,1300003096:-240,1320562696:-300,1331452696:-240,1352012296:-300,1362902296:-240,1383461896:-300,1394351896:-240,1414911496:-300,1425801496:-240,1446361096:-300,1457855896:-240,1478415496:-300,1489305496:-240,1509865096:-300,1520755096:-240,1541314696:-300},
"America/Jamaica":{1235239097:-300},
"America/Juneau":{1235239097:-540,1236513497:-480,1257073097:-540,1268567897:-480,1289127497:-540,1300017497:-480,1320577097:-540,1331467097:-480,1352026697:-540,1362916697:-480,1383476297:-540,1394366297:-480,1414925897:-540,1425815897:-480,1446375497:-540,1457870297:-480,1478429897:-540,1489319897:-480,1509879497:-540,1520769497:-480,1541329097:-540},
"America/Kentucky/Louisville":{1235239098:-300,1236499098:-240,1257058698:-300,1268553498:-240,1289113098:-300,1300003098:-240,1320562698:-300,1331452698:-240,1352012298:-300,1362902298:-240,1383461898:-300,1394351898:-240,1414911498:-300,1425801498:-240,1446361098:-300,1457855898:-240,1478415498:-300,1489305498:-240,1509865098:-300,1520755098:-240,1541314698:-300},
"America/Kentucky/Monticello":{1235239099:-300,1236499099:-240,1257058699:-300,1268553499:-240,1289113099:-300,1300003099:-240,1320562699:-300,1331452699:-240,1352012299:-300,1362902299:-240,1383461899:-300,1394351899:-240,1414911499:-300,1425801499:-240,1446361099:-300,1457855899:-240,1478415499:-300,1489305499:-240,1509865099:-300,1520755099:-240,1541314699:-300},
"America/La Paz":{1235239100:-240},
"America/Lima":{1235239100:-300},
"America/Los Angeles":{1235239101:-480,1236509901:-420,1257069501:-480,1268564301:-420,1289123901:-480,1300013901:-420,1320573501:-480,1331463501:-420,1352023101:-480,1362913101:-420,1383472701:-480,1394362701:-420,1414922301:-480,1425812301:-420,1446371901:-480,1457866701:-420,1478426301:-480,1489316301:-420,1509875901:-480,1520765901:-420,1541325501:-480},
"America/Maceio":{1235239102:-180},
"America/Managua":{1235239103:-360},
"America/Manaus":{1235239104:-240},
"America/Martinique":{1235239104:-240},
"America/Mazatlan":{1235239105:-420,1238925505:-360,1256461105:-420,1270375105:-360,1288515505:-420,1301824705:-360,1319965105:-420,1333274305:-360,1351414705:-420,1365328705:-360,1382864305:-420,1396778305:-360,1414313905:-420,1428227905:-360,1445763505:-420,1459677505:-360,1477817905:-420,1491127105:-360,1509267505:-420,1522576705:-360,1540717105:-420},
"America/Menominee":{1235239106:-360,1236502706:-300,1257062306:-360,1268557106:-300,1289116706:-360,1300006706:-300,1320566306:-360,1331456306:-300,1352015906:-360,1362905906:-300,1383465506:-360,1394355506:-300,1414915106:-360,1425805106:-300,1446364706:-360,1457859506:-300,1478419106:-360,1489309106:-300,1509868706:-360,1520758706:-300,1541318306:-360},
"America/Merida":{1235239107:-360,1238921907:-300,1256457507:-360,1270371507:-300,1288511907:-360,1301821107:-300,1319961507:-360,1333270707:-300,1351411107:-360,1365325107:-300,1382860707:-360,1396774707:-300,1414310307:-360,1428224307:-300,1445759907:-360,1459673907:-300,1477814307:-360,1491123507:-300,1509263907:-360,1522573107:-300,1540713507:-360},
"America/Mexico City":{1235239107:-360,1238921907:-300,1256457507:-360,1270371507:-300,1288511907:-360,1301821107:-300,1319961507:-360,1333270707:-300,1351411107:-360,1365325107:-300,1382860707:-360,1396774707:-300,1414310307:-360,1428224307:-300,1445759907:-360,1459673907:-300,1477814307:-360,1491123507:-300,1509263907:-360,1522573107:-300,1540713507:-360},
"America/Miquelon":{1235239108:-180,1236491908:-120,1257051508:-180,1268546308:-120,1289105908:-180,1299995908:-120,1320555508:-180,1331445508:-120,1352005108:-180,1362895108:-120,1383454708:-180,1394344708:-120,1414904308:-180,1425794308:-120,1446353908:-180,1457848708:-120,1478408308:-180,1489298308:-120,1509857908:-180,1520747908:-120,1541307508:-180},
"America/Moncton":{1235239109:-240,1236495509:-180,1257055109:-240,1268549909:-180,1289109509:-240,1299999509:-180,1320559109:-240,1331449109:-180,1352008709:-240,1362898709:-180,1383458309:-240,1394348309:-180,1414907909:-240,1425797909:-180,1446357509:-240,1457852309:-180,1478411909:-240,1489301909:-180,1509861509:-240,1520751509:-180,1541311109:-240},
"America/Monterrey":{1235239110:-360,1238921910:-300,1256457510:-360,1270371510:-300,1288511910:-360,1301821110:-300,1319961510:-360,1333270710:-300,1351411110:-360,1365325110:-300,1382860710:-360,1396774710:-300,1414310310:-360,1428224310:-300,1445759910:-360,1459673910:-300,1477814310:-360,1491123510:-300,1509263910:-360,1522573110:-300,1540713510:-360},
"America/Montevideo":{1235239111:-120,1236488311:-180,1254635911:-120,1268542711:-180,1286085511:-120,1299992311:-180,1317535111:-120,1331441911:-180,1349589511:-120,1362891511:-180,1381039111:-120,1394341111:-180,1412488711:-120,1425790711:-180,1443938311:-120,1457845111:-180,1475387911:-120,1489294711:-180,1506837511:-120,1520744311:-180,1538891911:-120},
"America/Montreal":{1235239111:-300,1236499111:-240,1257058711:-300,1268553511:-240,1289113111:-300,1300003111:-240,1320562711:-300,1331452711:-240,1352012311:-300,1362902311:-240,1383461911:-300,1394351911:-240,1414911511:-300,1425801511:-240,1446361111:-300,1457855911:-240,1478415511:-300,1489305511:-240,1509865111:-300,1520755111:-240,1541314711:-300},
"America/Montserrat":{1235239112:-240},
"America/Nassau":{1235239113:-300,1236499113:-240,1257058713:-300,1268553513:-240,1289113113:-300,1300003113:-240,1320562713:-300,1331452713:-240,1352012313:-300,1362902313:-240,1383461913:-300,1394351913:-240,1414911513:-300,1425801513:-240,1446361113:-300,1457855913:-240,1478415513:-300,1489305513:-240,1509865113:-300,1520755113:-240,1541314713:-300},
"America/New York":{1235239114:-300,1236499114:-240,1257058714:-300,1268553514:-240,1289113114:-300,1300003114:-240,1320562714:-300,1331452714:-240,1352012314:-300,1362902314:-240,1383461914:-300,1394351914:-240,1414911514:-300,1425801514:-240,1446361114:-300,1457855914:-240,1478415514:-300,1489305514:-240,1509865114:-300,1520755114:-240,1541314714:-300},
"America/Nipigon":{1235239115:-300,1236499115:-240,1257058715:-300,1268553515:-240,1289113115:-300,1300003115:-240,1320562715:-300,1331452715:-240,1352012315:-300,1362902315:-240,1383461915:-300,1394351915:-240,1414911515:-300,1425801515:-240,1446361115:-300,1457855915:-240,1478415515:-300,1489305515:-240,1509865115:-300,1520755115:-240,1541314715:-300},
"America/Nome":{1235239115:-540,1236513515:-480,1257073115:-540,1268567915:-480,1289127515:-540,1300017515:-480,1320577115:-540,1331467115:-480,1352026715:-540,1362916715:-480,1383476315:-540,1394366315:-480,1414925915:-540,1425815915:-480,1446375515:-540,1457870315:-480,1478429915:-540,1489319915:-480,1509879515:-540,1520769515:-480,1541329115:-540},
"America/Noronha":{1235239116:-120},
"America/North Dakota/Center":{1235239117:-360,1236502717:-300,1257062317:-360,1268557117:-300,1289116717:-360,1300006717:-300,1320566317:-360,1331456317:-300,1352015917:-360,1362905917:-300,1383465517:-360,1394355517:-300,1414915117:-360,1425805117:-300,1446364717:-360,1457859517:-300,1478419117:-360,1489309117:-300,1509868717:-360,1520758717:-300,1541318317:-360},
"America/North Dakota/New Salem":{1235239118:-360,1236502718:-300,1257062318:-360,1268557118:-300,1289116718:-360,1300006718:-300,1320566318:-360,1331456318:-300,1352015918:-360,1362905918:-300,1383465518:-360,1394355518:-300,1414915118:-360,1425805118:-300,1446364718:-360,1457859518:-300,1478419118:-360,1489309118:-300,1509868718:-360,1520758718:-300,1541318318:-360},
"America/Panama":{1235239119:-300},
"America/Pangnirtung":{1235239119:-300,1236499119:-240,1257058719:-300,1268553519:-240,1289113119:-300,1300003119:-240,1320562719:-300,1331452719:-240,1352012319:-300,1362902319:-240,1383461919:-300,1394351919:-240,1414911519:-300,1425801519:-240,1446361119:-300,1457855919:-240,1478415519:-300,1489305519:-240,1509865119:-300,1520755119:-240,1541314719:-300},
"America/Paramaribo":{1235239120:-180},
"America/Phoenix":{1235239121:-420},
"America/Port of Spain":{1235239122:-240},
"America/Port-au-Prince":{1235239122:-300},
"America/Porto Velho":{1235239123:-240},
"America/Puerto Rico":{1235239124:-240},
"America/Rainy River":{1235239125:-360,1236502725:-300,1257062325:-360,1268557125:-300,1289116725:-360,1300006725:-300,1320566325:-360,1331456325:-300,1352015925:-360,1362905925:-300,1383465525:-360,1394355525:-300,1414915125:-360,1425805125:-300,1446364725:-360,1457859525:-300,1478419125:-360,1489309125:-300,1509868725:-360,1520758725:-300,1541318325:-360},
"America/Rankin Inlet":{1235239125:-360,1236502725:-300,1257062325:-360,1268557125:-300,1289116725:-360,1300006725:-300,1320566325:-360,1331456325:-300,1352015925:-360,1362905925:-300,1383465525:-360,1394355525:-300,1414915125:-360,1425805125:-300,1446364725:-360,1457859525:-300,1478419125:-360,1489309125:-300,1509868725:-360,1520758725:-300,1541318325:-360},
"America/Recife":{1235239126:-180},
"America/Regina":{1235239127:-360},
"America/Resolute":{1235239128:-300},
"America/Rio Branco":{1235239128:-240},
"America/Santarem":{1235239129:-180},
"America/Santiago":{1235239130:-180,1237089530:-240,1255237130:-180,1268539130:-240,1286686730:-180,1299988730:-240,1318136330:-180,1331438330:-240,1350190730:-180,1362887930:-240,1381640330:-180,1394337530:-240,1413089930:-180,1426391930:-240,1444539530:-180,1457841530:-240,1475989130:-180,1489291130:-240,1508043530:-180,1520740730:-240,1539493130:-180},
"America/Santo Domingo":{1235239131:-240},
"America/Sao Paulo":{1235239131:-180,1255838331:-120,1266721131:-180,1287287931:-120,1298170731:-180,1318737531:-120,1330225131:-180,1350791931:-120,1361069931:-180,1382241531:-120,1392519531:-180,1413691131:-120,1424573931:-180,1445140731:-120,1456023531:-180,1476590331:-120,1487473131:-180,1508039931:-120,1518922731:-180,1540094331:-120,1550372331:-180},
"America/Scoresbysund":{1235239132:-60,1238291932:0,1256435932:-60,1269741532:0,1288490332:-60,1301191132:0,1319939932:-60,1332640732:0,1351389532:-60,1364695132:0,1382839132:-60,1396144732:0,1414288732:-60,1427594332:0,1445738332:-60,1459043932:0,1477792732:-60,1490493532:0,1509242332:-60,1521943132:0,1540691932:-60},
"America/St Johns":{1235239133:-210,1236484733:-150,1257044333:-210,1268539133:-150,1289098733:-210,1299988733:-150,1320548333:-210,1331438333:-150,1351997933:-210,1362887933:-150,1383447533:-210,1394337533:-150,1414897133:-210,1425787133:-150,1446346733:-210,1457841533:-150,1478401133:-210,1489291133:-150,1509850733:-210,1520740733:-150,1541300333:-210},
"America/St Kitts":{1235239134:-240},
"America/St Lucia":{1235239134:-240},
"America/St Thomas":{1235239135:-240},
"America/St Vincent":{1235239136:-240},
"America/Swift Current":{1235239137:-360},
"America/Tegucigalpa":{1235239137:-360},
"America/Thule":{1235239138:-240,1236495538:-180,1257055138:-240,1268549938:-180,1289109538:-240,1299999538:-180,1320559138:-240,1331449138:-180,1352008738:-240,1362898738:-180,1383458338:-240,1394348338:-180,1414907938:-240,1425797938:-180,1446357538:-240,1457852338:-180,1478411938:-240,1489301938:-180,1509861538:-240,1520751538:-180,1541311138:-240},
"America/Thunder Bay":{1235239139:-300,1236499139:-240,1257058739:-300,1268553539:-240,1289113139:-300,1300003139:-240,1320562739:-300,1331452739:-240,1352012339:-300,1362902339:-240,1383461939:-300,1394351939:-240,1414911539:-300,1425801539:-240,1446361139:-300,1457855939:-240,1478415539:-300,1489305539:-240,1509865139:-300,1520755139:-240,1541314739:-300},
"America/Tijuana":{1235239140:-480,1238929140:-420,1256464740:-480,1270378740:-420,1288519140:-480,1301828340:-420,1319968740:-480,1333277940:-420,1351418340:-480,1365332340:-420,1382867940:-480,1396781940:-420,1414317540:-480,1428231540:-420,1445767140:-480,1459681140:-420,1477821540:-480,1491130740:-420,1509271140:-480,1522580340:-420,1540720740:-480},
"America/Toronto":{1235239140:-300,1236499140:-240,1257058740:-300,1268553540:-240,1289113140:-300,1300003140:-240,1320562740:-300,1331452740:-240,1352012340:-300,1362902340:-240,1383461940:-300,1394351940:-240,1414911540:-300,1425801540:-240,1446361140:-300,1457855940:-240,1478415540:-300,1489305540:-240,1509865140:-300,1520755140:-240,1541314740:-300},
"America/Tortola":{1235239141:-240},
"America/Vancouver":{1235239142:-480,1236509942:-420,1257069542:-480,1268564342:-420,1289123942:-480,1300013942:-420,1320573542:-480,1331463542:-420,1352023142:-480,1362913142:-420,1383472742:-480,1394362742:-420,1414922342:-480,1425812342:-420,1446371942:-480,1457866742:-420,1478426342:-480,1489316342:-420,1509875942:-480,1520765942:-420,1541325542:-480},
"America/Whitehorse":{1235239143:-480,1236509943:-420,1257069543:-480,1268564343:-420,1289123943:-480,1300013943:-420,1320573543:-480,1331463543:-420,1352023143:-480,1362913143:-420,1383472743:-480,1394362743:-420,1414922343:-480,1425812343:-420,1446371943:-480,1457866743:-420,1478426343:-480,1489316343:-420,1509875943:-480,1520765943:-420,1541325543:-480},
"America/Winnipeg":{1235239143:-360,1236502743:-300,1257062343:-360,1268557143:-300,1289116743:-360,1300006743:-300,1320566343:-360,1331456343:-300,1352015943:-360,1362905943:-300,1383465543:-360,1394355543:-300,1414915143:-360,1425805143:-300,1446364743:-360,1457859543:-300,1478419143:-360,1489309143:-300,1509868743:-360,1520758743:-300,1541318343:-360},
"America/Yakutat":{1235239144:-540,1236513544:-480,1257073144:-540,1268567944:-480,1289127544:-540,1300017544:-480,1320577144:-540,1331467144:-480,1352026744:-540,1362916744:-480,1383476344:-540,1394366344:-480,1414925944:-540,1425815944:-480,1446375544:-540,1457870344:-480,1478429944:-540,1489319944:-480,1509879544:-540,1520769544:-480,1541329144:-540},
"America/Yellowknife":{1235239145:-420,1236506345:-360,1257065945:-420,1268560745:-360,1289120345:-420,1300010345:-360,1320569945:-420,1331459945:-360,1352019545:-420,1362909545:-360,1383469145:-420,1394359145:-360,1414918745:-420,1425808745:-360,1446368345:-420,1457863145:-360,1478422745:-420,1489312745:-360,1509872345:-420,1520762345:-360,1541321945:-420},
"Antarctica/Casey":{1235239146:480},
"Antarctica/Davis":{1235239146:420},
"Antarctica/DumontDUrville":{1235239147:600},
"Antarctica/Mawson":{1235239148:360},
"Antarctica/McMurdo":{1235239149:780,1238857149:720,1253977149:780,1270306749:720,1285426749:780,1301756349:720,1316876349:780,1333205949:720,1348930749:780,1365260349:720,1380380349:780,1396709949:720,1411829949:780,1428159549:720,1443279549:780,1459609149:720,1474729149:780,1491058749:720,1506178749:780,1522508349:720,1538233149:780},
"Antarctica/Palmer":{1235239149:-180,1237089549:-240,1255237149:-180,1268539149:-240,1286686749:-180,1299988749:-240,1318136349:-180,1331438349:-240,1350190749:-180,1362887949:-240,1381640349:-180,1394337549:-240,1413089949:-180,1426391949:-240,1444539549:-180,1457841549:-240,1475989149:-180,1489291149:-240,1508043549:-180,1520740749:-240,1539493149:-180},
"Antarctica/Rothera":{1235239150:-180},
"Antarctica/Syowa":{1235239151:180},
"Antarctica/Vostok":{1235239152:360},
"Asia/Aden":{1235239152:180},
"Asia/Almaty":{1235239153:360},
"Asia/Amman":{1235239154:120,1238021954:180,1256857154:120,1269471554:180,1288306754:120,1301525954:180,1319756354:120,1332975554:180,1351205954:120,1364425154:180,1382655554:120,1395874754:180,1414709954:120,1427324354:180,1446159554:120,1459378754:180,1477609154:120,1490828354:180,1509058754:120,1522277954:180,1540508354:120},
"Asia/Anadyr":{1235239155:720,1238252355:780,1256396355:720,1269701955:780,1288450755:720,1301151555:780,1319900355:720,1332601155:780,1351349955:720,1364655555:780,1382799555:720,1396105155:780,1414249155:720,1427554755:780,1445698755:720,1459004355:780,1477753155:720,1490453955:780,1509202755:720,1521903555:780,1540652355:720},
"Asia/Aqtau":{1235239156:300},
"Asia/Aqtobe":{1235239156:300},
"Asia/Ashgabat":{1235239157:300},
"Asia/Baghdad":{1235239158:180},
"Asia/Bahrain":{1235239158:180},
"Asia/Baku":{1235239159:240,1238288359:300,1256432359:240,1269737959:300,1288486759:240,1301187559:300,1319936359:240,1332637159:300,1351385959:240,1364691559:300,1382835559:240,1396141159:300,1414285159:240,1427590759:300,1445734759:240,1459040359:300,1477789159:240,1490489959:300,1509238759:240,1521939559:300,1540688359:240},
"Asia/Bangkok":{1235239160:420},
"Asia/Beirut":{1235239161:120,1238281161:180,1256421561:120,1269730761:180,1288475961:120,1301180361:180,1319925561:120,1332629961:180,1351375161:120,1364684361:180,1382824761:120,1396133961:180,1414274361:120,1427583561:180,1445723961:120,1459033161:180,1477778361:120,1490482761:180,1509227961:120,1521932361:180,1540677561:120},
"Asia/Bishkek":{1235239161:360},
"Asia/Brunei":{1235239162:480},
"Asia/Choibalsan":{1235239163:480},
"Asia/Chongqing":{1235239164:480},
"Asia/Colombo":{1235239164:330},
"Asia/Damascus":{1235239165:120,1238713165:180,1257026365:120,1270162765:180,1288562365:120,1301612365:180,1320098365:120,1333666765:180,1351720765:120,1365116365:180,1383256765:120,1396565965:180,1414792765:120,1428015565:180,1446328765:120,1459465165:180,1477951165:120,1491519565:180,1509487165:120,1522969165:180,1541023165:120},
"Asia/Dhaka":{1235239166:360},
"Asia/Dili":{1235239167:540},
"Asia/Dubai":{1235239167:240},
"Asia/Dushanbe":{1235239168:300},
"Asia/Gaza":{1235239169:120,1238540369:180,1251331169:120,1270076369:180,1282780769:120,1301612369:180,1314230369:120,1333234769:180,1346284769:120,1364770769:180,1377734369:120,1396306769:180,1409183969:120,1427842769:180,1440633569:120,1459465169:180,1472083169:120,1491001169:180,1504137569:120,1522537169:180,1535587169:120},
"Asia/Harbin":{1235239169:480},
"Asia/Ho Chi Minh":{1235239170:420},
"Asia/Hong Kong":{1235239171:480},
"Asia/Hovd":{1235239172:420},
"Asia/Irkutsk":{1235239172:480,1238266772:540,1256410772:480,1269716372:540,1288465172:480,1301165972:540,1319914772:480,1332615572:540,1351364372:480,1364669972:540,1382813972:480,1396119572:540,1414263572:480,1427569172:540,1445713172:480,1459018772:540,1477767572:480,1490468372:540,1509217172:480,1521917972:540,1540666772:480},
"Asia/Jakarta":{1235239173:420},
"Asia/Jayapura":{1235239174:540},
"Asia/Jerusalem":{1235239175:120,1238115575:180,1254009575:120,1269565175:180,1284249575:120,1301619575:180,1317513575:120,1333069175:180,1348358375:120,1364518775:180,1378598375:120,1395968375:180,1411862375:120,1427417975:180,1442707175:120,1459472375:180,1475971175:120,1490921975:180,1506211175:120,1522371575:180,1537055975:120},
"Asia/Kabul":{1235239175:270},
"Asia/Kamchatka":{1235239176:720,1238252376:780,1256396376:720,1269701976:780,1288450776:720,1301151576:780,1319900376:720,1332601176:780,1351349976:720,1364655576:780,1382799576:720,1396105176:780,1414249176:720,1427554776:780,1445698776:720,1459004376:780,1477753176:720,1490453976:780,1509202776:720,1521903576:780,1540652376:720},
"Asia/Karachi":{1235239177:300},
"Asia/Kashgar":{1235239178:480},
"Asia/Katmandu":{1235239178:345},
"Asia/Kolkata":{1235239179:330},
"Asia/Krasnoyarsk":{1235239180:420,1238270380:480,1256414380:420,1269719980:480,1288468780:420,1301169580:480,1319918380:420,1332619180:480,1351367980:420,1364673580:480,1382817580:420,1396123180:480,1414267180:420,1427572780:480,1445716780:420,1459022380:480,1477771180:420,1490471980:480,1509220780:420,1521921580:480,1540670380:420},
"Asia/Kuala Lumpur":{1235239180:480},
"Asia/Kuching":{1235239181:480},
"Asia/Kuwait":{1235239182:180},
"Asia/Macau":{1235239183:480},
"Asia/Magadan":{1235239183:660,1238255983:720,1256399983:660,1269705583:720,1288454383:660,1301155183:720,1319903983:660,1332604783:720,1351353583:660,1364659183:720,1382803183:660,1396108783:720,1414252783:660,1427558383:720,1445702383:660,1459007983:720,1477756783:660,1490457583:720,1509206383:660,1521907183:720,1540655983:660},
"Asia/Makassar":{1235239184:480},
"Asia/Manila":{1235239185:480},
"Asia/Muscat":{1235239186:240},
"Asia/New Delhi":{1235239186:330},
"Asia/Nicosia":{1235239187:120,1238291987:180,1256435987:120,1269741587:180,1288490387:120,1301191187:180,1319939987:120,1332640787:180,1351389587:120,1364695187:180,1382839187:120,1396144787:180,1414288787:120,1427594387:180,1445738387:120,1459043987:180,1477792787:120,1490493587:180,1509242387:120,1521943187:180,1540691987:120},
"Asia/Novosibirsk":{1235239188:360,1238273988:420,1256417988:360,1269723588:420,1288472388:360,1301173188:420,1319921988:360,1332622788:420,1351371588:360,1364677188:420,1382821188:360,1396126788:420,1414270788:360,1427576388:420,1445720388:360,1459025988:420,1477774788:360,1490475588:420,1509224388:360,1521925188:420,1540673988:360},
"Asia/Omsk":{1235239189:360,1238273989:420,1256417989:360,1269723589:420,1288472389:360,1301173189:420,1319921989:360,1332622789:420,1351371589:360,1364677189:420,1382821189:360,1396126789:420,1414270789:360,1427576389:420,1445720389:360,1459025989:420,1477774789:360,1490475589:420,1509224389:360,1521925189:420,1540673989:360},
"Asia/Oral":{1235239189:300},
"Asia/Phnom Penh":{1235239190:420},
"Asia/Pontianak":{1235239191:420},
"Asia/Pyongyang":{1235239192:540},
"Asia/Qatar":{1235239192:180},
"Asia/Qyzylorda":{1235239193:360},
"Asia/Rangoon":{1235239194:390},
"Asia/Riyadh":{1235239195:180},
"Asia/Sakhalin":{1235239195:600,1238259595:660,1256403595:600,1269709195:660,1288457995:600,1301158795:660,1319907595:600,1332608395:660,1351357195:600,1364662795:660,1382806795:600,1396112395:660,1414256395:600,1427561995:660,1445705995:600,1459011595:660,1477760395:600,1490461195:660,1509209995:600,1521910795:660,1540659595:600},
"Asia/Samarkand":{1235239196:300},
"Asia/Seoul":{1235239197:540},
"Asia/Shanghai":{1235239197:480},
"Asia/Singapore":{1235239198:480},
"Asia/Taipei":{1235239199:480},
"Asia/Tashkent":{1235239200:300},
"Asia/Tbilisi":{1235239200:240},
"Asia/Tehran":{1235239201:210,1237669201:270,1253563201:210,1269205201:270,1285099201:210,1300741201:270,1316635201:210,1332277201:270,1348171201:210,1363899601:270,1379793601:210,1395435601:270,1411329601:210,1426971601:270,1442865601:210,1458507601:270,1474401601:210,1490130001:270,1506024001:210,1521666001:270,1537560001:210},
"Asia/Thimphu":{1235239202:360},
"Asia/Tokyo":{1235239203:540},
"Asia/Ulaanbaatar":{1235239203:480},
"Asia/Urumqi":{1235239204:480},
"Asia/Vientiane":{1235239205:420},
"Asia/Vladivostok":{1235239205:600,1238256005:660,1256400005:600,1269705605:660,1288454405:600,1301155205:660,1319904005:600,1332604805:660,1351353605:600,1364659205:660,1382803205:600,1396108805:660,1414252805:600,1427558405:660,1445702405:600,1459008005:660,1477756805:600,1490457605:660,1509206405:600,1521907205:660,1540656005:600},
"Asia/Yakutsk":{1235239206:540,1238259606:600,1256403606:540,1269709206:600,1288458006:540,1301158806:600,1319907606:540,1332608406:600,1351357206:540,1364662806:600,1382806806:540,1396112406:600,1414256406:540,1427562006:600,1445706006:540,1459011606:600,1477760406:540,1490461206:600,1509210006:540,1521910806:600,1540659606:540},
"Asia/Yekaterinburg":{1235239207:300,1238274007:360,1256418007:300,1269723607:360,1288472407:300,1301173207:360,1319922007:300,1332622807:360,1351371607:300,1364677207:360,1382821207:300,1396126807:360,1414270807:300,1427576407:360,1445720407:300,1459026007:360,1477774807:300,1490475607:360,1509224407:300,1521925207:360,1540674007:300},
"Asia/Yerevan":{1235239208:240,1238277608:300,1256421608:240,1269727208:300,1288476008:240,1301176808:300,1319925608:240,1332626408:300,1351375208:240,1364680808:300,1382824808:240,1396130408:300,1414274408:240,1427580008:300,1445724008:240,1459029608:300,1477778408:240,1490479208:300,1509228008:240,1521928808:300,1540677608:240},
"Atlantic/Azores":{1235239208:-60,1238288408:0,1256432408:-60,1269738008:0,1288486808:-60,1301187608:0,1319936408:-60,1332637208:0,1351386008:-60,1364691608:0,1382835608:-60,1396141208:0,1414285208:-60,1427590808:0,1445734808:-60,1459040408:0,1477789208:-60,1490490008:0,1509238808:-60,1521939608:0,1540688408:-60},
"Atlantic/Bermuda":{1235239209:-240,1236492009:-180,1257051609:-240,1268546409:-180,1289106009:-240,1299996009:-180,1320555609:-240,1331445609:-180,1352005209:-240,1362895209:-180,1383454809:-240,1394344809:-180,1414904409:-240,1425794409:-180,1446354009:-240,1457848809:-180,1478408409:-240,1489298409:-180,1509858009:-240,1520748009:-180,1541307609:-240},
"Atlantic/Canary":{1235239210:0,1238288410:60,1256432410:0,1269738010:60,1288486810:0,1301187610:60,1319936410:0,1332637210:60,1351386010:0,1364691610:60,1382835610:0,1396141210:60,1414285210:0,1427590810:60,1445734810:0,1459040410:60,1477789210:0,1490490010:60,1509238810:0,1521939610:60,1540688410:0},
"Atlantic/Cape Verde":{1235239211:-60},
"Atlantic/Faroe":{1235239211:0,1238288411:60,1256432411:0,1269738011:60,1288486811:0,1301187611:60,1319936411:0,1332637211:60,1351386011:0,1364691611:60,1382835611:0,1396141211:60,1414285211:0,1427590811:60,1445734811:0,1459040411:60,1477789211:0,1490490011:60,1509238811:0,1521939611:60,1540688411:0},
"Atlantic/Madeira":{1235239212:0,1238288412:60,1256432412:0,1269738012:60,1288486812:0,1301187612:60,1319936412:0,1332637212:60,1351386012:0,1364691612:60,1382835612:0,1396141212:60,1414285212:0,1427590812:60,1445734812:0,1459040412:60,1477789212:0,1490490012:60,1509238812:0,1521939612:60,1540688412:0},
"Atlantic/Reykjavik":{1235239213:0},
"Atlantic/South Georgia":{1235239214:-120},
"Atlantic/St Helena":{1235239214:0},
"Atlantic/Stanley":{1235239215:-180,1240117215:-240,1252216815:-180,1271566815:-240,1283666415:-180,1303016415:-240,1315116015:-180,1334466015:-240,1346565615:-180,1366520415:-240,1378015215:-180,1397970015:-240,1410069615:-180,1429419615:-240,1441519215:-180,1460869215:-240,1472968815:-180,1492318815:-240,1504418415:-180,1523768415:-240,1535868015:-180},
"Australia/Adelaide":{1235239216:630,1238864416:570,1254589216:630,1270314016:570,1286038816:630,1301763616:570,1317488416:630,1333213216:570,1349542816:630,1365267616:570,1380992416:630,1396717216:570,1412442016:630,1428166816:570,1443891616:630,1459616416:570,1475341216:630,1491066016:570,1506790816:630,1522515616:570,1538845216:630},
"Australia/Brisbane":{1235239216:600},
"Australia/Broken Hill":{1235239217:630,1238864417:570,1254589217:630,1270314017:570,1286038817:630,1301763617:570,1317488417:630,1333213217:570,1349542817:630,1365267617:570,1380992417:630,1396717217:570,1412442017:630,1428166817:570,1443891617:630,1459616417:570,1475341217:630,1491066017:570,1506790817:630,1522515617:570,1538845217:630},
"Australia/Currie":{1235239218:660,1238860818:600,1254585618:660,1270310418:600,1286035218:660,1301760018:600,1317484818:660,1333209618:600,1349539218:660,1365264018:600,1380988818:660,1396713618:600,1412438418:660,1428163218:600,1443888018:660,1459612818:600,1475337618:660,1491062418:600,1506787218:660,1522512018:600,1538841618:660},
"Australia/Darwin":{1235239219:570},
"Australia/Eucla":{1235239219:585,1238263219:525},
"Australia/Hobart":{1235239220:660,1238860820:600,1254585620:660,1270310420:600,1286035220:660,1301760020:600,1317484820:660,1333209620:600,1349539220:660,1365264020:600,1380988820:660,1396713620:600,1412438420:660,1428163220:600,1443888020:660,1459612820:600,1475337620:660,1491062420:600,1506787220:660,1522512020:600,1538841620:660},
"Australia/Lindeman":{1235239221:600},
"Australia/Lord Howe":{1235239222:660,1238857222:630,1254585622:660,1270306822:630,1286035222:660,1301756422:630,1317484822:660,1333206022:630,1349539222:660,1365260422:630,1380988822:660,1396710022:630,1412438422:660,1428159622:630,1443888022:660,1459609222:630,1475337622:660,1491058822:630,1506787222:660,1522508422:630,1538841622:660},
"Australia/Melbourne":{1235239222:660,1238860822:600,1254585622:660,1270310422:600,1286035222:660,1301760022:600,1317484822:660,1333209622:600,1349539222:660,1365264022:600,1380988822:660,1396713622:600,1412438422:660,1428163222:600,1443888022:660,1459612822:600,1475337622:660,1491062422:600,1506787222:660,1522512022:600,1538841622:660},
"Australia/Perth":{1235239223:540,1238263223:480},
"Australia/Sydney":{1235239224:660,1238860824:600,1254585624:660,1270310424:600,1286035224:660,1301760024:600,1317484824:660,1333209624:600,1349539224:660,1365264024:600,1380988824:660,1396713624:600,1412438424:660,1428163224:600,1443888024:660,1459612824:600,1475337624:660,1491062424:600,1506787224:660,1522512024:600,1538841624:660},
"Europe/Amsterdam":{1235239225:60,1238288425:120,1256432425:60,1269738025:120,1288486825:60,1301187625:120,1319936425:60,1332637225:120,1351386025:60,1364691625:120,1382835625:60,1396141225:120,1414285225:60,1427590825:120,1445734825:60,1459040425:120,1477789225:60,1490490025:120,1509238825:60,1521939625:120,1540688425:60},
"Europe/Andorra":{1235239225:60,1238288425:120,1256432425:60,1269738025:120,1288486825:60,1301187625:120,1319936425:60,1332637225:120,1351386025:60,1364691625:120,1382835625:60,1396141225:120,1414285225:60,1427590825:120,1445734825:60,1459040425:120,1477789225:60,1490490025:120,1509238825:60,1521939625:120,1540688425:60},
"Europe/Athens":{1235239226:120,1238288426:180,1256432426:120,1269738026:180,1288486826:120,1301187626:180,1319936426:120,1332637226:180,1351386026:120,1364691626:180,1382835626:120,1396141226:180,1414285226:120,1427590826:180,1445734826:120,1459040426:180,1477789226:120,1490490026:180,1509238826:120,1521939626:180,1540688426:120},
"Europe/Belgrade":{1235239227:60,1238288427:120,1256432427:60,1269738027:120,1288486827:60,1301187627:120,1319936427:60,1332637227:120,1351386027:60,1364691627:120,1382835627:60,1396141227:120,1414285227:60,1427590827:120,1445734827:60,1459040427:120,1477789227:60,1490490027:120,1509238827:60,1521939627:120,1540688427:60},
"Europe/Berlin":{1235239228:60,1238288428:120,1256432428:60,1269738028:120,1288486828:60,1301187628:120,1319936428:60,1332637228:120,1351386028:60,1364691628:120,1382835628:60,1396141228:120,1414285228:60,1427590828:120,1445734828:60,1459040428:120,1477789228:60,1490490028:120,1509238828:60,1521939628:120,1540688428:60},
"Europe/Brussels":{1235239228:60,1238288428:120,1256432428:60,1269738028:120,1288486828:60,1301187628:120,1319936428:60,1332637228:120,1351386028:60,1364691628:120,1382835628:60,1396141228:120,1414285228:60,1427590828:120,1445734828:60,1459040428:120,1477789228:60,1490490028:120,1509238828:60,1521939628:120,1540688428:60},
"Europe/Bucharest":{1235239229:120,1238288429:180,1256432429:120,1269738029:180,1288486829:120,1301187629:180,1319936429:120,1332637229:180,1351386029:120,1364691629:180,1382835629:120,1396141229:180,1414285229:120,1427590829:180,1445734829:120,1459040429:180,1477789229:120,1490490029:180,1509238829:120,1521939629:180,1540688429:120},
"Europe/Budapest":{1235239230:60,1238288430:120,1256432430:60,1269738030:120,1288486830:60,1301187630:120,1319936430:60,1332637230:120,1351386030:60,1364691630:120,1382835630:60,1396141230:120,1414285230:60,1427590830:120,1445734830:60,1459040430:120,1477789230:60,1490490030:120,1509238830:60,1521939630:120,1540688430:60},
"Europe/Chisinau":{1235239231:120,1238288431:180,1256432431:120,1269738031:180,1288486831:120,1301187631:180,1319936431:120,1332637231:180,1351386031:120,1364691631:180,1382835631:120,1396141231:180,1414285231:120,1427590831:180,1445734831:120,1459040431:180,1477789231:120,1490490031:180,1509238831:120,1521939631:180,1540688431:120},
"Europe/Copenhagen":{1235239231:60,1238288431:120,1256432431:60,1269738031:120,1288486831:60,1301187631:120,1319936431:60,1332637231:120,1351386031:60,1364691631:120,1382835631:60,1396141231:120,1414285231:60,1427590831:120,1445734831:60,1459040431:120,1477789231:60,1490490031:120,1509238831:60,1521939631:120,1540688431:60},
"Europe/Dublin":{1235239232:0,1238288432:60,1256432432:0,1269738032:60,1288486832:0,1301187632:60,1319936432:0,1332637232:60,1351386032:0,1364691632:60,1382835632:0,1396141232:60,1414285232:0,1427590832:60,1445734832:0,1459040432:60,1477789232:0,1490490032:60,1509238832:0,1521939632:60,1540688432:0},
"Europe/Gibraltar":{1235239233:60,1238288433:120,1256432433:60,1269738033:120,1288486833:60,1301187633:120,1319936433:60,1332637233:120,1351386033:60,1364691633:120,1382835633:60,1396141233:120,1414285233:60,1427590833:120,1445734833:60,1459040433:120,1477789233:60,1490490033:120,1509238833:60,1521939633:120,1540688433:60},
"Europe/Helsinki":{1235239234:120,1238288434:180,1256432434:120,1269738034:180,1288486834:120,1301187634:180,1319936434:120,1332637234:180,1351386034:120,1364691634:180,1382835634:120,1396141234:180,1414285234:120,1427590834:180,1445734834:120,1459040434:180,1477789234:120,1490490034:180,1509238834:120,1521939634:180,1540688434:120},
"Europe/Istanbul":{1235239235:120,1238288435:180,1256432435:120,1269738035:180,1288486835:120,1301187635:180,1319936435:120,1332637235:180,1351386035:120,1364691635:180,1382835635:120,1396141235:180,1414285235:120,1427590835:180,1445734835:120,1459040435:180,1477789235:120,1490490035:180,1509238835:120,1521939635:180,1540688435:120},
"Europe/Kaliningrad":{1235239235:120,1238284835:180,1256428835:120,1269734435:180,1288483235:120,1301184035:180,1319932835:120,1332633635:180,1351382435:120,1364688035:180,1382832035:120,1396137635:180,1414281635:120,1427587235:180,1445731235:120,1459036835:180,1477785635:120,1490486435:180,1509235235:120,1521936035:180,1540684835:120},
"Europe/Kiev":{1235239236:120,1238288436:180,1256432436:120,1269738036:180,1288486836:120,1301187636:180,1319936436:120,1332637236:180,1351386036:120,1364691636:180,1382835636:120,1396141236:180,1414285236:120,1427590836:180,1445734836:120,1459040436:180,1477789236:120,1490490036:180,1509238836:120,1521939636:180,1540688436:120},
"Europe/Lisbon":{1235239237:0,1238288437:60,1256432437:0,1269738037:60,1288486837:0,1301187637:60,1319936437:0,1332637237:60,1351386037:0,1364691637:60,1382835637:0,1396141237:60,1414285237:0,1427590837:60,1445734837:0,1459040437:60,1477789237:0,1490490037:60,1509238837:0,1521939637:60,1540688437:0},
"Europe/London":{1235239238:0,1238288438:60,1256432438:0,1269738038:60,1288486838:0,1301187638:60,1319936438:0,1332637238:60,1351386038:0,1364691638:60,1382835638:0,1396141238:60,1414285238:0,1427590838:60,1445734838:0,1459040438:60,1477789238:0,1490490038:60,1509238838:0,1521939638:60,1540688438:0},
"Europe/Luxembourg":{1235239238:60,1238288438:120,1256432438:60,1269738038:120,1288486838:60,1301187638:120,1319936438:60,1332637238:120,1351386038:60,1364691638:120,1382835638:60,1396141238:120,1414285238:60,1427590838:120,1445734838:60,1459040438:120,1477789238:60,1490490038:120,1509238838:60,1521939638:120,1540688438:60},
"Europe/Madrid":{1235239239:60,1238288439:120,1256432439:60,1269738039:120,1288486839:60,1301187639:120,1319936439:60,1332637239:120,1351386039:60,1364691639:120,1382835639:60,1396141239:120,1414285239:60,1427590839:120,1445734839:60,1459040439:120,1477789239:60,1490490039:120,1509238839:60,1521939639:120,1540688439:60},
"Europe/Malta":{1235239240:60,1238288440:120,1256432440:60,1269738040:120,1288486840:60,1301187640:120,1319936440:60,1332637240:120,1351386040:60,1364691640:120,1382835640:60,1396141240:120,1414285240:60,1427590840:120,1445734840:60,1459040440:120,1477789240:60,1490490040:120,1509238840:60,1521939640:120,1540688440:60},
"Europe/Minsk":{1235239241:120,1238284841:180,1256428841:120,1269734441:180,1288483241:120,1301184041:180,1319932841:120,1332633641:180,1351382441:120,1364688041:180,1382832041:120,1396137641:180,1414281641:120,1427587241:180,1445731241:120,1459036841:180,1477785641:120,1490486441:180,1509235241:120,1521936041:180,1540684841:120},
"Europe/Monaco":{1235239241:60,1238288441:120,1256432441:60,1269738041:120,1288486841:60,1301187641:120,1319936441:60,1332637241:120,1351386041:60,1364691641:120,1382835641:60,1396141241:120,1414285241:60,1427590841:120,1445734841:60,1459040441:120,1477789241:60,1490490041:120,1509238841:60,1521939641:120,1540688441:60},
"Europe/Moscow":{1235239242:180,1238281242:240,1256425242:180,1269730842:240,1288479642:180,1301180442:240,1319929242:180,1332630042:240,1351378842:180,1364684442:240,1382828442:180,1396134042:240,1414278042:180,1427583642:240,1445727642:180,1459033242:240,1477782042:180,1490482842:240,1509231642:180,1521932442:240,1540681242:180},
"Europe/Oslo":{1235239243:60,1238288443:120,1256432443:60,1269738043:120,1288486843:60,1301187643:120,1319936443:60,1332637243:120,1351386043:60,1364691643:120,1382835643:60,1396141243:120,1414285243:60,1427590843:120,1445734843:60,1459040443:120,1477789243:60,1490490043:120,1509238843:60,1521939643:120,1540688443:60},
"Europe/Paris":{1235239244:60,1238288444:120,1256432444:60,1269738044:120,1288486844:60,1301187644:120,1319936444:60,1332637244:120,1351386044:60,1364691644:120,1382835644:60,1396141244:120,1414285244:60,1427590844:120,1445734844:60,1459040444:120,1477789244:60,1490490044:120,1509238844:60,1521939644:120,1540688444:60},
"Europe/Prague":{1235239244:60,1238288444:120,1256432444:60,1269738044:120,1288486844:60,1301187644:120,1319936444:60,1332637244:120,1351386044:60,1364691644:120,1382835644:60,1396141244:120,1414285244:60,1427590844:120,1445734844:60,1459040444:120,1477789244:60,1490490044:120,1509238844:60,1521939644:120,1540688444:60},
"Europe/Riga":{1235239245:120,1238288445:180,1256432445:120,1269738045:180,1288486845:120,1301187645:180,1319936445:120,1332637245:180,1351386045:120,1364691645:180,1382835645:120,1396141245:180,1414285245:120,1427590845:180,1445734845:120,1459040445:180,1477789245:120,1490490045:180,1509238845:120,1521939645:180,1540688445:120},
"Europe/Rome":{1235239246:60,1238288446:120,1256432446:60,1269738046:120,1288486846:60,1301187646:120,1319936446:60,1332637246:120,1351386046:60,1364691646:120,1382835646:60,1396141246:120,1414285246:60,1427590846:120,1445734846:60,1459040446:120,1477789246:60,1490490046:120,1509238846:60,1521939646:120,1540688446:60},
"Europe/Samara":{1235239247:240,1238277647:300,1256421647:240,1269727247:300,1288476047:240,1301176847:300,1319925647:240,1332626447:300,1351375247:240,1364680847:300,1382824847:240,1396130447:300,1414274447:240,1427580047:300,1445724047:240,1459029647:300,1477778447:240,1490479247:300,1509228047:240,1521928847:300,1540677647:240},
"Europe/Simferopol":{1235239247:120,1238288447:180,1256432447:120,1269738047:180,1288486847:120,1301187647:180,1319936447:120,1332637247:180,1351386047:120,1364691647:180,1382835647:120,1396141247:180,1414285247:120,1427590847:180,1445734847:120,1459040447:180,1477789247:120,1490490047:180,1509238847:120,1521939647:180,1540688447:120},
"Europe/Sofia":{1235239248:120,1238288448:180,1256432448:120,1269738048:180,1288486848:120,1301187648:180,1319936448:120,1332637248:180,1351386048:120,1364691648:180,1382835648:120,1396141248:180,1414285248:120,1427590848:180,1445734848:120,1459040448:180,1477789248:120,1490490048:180,1509238848:120,1521939648:180,1540688448:120},
"Europe/Stockholm":{1235239249:60,1238288449:120,1256432449:60,1269738049:120,1288486849:60,1301187649:120,1319936449:60,1332637249:120,1351386049:60,1364691649:120,1382835649:60,1396141249:120,1414285249:60,1427590849:120,1445734849:60,1459040449:120,1477789249:60,1490490049:120,1509238849:60,1521939649:120,1540688449:60},
"Europe/Tallinn":{1235239250:120,1238288450:180,1256432450:120,1269738050:180,1288486850:120,1301187650:180,1319936450:120,1332637250:180,1351386050:120,1364691650:180,1382835650:120,1396141250:180,1414285250:120,1427590850:180,1445734850:120,1459040450:180,1477789250:120,1490490050:180,1509238850:120,1521939650:180,1540688450:120},
"Europe/Tirane":{1235239250:60,1238288450:120,1256432450:60,1269738050:120,1288486850:60,1301187650:120,1319936450:60,1332637250:120,1351386050:60,1364691650:120,1382835650:60,1396141250:120,1414285250:60,1427590850:120,1445734850:60,1459040450:120,1477789250:60,1490490050:120,1509238850:60,1521939650:120,1540688450:60},
"Europe/Uzhgorod":{1235239251:120,1238288451:180,1256432451:120,1269738051:180,1288486851:120,1301187651:180,1319936451:120,1332637251:180,1351386051:120,1364691651:180,1382835651:120,1396141251:180,1414285251:120,1427590851:180,1445734851:120,1459040451:180,1477789251:120,1490490051:180,1509238851:120,1521939651:180,1540688451:120},
"Europe/Vaduz":{1235239252:60,1238288452:120,1256432452:60,1269738052:120,1288486852:60,1301187652:120,1319936452:60,1332637252:120,1351386052:60,1364691652:120,1382835652:60,1396141252:120,1414285252:60,1427590852:120,1445734852:60,1459040452:120,1477789252:60,1490490052:120,1509238852:60,1521939652:120,1540688452:60},
"Europe/Vienna":{1235239253:60,1238288453:120,1256432453:60,1269738053:120,1288486853:60,1301187653:120,1319936453:60,1332637253:120,1351386053:60,1364691653:120,1382835653:60,1396141253:120,1414285253:60,1427590853:120,1445734853:60,1459040453:120,1477789253:60,1490490053:120,1509238853:60,1521939653:120,1540688453:60},
"Europe/Vilnius":{1235239254:120,1238288454:180,1256432454:120,1269738054:180,1288486854:120,1301187654:180,1319936454:120,1332637254:180,1351386054:120,1364691654:180,1382835654:120,1396141254:180,1414285254:120,1427590854:180,1445734854:120,1459040454:180,1477789254:120,1490490054:180,1509238854:120,1521939654:180,1540688454:120},
"Europe/Volgograd":{1235239254:180,1238281254:240,1256425254:180,1269730854:240,1288479654:180,1301180454:240,1319929254:180,1332630054:240,1351378854:180,1364684454:240,1382828454:180,1396134054:240,1414278054:180,1427583654:240,1445727654:180,1459033254:240,1477782054:180,1490482854:240,1509231654:180,1521932454:240,1540681254:180},
"Europe/Warsaw":{1235239255:60,1238288455:120,1256432455:60,1269738055:120,1288486855:60,1301187655:120,1319936455:60,1332637255:120,1351386055:60,1364691655:120,1382835655:60,1396141255:120,1414285255:60,1427590855:120,1445734855:60,1459040455:120,1477789255:60,1490490055:120,1509238855:60,1521939655:120,1540688455:60},
"Europe/Zaporozhye":{1235239256:120,1238288456:180,1256432456:120,1269738056:180,1288486856:120,1301187656:180,1319936456:120,1332637256:180,1351386056:120,1364691656:180,1382835656:120,1396141256:180,1414285256:120,1427590856:180,1445734856:120,1459040456:180,1477789256:120,1490490056:180,1509238856:120,1521939656:180,1540688456:120},
"Europe/Zurich":{1235239257:60,1238288457:120,1256432457:60,1269738057:120,1288486857:60,1301187657:120,1319936457:60,1332637257:120,1351386057:60,1364691657:120,1382835657:60,1396141257:120,1414285257:60,1427590857:120,1445734857:60,1459040457:120,1477789257:60,1490490057:120,1509238857:60,1521939657:120,1540688457:60},
"GMT":{1235239257:0},
"Indian Ocean/Antananarivo":{1235239258:180},
"Indian Ocean/Chagos":{1235239258:360},
"Indian Ocean/Christmas":{1235239259:420},
"Indian Ocean/Cocos":{1235239260:390},
"Indian Ocean/Comoro":{1235239260:180},
"Indian Ocean/Kerguelen":{1235239261:300},
"Indian Ocean/Mahe":{1235239261:240},
"Indian Ocean/Maldives":{1235239262:300},
"Indian Ocean/Mauritius":{1235239263:300,1238277663:240,1256421663:300,1269727263:240,1288476063:300,1301176863:240,1319925663:300,1332626463:240,1351375263:300,1364680863:240,1382824863:300,1396130463:240,1414274463:300,1427580063:240,1445724063:300,1459029663:240,1477778463:300,1490479263:240,1509228063:300,1521928863:240,1540677663:300},
"Indian Ocean/Mayotte":{1235239264:180},
"Indian Ocean/Reunion":{1235239264:240},
"Pacific/Apia":{1235239265:-660},
"Pacific/Auckland":{1235239266:780,1238853666:720,1253973666:780,1270303266:720,1285423266:780,1301752866:720,1316872866:780,1333202466:720,1348927266:780,1365256866:720,1380376866:780,1396706466:720,1411826466:780,1428156066:720,1443276066:780,1459605666:720,1474725666:780,1491055266:720,1506175266:780,1522504866:720,1538229666:780},
"Pacific/Chatham":{1235239267:825,1238853667:765,1253973667:825,1270303267:765,1285423267:825,1301752867:765,1316872867:825,1333202467:765,1348927267:825,1365256867:765,1380376867:825,1396706467:765,1411826467:825,1428156067:765,1443276067:825,1459605667:765,1474725667:825,1491055267:765,1506175267:825,1522504867:765,1538229667:825},
"Pacific/Easter":{1235239267:-300,1237086067:-360,1255233667:-300,1268535667:-360,1286683267:-300,1299985267:-360,1318132867:-300,1331434867:-360,1350187267:-300,1362884467:-360,1381636867:-300,1394334067:-360,1413086467:-300,1426388467:-360,1444536067:-300,1457838067:-360,1475985667:-300,1489287667:-360,1508040067:-300,1520737267:-360,1539489667:-300},
"Pacific/Efate":{1235239268:660},
"Pacific/Enderbury":{1235239269:780},
"Pacific/Fakaofo":{1235239270:-600},
"Pacific/Fiji":{1235239270:720},
"Pacific/Funafuti":{1235239271:720},
"Pacific/Galapagos":{1235239271:-360},
"Pacific/Gambier":{1235239272:-540},
"Pacific/Guadalcanal":{1235239273:660},
"Pacific/Guam":{1235239273:600},
"Pacific/Honolulu":{1235239274:-600},
"Pacific/Johnston":{1235239275:-600},
"Pacific/Kiritimati":{1235239275:840},
"Pacific/Kosrae":{1235239276:660},
"Pacific/Kwajalein":{1235239277:720},
"Pacific/Majuro":{1235239277:720},
"Pacific/Marquesas":{1235239278:-570},
"Pacific/Midway":{1235239279:-660},
"Pacific/Nauru":{1235239279:720},
"Pacific/Niue":{1235239280:-660},
"Pacific/Norfolk":{1235239281:690},
"Pacific/Noumea":{1235239282:660},
"Pacific/Pago Pago":{1235239282:-660},
"Pacific/Palau":{1235239283:540},
"Pacific/Pitcairn":{1235239283:-480},
"Pacific/Ponape":{1235239284:660},
"Pacific/Port Moresby":{1235239285:600},
"Pacific/Rarotonga":{1235239285:-600},
"Pacific/Saipan":{1235239286:600},
"Pacific/Tahiti":{1235239286:-600},
"Pacific/Tarawa":{1235239287:720},
"Pacific/Tongatapu":{1235239288:780},
"Pacific/Truk":{1235239288:600},
"Pacific/Wake":{1235239289:720},
"Pacific/Wallis":{1235239289:720},
"UTC":{1235239289:0},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-9":{0:-540},
"GMT-8":{0:-480},
"GMT-7":{0:-420},
"GMT-6":{0:-360},
"GMT-5":{0:-300},
"GMT-4":{0:-240},
"GMT-3":{0:-180},
"GMT-2":{0:-120},
"GMT-1":{0:-60},
"GMT+0":{0:0},
"GMT+1":{0:60},
"GMT+2":{0:120},
"GMT+3":{0:180},
"GMT+4":{0:240},
"GMT+5":{0:300},
"GMT+6":{0:360},
"GMT+7":{0:420},
"GMT+8":{0:480},
"GMT+9":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'English'
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = formatDate( G.mainTimeFormat, now );

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}
