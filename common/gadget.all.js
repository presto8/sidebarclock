// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1230916561:0},
"Africa/Accra":{1230916562:0},
"Africa/Addis Ababa":{1230916562:180},
"Africa/Algiers":{1230916563:60},
"Africa/Asmara":{1230916564:180},
"Africa/Bamako":{1230916565:0},
"Africa/Bangui":{1230916565:60},
"Africa/Banjul":{1230916566:0},
"Africa/Bissau":{1230916567:0},
"Africa/Blantyre":{1230916567:120},
"Africa/Brazzaville":{1230916568:60},
"Africa/Bujumbura":{1230916569:120},
"Africa/Cairo":{1230916569:120,1240524969:180,1251407769:120,1272579369:180,1282857369:120,1304028969:180,1314306969:120,1335478569:180,1346361369:120,1366928169:180,1377810969:120,1398377769:180,1409260569:120,1429827369:180,1440710169:120,1461881769:180,1472159769:120,1493331369:180,1504214169:120,1524780969:180,1535663769:120},
"Africa/Casablanca":{1230916570:0},
"Africa/Ceuta":{1230916571:60,1238289371:120,1256433371:60,1269738971:120,1288487771:60,1301188571:120,1319937371:60,1332638171:120,1351386971:60,1364692571:120,1382836571:60,1396142171:120,1414286171:60,1427591771:120,1445735771:60,1459041371:120,1477790171:60,1490490971:120,1509239771:60,1521940571:120,1540689371:60},
"Africa/Conakry":{1230916572:0},
"Africa/Dakar":{1230916572:0},
"Africa/Dar es Salaam":{1230916573:180},
"Africa/Djibouti":{1230916574:180},
"Africa/Douala":{1230916574:60},
"Africa/El Aaiun":{1230916575:0},
"Africa/Freetown":{1230916576:0},
"Africa/Gaborone":{1230916577:120},
"Africa/Harare":{1230916577:120},
"Africa/Johannesburg":{1230916578:120},
"Africa/Kampala":{1230916579:180},
"Africa/Khartoum":{1230916580:180},
"Africa/Kigali":{1230916580:120},
"Africa/Kinshasa":{1230916581:60},
"Africa/Lagos":{1230916581:60},
"Africa/Libreville":{1230916582:60},
"Africa/Lome":{1230916583:0},
"Africa/Luanda":{1230916583:60},
"Africa/Lubumbashi":{1230916584:120},
"Africa/Lusaka":{1230916584:120},
"Africa/Malabo":{1230916585:60},
"Africa/Maputo":{1230916586:120},
"Africa/Maseru":{1230916587:120},
"Africa/Mbabane":{1230916587:120},
"Africa/Mogadishu":{1230916588:180},
"Africa/Monrovia":{1230916589:0},
"Africa/Nairobi":{1230916589:180},
"Africa/Ndjamena":{1230916590:60},
"Africa/Niamey":{1230916591:60},
"Africa/Nouakchott":{1230916592:0},
"Africa/Ouagadougou":{1230916592:0},
"Africa/Porto-Novo":{1230916593:60},
"Africa/Sao Tome":{1230916594:0},
"Africa/Tripoli":{1230916594:120},
"Africa/Tunis":{1230916595:60,1238289395:120,1256433395:60,1269738995:120,1288487795:60,1301188595:120,1319937395:60,1332638195:120,1351386995:60,1364692595:120,1382836595:60,1396142195:120,1414286195:60,1427591795:120,1445735795:60,1459041395:120,1477790195:60,1490490995:120,1509239795:60,1521940595:120,1540689395:60},
"Africa/Windhoek":{1230916596:120,1238890596:60,1252199796:120,1270340196:60,1283649396:120,1301789796:60,1315098996:120,1333239396:60,1346548596:120,1365293796:60,1377998196:120,1396743396:60,1410052596:120,1428192996:60,1441502196:120,1459642596:60,1472951796:120,1491092196:60,1504401396:120,1522541796:60,1535850996:120},
"America/Adak":{1230916597:-600,1236514597:-540,1257074197:-600,1268568997:-540,1289128597:-600,1300018597:-540,1320578197:-600,1331468197:-540,1352027797:-600,1362917797:-540,1383477397:-600,1394367397:-540,1414926997:-600,1425816997:-540,1446376597:-600,1457871397:-540,1478430997:-600,1489320997:-540,1509880597:-600,1520770597:-540,1541330197:-600},
"America/Anchorage":{1230916597:-540,1236510997:-480,1257070597:-540,1268565397:-480,1289124997:-540,1300014997:-480,1320574597:-540,1331464597:-480,1352024197:-540,1362914197:-480,1383473797:-540,1394363797:-480,1414923397:-540,1425813397:-480,1446372997:-540,1457867797:-480,1478427397:-540,1489317397:-480,1509876997:-540,1520766997:-480,1541326597:-540},
"America/Anguilla":{1230916598:-240},
"America/Antigua":{1230916599:-240},
"America/Araguaina":{1230916600:-180},
"America/Argentina/Buenos Aires":{1230916600:-120,1237083400:-180,1255835800:-120,1269137800:-180,1287285400:-120,1300587400:-180,1318735000:-120,1332037000:-180,1350789400:-120,1363486600:-180,1382239000:-120,1394936200:-180,1413688600:-120,1426385800:-180,1445138200:-120,1458440200:-180,1476587800:-120,1489889800:-180,1508037400:-120,1521339400:-180,1540091800:-120},
"America/Argentina/Catamarca":{1230916601:-180},
"America/Argentina/Cordoba":{1230916602:-120,1237083402:-180,1255835802:-120,1269137802:-180,1287285402:-120,1300587402:-180,1318735002:-120,1332037002:-180,1350789402:-120,1363486602:-180,1382239002:-120,1394936202:-180,1413688602:-120,1426385802:-180,1445138202:-120,1458440202:-180,1476587802:-120,1489889802:-180,1508037402:-120,1521339402:-180,1540091802:-120},
"America/Argentina/Jujuy":{1230916603:-180},
"America/Argentina/La Rioja":{1230916603:-180},
"America/Argentina/Mendoza":{1230916604:-180},
"America/Argentina/Rio Gallegos":{1230916605:-180},
"America/Argentina/Salta":{1230916606:-180},
"America/Argentina/San Juan":{1230916606:-180},
"America/Argentina/San Luis":{1230916607:-180},
"America/Argentina/Tucuman":{1230916608:-120,1237083408:-180,1255835808:-120,1269137808:-180,1287285408:-120,1300587408:-180,1318735008:-120,1332037008:-180,1350789408:-120,1363486608:-180,1382239008:-120,1394936208:-180,1413688608:-120,1426385808:-180,1445138208:-120,1458440208:-180,1476587808:-120,1489889808:-180,1508037408:-120,1521339408:-180,1540091808:-120},
"America/Argentina/Ushuaia":{1230916609:-180},
"America/Aruba":{1230916609:-240},
"America/Asuncion":{1230916610:-180,1236482210:-240,1255839410:-180,1268536610:-240,1287289010:-180,1299986210:-240,1318738610:-180,1331435810:-240,1350793010:-180,1362885410:-240,1382242610:-180,1394335010:-240,1413692210:-180,1425784610:-240,1445141810:-180,1457839010:-240,1476591410:-180,1489288610:-240,1508041010:-180,1520738210:-240,1540095410:-180},
"America/Atikokan":{1230916611:-300},
"America/Bahia":{1230916612:-180},
"America/Barbados":{1230916612:-240},
"America/Belem":{1230916613:-180},
"America/Belize":{1230916614:-360},
"America/Blanc-Sablon":{1230916614:-240},
"America/Boa Vista":{1230916615:-240},
"America/Bogota":{1230916616:-300},
"America/Boise":{1230916617:-420,1236503817:-360,1257063417:-420,1268558217:-360,1289117817:-420,1300007817:-360,1320567417:-420,1331457417:-360,1352017017:-420,1362907017:-360,1383466617:-420,1394356617:-360,1414916217:-420,1425806217:-360,1446365817:-420,1457860617:-360,1478420217:-420,1489310217:-360,1509869817:-420,1520759817:-360,1541319417:-420},
"America/Cambridge Bay":{1230916617:-420,1236503817:-360,1257063417:-420,1268558217:-360,1289117817:-420,1300007817:-360,1320567417:-420,1331457417:-360,1352017017:-420,1362907017:-360,1383466617:-420,1394356617:-360,1414916217:-420,1425806217:-360,1446365817:-420,1457860617:-360,1478420217:-420,1489310217:-360,1509869817:-420,1520759817:-360,1541319417:-420},
"America/Campo Grande":{1230916618:-180,1234667818:-240,1255839418:-180,1266722218:-240,1287289018:-180,1298171818:-240,1318738618:-180,1330226218:-240,1350793018:-180,1361071018:-240,1382242618:-180,1392520618:-240,1413692218:-180,1424575018:-240,1445141818:-180,1456024618:-240,1476591418:-180,1487474218:-240,1508041018:-180,1518923818:-240,1540095418:-180},
"America/Cancun":{1230916619:-360,1238919419:-300,1256455019:-360,1270369019:-300,1288509419:-360,1301818619:-300,1319959019:-360,1333268219:-300,1351408619:-360,1365322619:-300,1382858219:-360,1396772219:-300,1414307819:-360,1428221819:-300,1445757419:-360,1459671419:-300,1477811819:-360,1491121019:-300,1509261419:-360,1522570619:-300,1540711019:-360},
"America/Caracas":{1230916620:-270},
"America/Cayenne":{1230916620:-180},
"America/Cayman":{1230916621:-300},
"America/Chicago":{1230916622:-360,1236500222:-300,1257059822:-360,1268554622:-300,1289114222:-360,1300004222:-300,1320563822:-360,1331453822:-300,1352013422:-360,1362903422:-300,1383463022:-360,1394353022:-300,1414912622:-360,1425802622:-300,1446362222:-360,1457857022:-300,1478416622:-360,1489306622:-300,1509866222:-360,1520756222:-300,1541315822:-360},
"America/Chihuahua":{1230916623:-420,1238923023:-360,1256458623:-420,1270372623:-360,1288513023:-420,1301822223:-360,1319962623:-420,1333271823:-360,1351412223:-420,1365326223:-360,1382861823:-420,1396775823:-360,1414311423:-420,1428225423:-360,1445761023:-420,1459675023:-360,1477815423:-420,1491124623:-360,1509265023:-420,1522574223:-360,1540714623:-420},
"America/Costa Rica":{1230916623:-360},
"America/Cuiaba":{1230916624:-180,1234667824:-240,1255839424:-180,1266722224:-240,1287289024:-180,1298171824:-240,1318738624:-180,1330226224:-240,1350793024:-180,1361071024:-240,1382242624:-180,1392520624:-240,1413692224:-180,1424575024:-240,1445141824:-180,1456024624:-240,1476591424:-180,1487474224:-240,1508041024:-180,1518923824:-240,1540095424:-180},
"America/Curacao":{1230916625:-240},
"America/Danmarkshavn":{1230916626:0},
"America/Dawson":{1230916626:-480,1236507426:-420,1257067026:-480,1268561826:-420,1289121426:-480,1300011426:-420,1320571026:-480,1331461026:-420,1352020626:-480,1362910626:-420,1383470226:-480,1394360226:-420,1414919826:-480,1425809826:-420,1446369426:-480,1457864226:-420,1478423826:-480,1489313826:-420,1509873426:-480,1520763426:-420,1541323026:-480},
"America/Dawson Creek":{1230916627:-420},
"America/Denver":{1230916628:-420,1236503828:-360,1257063428:-420,1268558228:-360,1289117828:-420,1300007828:-360,1320567428:-420,1331457428:-360,1352017028:-420,1362907028:-360,1383466628:-420,1394356628:-360,1414916228:-420,1425806228:-360,1446365828:-420,1457860628:-360,1478420228:-420,1489310228:-360,1509869828:-420,1520759828:-360,1541319428:-420},
"America/Detroit":{1230916629:-300,1236496629:-240,1257056229:-300,1268551029:-240,1289110629:-300,1300000629:-240,1320560229:-300,1331450229:-240,1352009829:-300,1362899829:-240,1383459429:-300,1394349429:-240,1414909029:-300,1425799029:-240,1446358629:-300,1457853429:-240,1478413029:-300,1489303029:-240,1509862629:-300,1520752629:-240,1541312229:-300},
"America/Dominica":{1230916629:-240},
"America/Edmonton":{1230916630:-420,1236503830:-360,1257063430:-420,1268558230:-360,1289117830:-420,1300007830:-360,1320567430:-420,1331457430:-360,1352017030:-420,1362907030:-360,1383466630:-420,1394356630:-360,1414916230:-420,1425806230:-360,1446365830:-420,1457860630:-360,1478420230:-420,1489310230:-360,1509869830:-420,1520759830:-360,1541319430:-420},
"America/Eirunepe":{1230916631:-240},
"America/El Salvador":{1230916632:-360},
"America/Fortaleza":{1230916632:-180},
"America/Glace Bay":{1230916633:-240,1236493033:-180,1257052633:-240,1268547433:-180,1289107033:-240,1299997033:-180,1320556633:-240,1331446633:-180,1352006233:-240,1362896233:-180,1383455833:-240,1394345833:-180,1414905433:-240,1425795433:-180,1446355033:-240,1457849833:-180,1478409433:-240,1489299433:-180,1509859033:-240,1520749033:-180,1541308633:-240},
"America/Godthab":{1230916634:-180,1238289434:-120,1256433434:-180,1269739034:-120,1288487834:-180,1301188634:-120,1319937434:-180,1332638234:-120,1351387034:-180,1364692634:-120,1382836634:-180,1396142234:-120,1414286234:-180,1427591834:-120,1445735834:-180,1459041434:-120,1477790234:-180,1490491034:-120,1509239834:-180,1521940634:-120,1540689434:-180},
"America/Goose Bay":{1230916635:-240,1236485835:-180,1257045435:-240,1268540235:-180,1289099835:-240,1299989835:-180,1320549435:-240,1331439435:-180,1351999035:-240,1362889035:-180,1383448635:-240,1394338635:-180,1414898235:-240,1425788235:-180,1446347835:-240,1457842635:-180,1478402235:-240,1489292235:-180,1509851835:-240,1520741835:-180,1541301435:-240},
"America/Grand Turk":{1230916635:-300,1236496635:-240,1257056235:-300,1268551035:-240,1289110635:-300,1300000635:-240,1320560235:-300,1331450235:-240,1352009835:-300,1362899835:-240,1383459435:-300,1394349435:-240,1414909035:-300,1425799035:-240,1446358635:-300,1457853435:-240,1478413035:-300,1489303035:-240,1509862635:-300,1520752635:-240,1541312235:-300},
"America/Grenada":{1230916636:-240},
"America/Guadeloupe":{1230916637:-240},
"America/Guatemala":{1230916638:-360},
"America/Guayaquil":{1230916638:-300},
"America/Guyana":{1230916639:-240},
"America/Halifax":{1230916640:-240,1236493040:-180,1257052640:-240,1268547440:-180,1289107040:-240,1299997040:-180,1320556640:-240,1331446640:-180,1352006240:-240,1362896240:-180,1383455840:-240,1394345840:-180,1414905440:-240,1425795440:-180,1446355040:-240,1457849840:-180,1478409440:-240,1489299440:-180,1509859040:-240,1520749040:-180,1541308640:-240},
"America/Havana":{1230916641:-300,1237094241:-240,1256447841:-300,1269148641:-240,1288502241:-300,1300598241:-240,1319951841:-300,1332047841:-240,1351401441:-300,1363497441:-240,1382851041:-300,1394947041:-240,1414300641:-300,1426396641:-240,1445750241:-300,1458451041:-240,1477804641:-300,1489900641:-240,1509254241:-300,1521350241:-240,1540703841:-300},
"America/Hermosillo":{1230916641:-420},
"America/Indiana/Indianapolis":{1230916642:-300,1236496642:-240,1257056242:-300,1268551042:-240,1289110642:-300,1300000642:-240,1320560242:-300,1331450242:-240,1352009842:-300,1362899842:-240,1383459442:-300,1394349442:-240,1414909042:-300,1425799042:-240,1446358642:-300,1457853442:-240,1478413042:-300,1489303042:-240,1509862642:-300,1520752642:-240,1541312242:-300},
"America/Indiana/Knox":{1230916643:-360,1236500243:-300,1257059843:-360,1268554643:-300,1289114243:-360,1300004243:-300,1320563843:-360,1331453843:-300,1352013443:-360,1362903443:-300,1383463043:-360,1394353043:-300,1414912643:-360,1425802643:-300,1446362243:-360,1457857043:-300,1478416643:-360,1489306643:-300,1509866243:-360,1520756243:-300,1541315843:-360},
"America/Indiana/Marengo":{1230916644:-300,1236496644:-240,1257056244:-300,1268551044:-240,1289110644:-300,1300000644:-240,1320560244:-300,1331450244:-240,1352009844:-300,1362899844:-240,1383459444:-300,1394349444:-240,1414909044:-300,1425799044:-240,1446358644:-300,1457853444:-240,1478413044:-300,1489303044:-240,1509862644:-300,1520752644:-240,1541312244:-300},
"America/Indiana/Petersburg":{1230916644:-300,1236496644:-240,1257056244:-300,1268551044:-240,1289110644:-300,1300000644:-240,1320560244:-300,1331450244:-240,1352009844:-300,1362899844:-240,1383459444:-300,1394349444:-240,1414909044:-300,1425799044:-240,1446358644:-300,1457853444:-240,1478413044:-300,1489303044:-240,1509862644:-300,1520752644:-240,1541312244:-300},
"America/Indiana/Tell City":{1230916645:-360,1236500245:-300,1257059845:-360,1268554645:-300,1289114245:-360,1300004245:-300,1320563845:-360,1331453845:-300,1352013445:-360,1362903445:-300,1383463045:-360,1394353045:-300,1414912645:-360,1425802645:-300,1446362245:-360,1457857045:-300,1478416645:-360,1489306645:-300,1509866245:-360,1520756245:-300,1541315845:-360},
"America/Indiana/Vevay":{1230916646:-300,1236496646:-240,1257056246:-300,1268551046:-240,1289110646:-300,1300000646:-240,1320560246:-300,1331450246:-240,1352009846:-300,1362899846:-240,1383459446:-300,1394349446:-240,1414909046:-300,1425799046:-240,1446358646:-300,1457853446:-240,1478413046:-300,1489303046:-240,1509862646:-300,1520752646:-240,1541312246:-300},
"America/Indiana/Vincennes":{1230916647:-300,1236496647:-240,1257056247:-300,1268551047:-240,1289110647:-300,1300000647:-240,1320560247:-300,1331450247:-240,1352009847:-300,1362899847:-240,1383459447:-300,1394349447:-240,1414909047:-300,1425799047:-240,1446358647:-300,1457853447:-240,1478413047:-300,1489303047:-240,1509862647:-300,1520752647:-240,1541312247:-300},
"America/Indiana/Winamac":{1230916647:-300,1236496647:-240,1257056247:-300,1268551047:-240,1289110647:-300,1300000647:-240,1320560247:-300,1331450247:-240,1352009847:-300,1362899847:-240,1383459447:-300,1394349447:-240,1414909047:-300,1425799047:-240,1446358647:-300,1457853447:-240,1478413047:-300,1489303047:-240,1509862647:-300,1520752647:-240,1541312247:-300},
"America/Inuvik":{1230916648:-420,1236503848:-360,1257063448:-420,1268558248:-360,1289117848:-420,1300007848:-360,1320567448:-420,1331457448:-360,1352017048:-420,1362907048:-360,1383466648:-420,1394356648:-360,1414916248:-420,1425806248:-360,1446365848:-420,1457860648:-360,1478420248:-420,1489310248:-360,1509869848:-420,1520759848:-360,1541319448:-420},
"America/Iqaluit":{1230916649:-300,1236496649:-240,1257056249:-300,1268551049:-240,1289110649:-300,1300000649:-240,1320560249:-300,1331450249:-240,1352009849:-300,1362899849:-240,1383459449:-300,1394349449:-240,1414909049:-300,1425799049:-240,1446358649:-300,1457853449:-240,1478413049:-300,1489303049:-240,1509862649:-300,1520752649:-240,1541312249:-300},
"America/Jamaica":{1230916650:-300},
"America/Juneau":{1230916650:-540,1236511050:-480,1257070650:-540,1268565450:-480,1289125050:-540,1300015050:-480,1320574650:-540,1331464650:-480,1352024250:-540,1362914250:-480,1383473850:-540,1394363850:-480,1414923450:-540,1425813450:-480,1446373050:-540,1457867850:-480,1478427450:-540,1489317450:-480,1509877050:-540,1520767050:-480,1541326650:-540},
"America/Kentucky/Louisville":{1230916651:-300,1236496651:-240,1257056251:-300,1268551051:-240,1289110651:-300,1300000651:-240,1320560251:-300,1331450251:-240,1352009851:-300,1362899851:-240,1383459451:-300,1394349451:-240,1414909051:-300,1425799051:-240,1446358651:-300,1457853451:-240,1478413051:-300,1489303051:-240,1509862651:-300,1520752651:-240,1541312251:-300},
"America/Kentucky/Monticello":{1230916652:-300,1236496652:-240,1257056252:-300,1268551052:-240,1289110652:-300,1300000652:-240,1320560252:-300,1331450252:-240,1352009852:-300,1362899852:-240,1383459452:-300,1394349452:-240,1414909052:-300,1425799052:-240,1446358652:-300,1457853452:-240,1478413052:-300,1489303052:-240,1509862652:-300,1520752652:-240,1541312252:-300},
"America/La Paz":{1230916653:-240},
"America/Lima":{1230916653:-300},
"America/Los Angeles":{1230916654:-480,1236507454:-420,1257067054:-480,1268561854:-420,1289121454:-480,1300011454:-420,1320571054:-480,1331461054:-420,1352020654:-480,1362910654:-420,1383470254:-480,1394360254:-420,1414919854:-480,1425809854:-420,1446369454:-480,1457864254:-420,1478423854:-480,1489313854:-420,1509873454:-480,1520763454:-420,1541323054:-480},
"America/Maceio":{1230916655:-180},
"America/Managua":{1230916656:-360},
"America/Manaus":{1230916656:-240},
"America/Martinique":{1230916657:-240},
"America/Mazatlan":{1230916658:-420,1238923058:-360,1256458658:-420,1270372658:-360,1288513058:-420,1301822258:-360,1319962658:-420,1333271858:-360,1351412258:-420,1365326258:-360,1382861858:-420,1396775858:-360,1414311458:-420,1428225458:-360,1445761058:-420,1459675058:-360,1477815458:-420,1491124658:-360,1509265058:-420,1522574258:-360,1540714658:-420},
"America/Menominee":{1230916659:-360,1236500259:-300,1257059859:-360,1268554659:-300,1289114259:-360,1300004259:-300,1320563859:-360,1331453859:-300,1352013459:-360,1362903459:-300,1383463059:-360,1394353059:-300,1414912659:-360,1425802659:-300,1446362259:-360,1457857059:-300,1478416659:-360,1489306659:-300,1509866259:-360,1520756259:-300,1541315859:-360},
"America/Merida":{1230916659:-360,1238919459:-300,1256455059:-360,1270369059:-300,1288509459:-360,1301818659:-300,1319959059:-360,1333268259:-300,1351408659:-360,1365322659:-300,1382858259:-360,1396772259:-300,1414307859:-360,1428221859:-300,1445757459:-360,1459671459:-300,1477811859:-360,1491121059:-300,1509261459:-360,1522570659:-300,1540711059:-360},
"America/Mexico City":{1230916660:-360,1238919460:-300,1256455060:-360,1270369060:-300,1288509460:-360,1301818660:-300,1319959060:-360,1333268260:-300,1351408660:-360,1365322660:-300,1382858260:-360,1396772260:-300,1414307860:-360,1428221860:-300,1445757460:-360,1459671460:-300,1477811860:-360,1491121060:-300,1509261460:-360,1522570660:-300,1540711060:-360},
"America/Miquelon":{1230916661:-180,1236489461:-120,1257049061:-180,1268543861:-120,1289103461:-180,1299993461:-120,1320553061:-180,1331443061:-120,1352002661:-180,1362892661:-120,1383452261:-180,1394342261:-120,1414901861:-180,1425791861:-120,1446351461:-180,1457846261:-120,1478405861:-180,1489295861:-120,1509855461:-180,1520745461:-120,1541305061:-180},
"America/Moncton":{1230916662:-240,1236493062:-180,1257052662:-240,1268547462:-180,1289107062:-240,1299997062:-180,1320556662:-240,1331446662:-180,1352006262:-240,1362896262:-180,1383455862:-240,1394345862:-180,1414905462:-240,1425795462:-180,1446355062:-240,1457849862:-180,1478409462:-240,1489299462:-180,1509859062:-240,1520749062:-180,1541308662:-240},
"America/Monterrey":{1230916662:-360,1238919462:-300,1256455062:-360,1270369062:-300,1288509462:-360,1301818662:-300,1319959062:-360,1333268262:-300,1351408662:-360,1365322662:-300,1382858262:-360,1396772262:-300,1414307862:-360,1428221862:-300,1445757462:-360,1459671462:-300,1477811862:-360,1491121062:-300,1509261462:-360,1522570662:-300,1540711062:-360},
"America/Montevideo":{1230916663:-120,1236485863:-180,1254633463:-120,1268540263:-180,1286083063:-120,1299989863:-180,1317532663:-120,1331439463:-180,1349587063:-120,1362889063:-180,1381036663:-120,1394338663:-180,1412486263:-120,1425788263:-180,1443935863:-120,1457842663:-180,1475385463:-120,1489292263:-180,1506835063:-120,1520741863:-180,1538889463:-120},
"America/Montreal":{1230916664:-300,1236496664:-240,1257056264:-300,1268551064:-240,1289110664:-300,1300000664:-240,1320560264:-300,1331450264:-240,1352009864:-300,1362899864:-240,1383459464:-300,1394349464:-240,1414909064:-300,1425799064:-240,1446358664:-300,1457853464:-240,1478413064:-300,1489303064:-240,1509862664:-300,1520752664:-240,1541312264:-300},
"America/Montserrat":{1230916665:-240},
"America/Nassau":{1230916665:-300,1236496665:-240,1257056265:-300,1268551065:-240,1289110665:-300,1300000665:-240,1320560265:-300,1331450265:-240,1352009865:-300,1362899865:-240,1383459465:-300,1394349465:-240,1414909065:-300,1425799065:-240,1446358665:-300,1457853465:-240,1478413065:-300,1489303065:-240,1509862665:-300,1520752665:-240,1541312265:-300},
"America/New York":{1230916666:-300,1236496666:-240,1257056266:-300,1268551066:-240,1289110666:-300,1300000666:-240,1320560266:-300,1331450266:-240,1352009866:-300,1362899866:-240,1383459466:-300,1394349466:-240,1414909066:-300,1425799066:-240,1446358666:-300,1457853466:-240,1478413066:-300,1489303066:-240,1509862666:-300,1520752666:-240,1541312266:-300},
"America/Nipigon":{1230916667:-300,1236496667:-240,1257056267:-300,1268551067:-240,1289110667:-300,1300000667:-240,1320560267:-300,1331450267:-240,1352009867:-300,1362899867:-240,1383459467:-300,1394349467:-240,1414909067:-300,1425799067:-240,1446358667:-300,1457853467:-240,1478413067:-300,1489303067:-240,1509862667:-300,1520752667:-240,1541312267:-300},
"America/Nome":{1230916668:-540,1236511068:-480,1257070668:-540,1268565468:-480,1289125068:-540,1300015068:-480,1320574668:-540,1331464668:-480,1352024268:-540,1362914268:-480,1383473868:-540,1394363868:-480,1414923468:-540,1425813468:-480,1446373068:-540,1457867868:-480,1478427468:-540,1489317468:-480,1509877068:-540,1520767068:-480,1541326668:-540},
"America/Noronha":{1230916669:-120},
"America/North Dakota/Center":{1230916669:-360,1236500269:-300,1257059869:-360,1268554669:-300,1289114269:-360,1300004269:-300,1320563869:-360,1331453869:-300,1352013469:-360,1362903469:-300,1383463069:-360,1394353069:-300,1414912669:-360,1425802669:-300,1446362269:-360,1457857069:-300,1478416669:-360,1489306669:-300,1509866269:-360,1520756269:-300,1541315869:-360},
"America/North Dakota/New Salem":{1230916670:-360,1236500270:-300,1257059870:-360,1268554670:-300,1289114270:-360,1300004270:-300,1320563870:-360,1331453870:-300,1352013470:-360,1362903470:-300,1383463070:-360,1394353070:-300,1414912670:-360,1425802670:-300,1446362270:-360,1457857070:-300,1478416670:-360,1489306670:-300,1509866270:-360,1520756270:-300,1541315870:-360},
"America/Panama":{1230916671:-300},
"America/Pangnirtung":{1230916672:-300,1236496672:-240,1257056272:-300,1268551072:-240,1289110672:-300,1300000672:-240,1320560272:-300,1331450272:-240,1352009872:-300,1362899872:-240,1383459472:-300,1394349472:-240,1414909072:-300,1425799072:-240,1446358672:-300,1457853472:-240,1478413072:-300,1489303072:-240,1509862672:-300,1520752672:-240,1541312272:-300},
"America/Paramaribo":{1230916672:-180},
"America/Phoenix":{1230916673:-420},
"America/Port of Spain":{1230916674:-240},
"America/Port-au-Prince":{1230916674:-300},
"America/Porto Velho":{1230916675:-240},
"America/Puerto Rico":{1230916676:-240},
"America/Rainy River":{1230916677:-360,1236500277:-300,1257059877:-360,1268554677:-300,1289114277:-360,1300004277:-300,1320563877:-360,1331453877:-300,1352013477:-360,1362903477:-300,1383463077:-360,1394353077:-300,1414912677:-360,1425802677:-300,1446362277:-360,1457857077:-300,1478416677:-360,1489306677:-300,1509866277:-360,1520756277:-300,1541315877:-360},
"America/Rankin Inlet":{1230916677:-360,1236500277:-300,1257059877:-360,1268554677:-300,1289114277:-360,1300004277:-300,1320563877:-360,1331453877:-300,1352013477:-360,1362903477:-300,1383463077:-360,1394353077:-300,1414912677:-360,1425802677:-300,1446362277:-360,1457857077:-300,1478416677:-360,1489306677:-300,1509866277:-360,1520756277:-300,1541315877:-360},
"America/Recife":{1230916678:-180},
"America/Regina":{1230916679:-360},
"America/Resolute":{1230916680:-300},
"America/Rio Branco":{1230916680:-240},
"America/Santarem":{1230916681:-180},
"America/Santiago":{1230916682:-180,1237087082:-240,1255234682:-180,1268536682:-240,1286684282:-180,1299986282:-240,1318133882:-180,1331435882:-240,1350188282:-180,1362885482:-240,1381637882:-180,1394335082:-240,1413087482:-180,1426389482:-240,1444537082:-180,1457839082:-240,1475986682:-180,1489288682:-240,1508041082:-180,1520738282:-240,1539490682:-180},
"America/Santo Domingo":{1230916683:-240},
"America/Sao Paulo":{1230916683:-120,1234664283:-180,1255835883:-120,1266718683:-180,1287285483:-120,1298168283:-180,1318735083:-120,1330222683:-180,1350789483:-120,1361067483:-180,1382239083:-120,1392517083:-180,1413688683:-120,1424571483:-180,1445138283:-120,1456021083:-180,1476587883:-120,1487470683:-180,1508037483:-120,1518920283:-180,1540091883:-120},
"America/Scoresbysund":{1230916684:-60,1238289484:0,1256433484:-60,1269739084:0,1288487884:-60,1301188684:0,1319937484:-60,1332638284:0,1351387084:-60,1364692684:0,1382836684:-60,1396142284:0,1414286284:-60,1427591884:0,1445735884:-60,1459041484:0,1477790284:-60,1490491084:0,1509239884:-60,1521940684:0,1540689484:-60},
"America/St Johns":{1230916685:-210,1236485885:-150,1257045485:-210,1268540285:-150,1289099885:-210,1299989885:-150,1320549485:-210,1331439485:-150,1351999085:-210,1362889085:-150,1383448685:-210,1394338685:-150,1414898285:-210,1425788285:-150,1446347885:-210,1457842685:-150,1478402285:-210,1489292285:-150,1509851885:-210,1520741885:-150,1541301485:-210},
"America/St Kitts":{1230916686:-240},
"America/St Lucia":{1230916686:-240},
"America/St Thomas":{1230916687:-240},
"America/St Vincent":{1230916688:-240},
"America/Swift Current":{1230916689:-360},
"America/Tegucigalpa":{1230916689:-360},
"America/Thule":{1230916690:-240,1236493090:-180,1257052690:-240,1268547490:-180,1289107090:-240,1299997090:-180,1320556690:-240,1331446690:-180,1352006290:-240,1362896290:-180,1383455890:-240,1394345890:-180,1414905490:-240,1425795490:-180,1446355090:-240,1457849890:-180,1478409490:-240,1489299490:-180,1509859090:-240,1520749090:-180,1541308690:-240},
"America/Thunder Bay":{1230916691:-300,1236496691:-240,1257056291:-300,1268551091:-240,1289110691:-300,1300000691:-240,1320560291:-300,1331450291:-240,1352009891:-300,1362899891:-240,1383459491:-300,1394349491:-240,1414909091:-300,1425799091:-240,1446358691:-300,1457853491:-240,1478413091:-300,1489303091:-240,1509862691:-300,1520752691:-240,1541312291:-300},
"America/Tijuana":{1230916692:-480,1238926692:-420,1256462292:-480,1270376292:-420,1288516692:-480,1301825892:-420,1319966292:-480,1333275492:-420,1351415892:-480,1365329892:-420,1382865492:-480,1396779492:-420,1414315092:-480,1428229092:-420,1445764692:-480,1459678692:-420,1477819092:-480,1491128292:-420,1509268692:-480,1522577892:-420,1540718292:-480},
"America/Toronto":{1230916692:-300,1236496692:-240,1257056292:-300,1268551092:-240,1289110692:-300,1300000692:-240,1320560292:-300,1331450292:-240,1352009892:-300,1362899892:-240,1383459492:-300,1394349492:-240,1414909092:-300,1425799092:-240,1446358692:-300,1457853492:-240,1478413092:-300,1489303092:-240,1509862692:-300,1520752692:-240,1541312292:-300},
"America/Tortola":{1230916693:-240},
"America/Vancouver":{1230916694:-480,1236507494:-420,1257067094:-480,1268561894:-420,1289121494:-480,1300011494:-420,1320571094:-480,1331461094:-420,1352020694:-480,1362910694:-420,1383470294:-480,1394360294:-420,1414919894:-480,1425809894:-420,1446369494:-480,1457864294:-420,1478423894:-480,1489313894:-420,1509873494:-480,1520763494:-420,1541323094:-480},
"America/Whitehorse":{1230916695:-480,1236507495:-420,1257067095:-480,1268561895:-420,1289121495:-480,1300011495:-420,1320571095:-480,1331461095:-420,1352020695:-480,1362910695:-420,1383470295:-480,1394360295:-420,1414919895:-480,1425809895:-420,1446369495:-480,1457864295:-420,1478423895:-480,1489313895:-420,1509873495:-480,1520763495:-420,1541323095:-480},
"America/Winnipeg":{1230916695:-360,1236500295:-300,1257059895:-360,1268554695:-300,1289114295:-360,1300004295:-300,1320563895:-360,1331453895:-300,1352013495:-360,1362903495:-300,1383463095:-360,1394353095:-300,1414912695:-360,1425802695:-300,1446362295:-360,1457857095:-300,1478416695:-360,1489306695:-300,1509866295:-360,1520756295:-300,1541315895:-360},
"America/Yakutat":{1230916696:-540,1236511096:-480,1257070696:-540,1268565496:-480,1289125096:-540,1300015096:-480,1320574696:-540,1331464696:-480,1352024296:-540,1362914296:-480,1383473896:-540,1394363896:-480,1414923496:-540,1425813496:-480,1446373096:-540,1457867896:-480,1478427496:-540,1489317496:-480,1509877096:-540,1520767096:-480,1541326696:-540},
"America/Yellowknife":{1230916697:-420,1236503897:-360,1257063497:-420,1268558297:-360,1289117897:-420,1300007897:-360,1320567497:-420,1331457497:-360,1352017097:-420,1362907097:-360,1383466697:-420,1394356697:-360,1414916297:-420,1425806297:-360,1446365897:-420,1457860697:-360,1478420297:-420,1489310297:-360,1509869897:-420,1520759897:-360,1541319497:-420},
"Antarctica/Casey":{1230916698:480},
"Antarctica/Davis":{1230916698:420},
"Antarctica/DumontDUrville":{1230916699:600},
"Antarctica/Mawson":{1230916700:360},
"Antarctica/McMurdo":{1230916701:780,1238854701:720,1253974701:780,1270304301:720,1285424301:780,1301753901:720,1316873901:780,1333203501:720,1348928301:780,1365257901:720,1380377901:780,1396707501:720,1411827501:780,1428157101:720,1443277101:780,1459606701:720,1474726701:780,1491056301:720,1506176301:780,1522505901:720,1538230701:780},
"Antarctica/Palmer":{1230916701:-180,1237087101:-240,1255234701:-180,1268536701:-240,1286684301:-180,1299986301:-240,1318133901:-180,1331435901:-240,1350188301:-180,1362885501:-240,1381637901:-180,1394335101:-240,1413087501:-180,1426389501:-240,1444537101:-180,1457839101:-240,1475986701:-180,1489288701:-240,1508041101:-180,1520738301:-240,1539490701:-180},
"Antarctica/Rothera":{1230916702:-180},
"Antarctica/Syowa":{1230916703:180},
"Antarctica/Vostok":{1230916703:360},
"Asia/Aden":{1230916704:180},
"Asia/Almaty":{1230916705:360},
"Asia/Amman":{1230916706:120,1238019506:180,1256854706:120,1269469106:180,1288304306:120,1301523506:180,1319753906:120,1332973106:180,1351203506:120,1364422706:180,1382653106:120,1395872306:180,1414707506:120,1427321906:180,1446157106:120,1459376306:180,1477606706:120,1490825906:180,1509056306:120,1522275506:180,1540505906:120},
"Asia/Anadyr":{1230916706:720,1238249906:780,1256393906:720,1269699506:780,1288448306:720,1301149106:780,1319897906:720,1332598706:780,1351347506:720,1364653106:780,1382797106:720,1396102706:780,1414246706:720,1427552306:780,1445696306:720,1459001906:780,1477750706:720,1490451506:780,1509200306:720,1521901106:780,1540649906:720},
"Asia/Aqtau":{1230916707:300},
"Asia/Aqtobe":{1230916708:300},
"Asia/Ashgabat":{1230916709:300},
"Asia/Baghdad":{1230916709:180},
"Asia/Bahrain":{1230916710:180},
"Asia/Baku":{1230916711:240,1238285911:300,1256429911:240,1269735511:300,1288484311:240,1301185111:300,1319933911:240,1332634711:300,1351383511:240,1364689111:300,1382833111:240,1396138711:300,1414282711:240,1427588311:300,1445732311:240,1459037911:300,1477786711:240,1490487511:300,1509236311:240,1521937111:300,1540685911:240},
"Asia/Bangkok":{1230916712:420},
"Asia/Beirut":{1230916712:120,1238278712:180,1256419112:120,1269728312:180,1288473512:120,1301177912:180,1319923112:120,1332627512:180,1351372712:120,1364681912:180,1382822312:120,1396131512:180,1414271912:120,1427581112:180,1445721512:120,1459030712:180,1477775912:120,1490480312:180,1509225512:120,1521929912:180,1540675112:120},
"Asia/Bishkek":{1230916713:360},
"Asia/Brunei":{1230916714:480},
"Asia/Choibalsan":{1230916715:480},
"Asia/Chongqing":{1230916715:480},
"Asia/Colombo":{1230916716:330},
"Asia/Damascus":{1230916717:120,1238710717:180,1257023917:120,1270160317:180,1288559917:120,1301609917:180,1320095917:120,1333664317:180,1351718317:120,1365113917:180,1383254317:120,1396563517:180,1414790317:120,1428013117:180,1446326317:120,1459462717:180,1477948717:120,1491517117:180,1509484717:120,1522966717:180,1541020717:120},
"Asia/Dhaka":{1230916717:360},
"Asia/Dili":{1230916718:540},
"Asia/Dubai":{1230916719:240},
"Asia/Dushanbe":{1230916720:300},
"Asia/Gaza":{1230916720:120,1238537920:180,1251328720:120,1270073920:180,1282778320:120,1301609920:180,1314227920:120,1333232320:180,1346282320:120,1364768320:180,1377731920:120,1396304320:180,1409181520:120,1427840320:180,1440631120:120,1459462720:180,1472080720:120,1490998720:180,1504135120:120,1522534720:180,1535584720:120},
"Asia/Harbin":{1230916721:480},
"Asia/Ho Chi Minh":{1230916722:420},
"Asia/Hong Kong":{1230916723:480},
"Asia/Hovd":{1230916723:420},
"Asia/Irkutsk":{1230916724:480,1238264324:540,1256408324:480,1269713924:540,1288462724:480,1301163524:540,1319912324:480,1332613124:540,1351361924:480,1364667524:540,1382811524:480,1396117124:540,1414261124:480,1427566724:540,1445710724:480,1459016324:540,1477765124:480,1490465924:540,1509214724:480,1521915524:540,1540664324:480},
"Asia/Jakarta":{1230916725:420},
"Asia/Jayapura":{1230916726:540},
"Asia/Jerusalem":{1230916726:120,1238113126:180,1254007126:120,1269562726:180,1284247126:120,1301617126:180,1317511126:120,1333066726:180,1348355926:120,1364516326:180,1378595926:120,1395965926:180,1411859926:120,1427415526:180,1442704726:120,1459469926:180,1475968726:120,1490919526:180,1506208726:120,1522369126:180,1537053526:120},
"Asia/Kabul":{1230916727:270},
"Asia/Kamchatka":{1230916728:720,1238249928:780,1256393928:720,1269699528:780,1288448328:720,1301149128:780,1319897928:720,1332598728:780,1351347528:720,1364653128:780,1382797128:720,1396102728:780,1414246728:720,1427552328:780,1445696328:720,1459001928:780,1477750728:720,1490451528:780,1509200328:720,1521901128:780,1540649928:720},
"Asia/Karachi":{1230916729:300},
"Asia/Kashgar":{1230916729:480},
"Asia/Katmandu":{1230916730:345},
"Asia/Kolkata":{1230916731:330},
"Asia/Krasnoyarsk":{1230916731:420,1238267931:480,1256411931:420,1269717531:480,1288466331:420,1301167131:480,1319915931:420,1332616731:480,1351365531:420,1364671131:480,1382815131:420,1396120731:480,1414264731:420,1427570331:480,1445714331:420,1459019931:480,1477768731:420,1490469531:480,1509218331:420,1521919131:480,1540667931:420},
"Asia/Kuala Lumpur":{1230916732:480},
"Asia/Kuching":{1230916733:480},
"Asia/Kuwait":{1230916734:180},
"Asia/Macau":{1230916734:480},
"Asia/Magadan":{1230916735:660,1238253535:720,1256397535:660,1269703135:720,1288451935:660,1301152735:720,1319901535:660,1332602335:720,1351351135:660,1364656735:720,1382800735:660,1396106335:720,1414250335:660,1427555935:720,1445699935:660,1459005535:720,1477754335:660,1490455135:720,1509203935:660,1521904735:720,1540653535:660},
"Asia/Makassar":{1230916736:480},
"Asia/Manila":{1230916737:480},
"Asia/Muscat":{1230916737:240},
"Asia/New Delhi":{1230916738:330},
"Asia/Nicosia":{1230916739:120,1238289539:180,1256433539:120,1269739139:180,1288487939:120,1301188739:180,1319937539:120,1332638339:180,1351387139:120,1364692739:180,1382836739:120,1396142339:180,1414286339:120,1427591939:180,1445735939:120,1459041539:180,1477790339:120,1490491139:180,1509239939:120,1521940739:180,1540689539:120},
"Asia/Novosibirsk":{1230916740:360,1238271540:420,1256415540:360,1269721140:420,1288469940:360,1301170740:420,1319919540:360,1332620340:420,1351369140:360,1364674740:420,1382818740:360,1396124340:420,1414268340:360,1427573940:420,1445717940:360,1459023540:420,1477772340:360,1490473140:420,1509221940:360,1521922740:420,1540671540:360},
"Asia/Omsk":{1230916740:360,1238271540:420,1256415540:360,1269721140:420,1288469940:360,1301170740:420,1319919540:360,1332620340:420,1351369140:360,1364674740:420,1382818740:360,1396124340:420,1414268340:360,1427573940:420,1445717940:360,1459023540:420,1477772340:360,1490473140:420,1509221940:360,1521922740:420,1540671540:360},
"Asia/Oral":{1230916741:300},
"Asia/Phnom Penh":{1230916742:420},
"Asia/Pontianak":{1230916743:420},
"Asia/Pyongyang":{1230916743:540},
"Asia/Qatar":{1230916744:180},
"Asia/Qyzylorda":{1230916745:360},
"Asia/Rangoon":{1230916745:390},
"Asia/Riyadh":{1230916746:180},
"Asia/Sakhalin":{1230916747:600,1238257147:660,1256401147:600,1269706747:660,1288455547:600,1301156347:660,1319905147:600,1332605947:660,1351354747:600,1364660347:660,1382804347:600,1396109947:660,1414253947:600,1427559547:660,1445703547:600,1459009147:660,1477757947:600,1490458747:660,1509207547:600,1521908347:660,1540657147:600},
"Asia/Samarkand":{1230916748:300},
"Asia/Seoul":{1230916748:540},
"Asia/Shanghai":{1230916749:480},
"Asia/Singapore":{1230916750:480},
"Asia/Taipei":{1230916751:480},
"Asia/Tashkent":{1230916751:300},
"Asia/Tbilisi":{1230916752:240},
"Asia/Tehran":{1230916753:210,1237670353:270,1253564353:210,1269206353:270,1285100353:210,1300742353:270,1316636353:210,1332278353:270,1348172353:210,1363900753:270,1379794753:210,1395436753:270,1411330753:210,1426972753:270,1442866753:210,1458508753:270,1474402753:210,1490131153:270,1506025153:210,1521667153:270,1537561153:210},
"Asia/Thimphu":{1230916754:360},
"Asia/Tokyo":{1230916754:540},
"Asia/Ulaanbaatar":{1230916755:480},
"Asia/Urumqi":{1230916756:480},
"Asia/Vientiane":{1230916756:420},
"Asia/Vladivostok":{1230916757:600,1238257157:660,1256401157:600,1269706757:660,1288455557:600,1301156357:660,1319905157:600,1332605957:660,1351354757:600,1364660357:660,1382804357:600,1396109957:660,1414253957:600,1427559557:660,1445703557:600,1459009157:660,1477757957:600,1490458757:660,1509207557:600,1521908357:660,1540657157:600},
"Asia/Yakutsk":{1230916758:540,1238260758:600,1256404758:540,1269710358:600,1288459158:540,1301159958:600,1319908758:540,1332609558:600,1351358358:540,1364663958:600,1382807958:540,1396113558:600,1414257558:540,1427563158:600,1445707158:540,1459012758:600,1477761558:540,1490462358:600,1509211158:540,1521911958:600,1540660758:540},
"Asia/Yekaterinburg":{1230916759:300,1238275159:360,1256419159:300,1269724759:360,1288473559:300,1301174359:360,1319923159:300,1332623959:360,1351372759:300,1364678359:360,1382822359:300,1396127959:360,1414271959:300,1427577559:360,1445721559:300,1459027159:360,1477775959:300,1490476759:360,1509225559:300,1521926359:360,1540675159:300},
"Asia/Yerevan":{1230916759:240,1238278759:300,1256422759:240,1269728359:300,1288477159:240,1301177959:300,1319926759:240,1332627559:300,1351376359:240,1364681959:300,1382825959:240,1396131559:300,1414275559:240,1427581159:300,1445725159:240,1459030759:300,1477779559:240,1490480359:300,1509229159:240,1521929959:300,1540678759:240},
"Atlantic/Azores":{1230916760:-60,1238289560:0,1256433560:-60,1269739160:0,1288487960:-60,1301188760:0,1319937560:-60,1332638360:0,1351387160:-60,1364692760:0,1382836760:-60,1396142360:0,1414286360:-60,1427591960:0,1445735960:-60,1459041560:0,1477790360:-60,1490491160:0,1509239960:-60,1521940760:0,1540689560:-60},
"Atlantic/Bermuda":{1230916761:-240,1236493161:-180,1257052761:-240,1268547561:-180,1289107161:-240,1299997161:-180,1320556761:-240,1331446761:-180,1352006361:-240,1362896361:-180,1383455961:-240,1394345961:-180,1414905561:-240,1425795561:-180,1446355161:-240,1457849961:-180,1478409561:-240,1489299561:-180,1509859161:-240,1520749161:-180,1541308761:-240},
"Atlantic/Canary":{1230916762:0,1238289562:60,1256433562:0,1269739162:60,1288487962:0,1301188762:60,1319937562:0,1332638362:60,1351387162:0,1364692762:60,1382836762:0,1396142362:60,1414286362:0,1427591962:60,1445735962:0,1459041562:60,1477790362:0,1490491162:60,1509239962:0,1521940762:60,1540689562:0},
"Atlantic/Cape Verde":{1230916762:-60},
"Atlantic/Faroe":{1230916763:0,1238289563:60,1256433563:0,1269739163:60,1288487963:0,1301188763:60,1319937563:0,1332638363:60,1351387163:0,1364692763:60,1382836763:0,1396142363:60,1414286363:0,1427591963:60,1445735963:0,1459041563:60,1477790363:0,1490491163:60,1509239963:0,1521940763:60,1540689563:0},
"Atlantic/Madeira":{1230916764:0,1238289564:60,1256433564:0,1269739164:60,1288487964:0,1301188764:60,1319937564:0,1332638364:60,1351387164:0,1364692764:60,1382836764:0,1396142364:60,1414286364:0,1427591964:60,1445735964:0,1459041564:60,1477790364:0,1490491164:60,1509239964:0,1521940764:60,1540689564:0},
"Atlantic/Reykjavik":{1230916765:0},
"Atlantic/South Georgia":{1230916765:-120},
"Atlantic/St Helena":{1230916766:0},
"Atlantic/Stanley":{1230916767:-180,1240118367:-240,1252217967:-180,1271567967:-240,1283667567:-180,1303017567:-240,1315117167:-180,1334467167:-240,1346566767:-180,1366521567:-240,1378016367:-180,1397971167:-240,1410070767:-180,1429420767:-240,1441520367:-180,1460870367:-240,1472969967:-180,1492319967:-240,1504419567:-180,1523769567:-240,1535869167:-180},
"Australia/Adelaide":{1230916767:630,1238865567:570,1254590367:630,1270315167:570,1286039967:630,1301764767:570,1317489567:630,1333214367:570,1349543967:630,1365268767:570,1380993567:630,1396718367:570,1412443167:630,1428167967:570,1443892767:630,1459617567:570,1475342367:630,1491067167:570,1506791967:630,1522516767:570,1538846367:630},
"Australia/Brisbane":{1230916768:600},
"Australia/Broken Hill":{1230916769:630,1238865569:570,1254590369:630,1270315169:570,1286039969:630,1301764769:570,1317489569:630,1333214369:570,1349543969:630,1365268769:570,1380993569:630,1396718369:570,1412443169:630,1428167969:570,1443892769:630,1459617569:570,1475342369:630,1491067169:570,1506791969:630,1522516769:570,1538846369:630},
"Australia/Currie":{1230916770:660,1238861970:600,1254586770:660,1270311570:600,1286036370:660,1301761170:600,1317485970:660,1333210770:600,1349540370:660,1365265170:600,1380989970:660,1396714770:600,1412439570:660,1428164370:600,1443889170:660,1459613970:600,1475338770:660,1491063570:600,1506788370:660,1522513170:600,1538842770:660},
"Australia/Darwin":{1230916770:570},
"Australia/Eucla":{1230916771:585,1238260771:525},
"Australia/Hobart":{1230916772:660,1238861972:600,1254586772:660,1270311572:600,1286036372:660,1301761172:600,1317485972:660,1333210772:600,1349540372:660,1365265172:600,1380989972:660,1396714772:600,1412439572:660,1428164372:600,1443889172:660,1459613972:600,1475338772:660,1491063572:600,1506788372:660,1522513172:600,1538842772:660},
"Australia/Lindeman":{1230916773:600},
"Australia/Lord Howe":{1230916773:660,1238858373:630,1254586773:660,1270307973:630,1286036373:660,1301757573:630,1317485973:660,1333207173:630,1349540373:660,1365261573:630,1380989973:660,1396711173:630,1412439573:660,1428160773:630,1443889173:660,1459610373:630,1475338773:660,1491059973:630,1506788373:660,1522509573:630,1538842773:660},
"Australia/Melbourne":{1230916774:660,1238861974:600,1254586774:660,1270311574:600,1286036374:660,1301761174:600,1317485974:660,1333210774:600,1349540374:660,1365265174:600,1380989974:660,1396714774:600,1412439574:660,1428164374:600,1443889174:660,1459613974:600,1475338774:660,1491063574:600,1506788374:660,1522513174:600,1538842774:660},
"Australia/Perth":{1230916775:540,1238264375:480},
"Australia/Sydney":{1230916776:660,1238861976:600,1254586776:660,1270311576:600,1286036376:660,1301761176:600,1317485976:660,1333210776:600,1349540376:660,1365265176:600,1380989976:660,1396714776:600,1412439576:660,1428164376:600,1443889176:660,1459613976:600,1475338776:660,1491063576:600,1506788376:660,1522513176:600,1538842776:660},
"Europe/Amsterdam":{1230916776:60,1238289576:120,1256433576:60,1269739176:120,1288487976:60,1301188776:120,1319937576:60,1332638376:120,1351387176:60,1364692776:120,1382836776:60,1396142376:120,1414286376:60,1427591976:120,1445735976:60,1459041576:120,1477790376:60,1490491176:120,1509239976:60,1521940776:120,1540689576:60},
"Europe/Andorra":{1230916777:60,1238289577:120,1256433577:60,1269739177:120,1288487977:60,1301188777:120,1319937577:60,1332638377:120,1351387177:60,1364692777:120,1382836777:60,1396142377:120,1414286377:60,1427591977:120,1445735977:60,1459041577:120,1477790377:60,1490491177:120,1509239977:60,1521940777:120,1540689577:60},
"Europe/Athens":{1230916778:120,1238289578:180,1256433578:120,1269739178:180,1288487978:120,1301188778:180,1319937578:120,1332638378:180,1351387178:120,1364692778:180,1382836778:120,1396142378:180,1414286378:120,1427591978:180,1445735978:120,1459041578:180,1477790378:120,1490491178:180,1509239978:120,1521940778:180,1540689578:120},
"Europe/Belgrade":{1230916779:60,1238289579:120,1256433579:60,1269739179:120,1288487979:60,1301188779:120,1319937579:60,1332638379:120,1351387179:60,1364692779:120,1382836779:60,1396142379:120,1414286379:60,1427591979:120,1445735979:60,1459041579:120,1477790379:60,1490491179:120,1509239979:60,1521940779:120,1540689579:60},
"Europe/Berlin":{1230916779:60,1238289579:120,1256433579:60,1269739179:120,1288487979:60,1301188779:120,1319937579:60,1332638379:120,1351387179:60,1364692779:120,1382836779:60,1396142379:120,1414286379:60,1427591979:120,1445735979:60,1459041579:120,1477790379:60,1490491179:120,1509239979:60,1521940779:120,1540689579:60},
"Europe/Brussels":{1230916780:60,1238289580:120,1256433580:60,1269739180:120,1288487980:60,1301188780:120,1319937580:60,1332638380:120,1351387180:60,1364692780:120,1382836780:60,1396142380:120,1414286380:60,1427591980:120,1445735980:60,1459041580:120,1477790380:60,1490491180:120,1509239980:60,1521940780:120,1540689580:60},
"Europe/Bucharest":{1230916781:120,1238289581:180,1256433581:120,1269739181:180,1288487981:120,1301188781:180,1319937581:120,1332638381:180,1351387181:120,1364692781:180,1382836781:120,1396142381:180,1414286381:120,1427591981:180,1445735981:120,1459041581:180,1477790381:120,1490491181:180,1509239981:120,1521940781:180,1540689581:120},
"Europe/Budapest":{1230916782:60,1238289582:120,1256433582:60,1269739182:120,1288487982:60,1301188782:120,1319937582:60,1332638382:120,1351387182:60,1364692782:120,1382836782:60,1396142382:120,1414286382:60,1427591982:120,1445735982:60,1459041582:120,1477790382:60,1490491182:120,1509239982:60,1521940782:120,1540689582:60},
"Europe/Chisinau":{1230916783:120,1238289583:180,1256433583:120,1269739183:180,1288487983:120,1301188783:180,1319937583:120,1332638383:180,1351387183:120,1364692783:180,1382836783:120,1396142383:180,1414286383:120,1427591983:180,1445735983:120,1459041583:180,1477790383:120,1490491183:180,1509239983:120,1521940783:180,1540689583:120},
"Europe/Copenhagen":{1230916783:60,1238289583:120,1256433583:60,1269739183:120,1288487983:60,1301188783:120,1319937583:60,1332638383:120,1351387183:60,1364692783:120,1382836783:60,1396142383:120,1414286383:60,1427591983:120,1445735983:60,1459041583:120,1477790383:60,1490491183:120,1509239983:60,1521940783:120,1540689583:60},
"Europe/Dublin":{1230916784:0,1238289584:60,1256433584:0,1269739184:60,1288487984:0,1301188784:60,1319937584:0,1332638384:60,1351387184:0,1364692784:60,1382836784:0,1396142384:60,1414286384:0,1427591984:60,1445735984:0,1459041584:60,1477790384:0,1490491184:60,1509239984:0,1521940784:60,1540689584:0},
"Europe/Gibraltar":{1230916785:60,1238289585:120,1256433585:60,1269739185:120,1288487985:60,1301188785:120,1319937585:60,1332638385:120,1351387185:60,1364692785:120,1382836785:60,1396142385:120,1414286385:60,1427591985:120,1445735985:60,1459041585:120,1477790385:60,1490491185:120,1509239985:60,1521940785:120,1540689585:60},
"Europe/Helsinki":{1230916786:120,1238289586:180,1256433586:120,1269739186:180,1288487986:120,1301188786:180,1319937586:120,1332638386:180,1351387186:120,1364692786:180,1382836786:120,1396142386:180,1414286386:120,1427591986:180,1445735986:120,1459041586:180,1477790386:120,1490491186:180,1509239986:120,1521940786:180,1540689586:120},
"Europe/Istanbul":{1230916786:120,1238289586:180,1256433586:120,1269739186:180,1288487986:120,1301188786:180,1319937586:120,1332638386:180,1351387186:120,1364692786:180,1382836786:120,1396142386:180,1414286386:120,1427591986:180,1445735986:120,1459041586:180,1477790386:120,1490491186:180,1509239986:120,1521940786:180,1540689586:120},
"Europe/Kaliningrad":{1230916787:120,1238285987:180,1256429987:120,1269735587:180,1288484387:120,1301185187:180,1319933987:120,1332634787:180,1351383587:120,1364689187:180,1382833187:120,1396138787:180,1414282787:120,1427588387:180,1445732387:120,1459037987:180,1477786787:120,1490487587:180,1509236387:120,1521937187:180,1540685987:120},
"Europe/Kiev":{1230916788:120,1238289588:180,1256433588:120,1269739188:180,1288487988:120,1301188788:180,1319937588:120,1332638388:180,1351387188:120,1364692788:180,1382836788:120,1396142388:180,1414286388:120,1427591988:180,1445735988:120,1459041588:180,1477790388:120,1490491188:180,1509239988:120,1521940788:180,1540689588:120},
"Europe/Lisbon":{1230916789:0,1238289589:60,1256433589:0,1269739189:60,1288487989:0,1301188789:60,1319937589:0,1332638389:60,1351387189:0,1364692789:60,1382836789:0,1396142389:60,1414286389:0,1427591989:60,1445735989:0,1459041589:60,1477790389:0,1490491189:60,1509239989:0,1521940789:60,1540689589:0},
"Europe/London":{1230916789:0,1238289589:60,1256433589:0,1269739189:60,1288487989:0,1301188789:60,1319937589:0,1332638389:60,1351387189:0,1364692789:60,1382836789:0,1396142389:60,1414286389:0,1427591989:60,1445735989:0,1459041589:60,1477790389:0,1490491189:60,1509239989:0,1521940789:60,1540689589:0},
"Europe/Luxembourg":{1230916790:60,1238289590:120,1256433590:60,1269739190:120,1288487990:60,1301188790:120,1319937590:60,1332638390:120,1351387190:60,1364692790:120,1382836790:60,1396142390:120,1414286390:60,1427591990:120,1445735990:60,1459041590:120,1477790390:60,1490491190:120,1509239990:60,1521940790:120,1540689590:60},
"Europe/Madrid":{1230916791:60,1238289591:120,1256433591:60,1269739191:120,1288487991:60,1301188791:120,1319937591:60,1332638391:120,1351387191:60,1364692791:120,1382836791:60,1396142391:120,1414286391:60,1427591991:120,1445735991:60,1459041591:120,1477790391:60,1490491191:120,1509239991:60,1521940791:120,1540689591:60},
"Europe/Malta":{1230916792:60,1238289592:120,1256433592:60,1269739192:120,1288487992:60,1301188792:120,1319937592:60,1332638392:120,1351387192:60,1364692792:120,1382836792:60,1396142392:120,1414286392:60,1427591992:120,1445735992:60,1459041592:120,1477790392:60,1490491192:120,1509239992:60,1521940792:120,1540689592:60},
"Europe/Minsk":{1230916792:120,1238285992:180,1256429992:120,1269735592:180,1288484392:120,1301185192:180,1319933992:120,1332634792:180,1351383592:120,1364689192:180,1382833192:120,1396138792:180,1414282792:120,1427588392:180,1445732392:120,1459037992:180,1477786792:120,1490487592:180,1509236392:120,1521937192:180,1540685992:120},
"Europe/Monaco":{1230916793:60,1238289593:120,1256433593:60,1269739193:120,1288487993:60,1301188793:120,1319937593:60,1332638393:120,1351387193:60,1364692793:120,1382836793:60,1396142393:120,1414286393:60,1427591993:120,1445735993:60,1459041593:120,1477790393:60,1490491193:120,1509239993:60,1521940793:120,1540689593:60},
"Europe/Moscow":{1230916794:180,1238282394:240,1256426394:180,1269731994:240,1288480794:180,1301181594:240,1319930394:180,1332631194:240,1351379994:180,1364685594:240,1382829594:180,1396135194:240,1414279194:180,1427584794:240,1445728794:180,1459034394:240,1477783194:180,1490483994:240,1509232794:180,1521933594:240,1540682394:180},
"Europe/Oslo":{1230916795:60,1238289595:120,1256433595:60,1269739195:120,1288487995:60,1301188795:120,1319937595:60,1332638395:120,1351387195:60,1364692795:120,1382836795:60,1396142395:120,1414286395:60,1427591995:120,1445735995:60,1459041595:120,1477790395:60,1490491195:120,1509239995:60,1521940795:120,1540689595:60},
"Europe/Paris":{1230916796:60,1238289596:120,1256433596:60,1269739196:120,1288487996:60,1301188796:120,1319937596:60,1332638396:120,1351387196:60,1364692796:120,1382836796:60,1396142396:120,1414286396:60,1427591996:120,1445735996:60,1459041596:120,1477790396:60,1490491196:120,1509239996:60,1521940796:120,1540689596:60},
"Europe/Prague":{1230916796:60,1238289596:120,1256433596:60,1269739196:120,1288487996:60,1301188796:120,1319937596:60,1332638396:120,1351387196:60,1364692796:120,1382836796:60,1396142396:120,1414286396:60,1427591996:120,1445735996:60,1459041596:120,1477790396:60,1490491196:120,1509239996:60,1521940796:120,1540689596:60},
"Europe/Riga":{1230916797:120,1238289597:180,1256433597:120,1269739197:180,1288487997:120,1301188797:180,1319937597:120,1332638397:180,1351387197:120,1364692797:180,1382836797:120,1396142397:180,1414286397:120,1427591997:180,1445735997:120,1459041597:180,1477790397:120,1490491197:180,1509239997:120,1521940797:180,1540689597:120},
"Europe/Rome":{1230916798:60,1238289598:120,1256433598:60,1269739198:120,1288487998:60,1301188798:120,1319937598:60,1332638398:120,1351387198:60,1364692798:120,1382836798:60,1396142398:120,1414286398:60,1427591998:120,1445735998:60,1459041598:120,1477790398:60,1490491198:120,1509239998:60,1521940798:120,1540689598:60},
"Europe/Samara":{1230916799:240,1238278799:300,1256422799:240,1269728399:300,1288477199:240,1301177999:300,1319926799:240,1332627599:300,1351376399:240,1364681999:300,1382825999:240,1396131599:300,1414275599:240,1427581199:300,1445725199:240,1459030799:300,1477779599:240,1490480399:300,1509229199:240,1521929999:300,1540678799:240},
"Europe/Simferopol":{1230916799:120,1238289599:180,1256433599:120,1269739199:180,1288487999:120,1301188799:180,1319937599:120,1332638399:180,1351387199:120,1364692799:180,1382836799:120,1396142399:180,1414286399:120,1427591999:180,1445735999:120,1459041599:180,1477790399:120,1490491199:180,1509239999:120,1521940799:180,1540689599:120},
"Europe/Sofia":{1230916800:120,1238289600:180,1256433600:120,1269739200:180,1288488000:120,1301188800:180,1319937600:120,1332638400:180,1351387200:120,1364692800:180,1382836800:120,1396142400:180,1414286400:120,1427592000:180,1445736000:120,1459041600:180,1477790400:120,1490491200:180,1509240000:120,1521940800:180,1540689600:120},
"Europe/Stockholm":{1230916801:60,1238289601:120,1256433601:60,1269739201:120,1288488001:60,1301188801:120,1319937601:60,1332638401:120,1351387201:60,1364692801:120,1382836801:60,1396142401:120,1414286401:60,1427592001:120,1445736001:60,1459041601:120,1477790401:60,1490491201:120,1509240001:60,1521940801:120,1540689601:60},
"Europe/Tallinn":{1230916802:120,1238289602:180,1256433602:120,1269739202:180,1288488002:120,1301188802:180,1319937602:120,1332638402:180,1351387202:120,1364692802:180,1382836802:120,1396142402:180,1414286402:120,1427592002:180,1445736002:120,1459041602:180,1477790402:120,1490491202:180,1509240002:120,1521940802:180,1540689602:120},
"Europe/Tirane":{1230916802:60,1238289602:120,1256433602:60,1269739202:120,1288488002:60,1301188802:120,1319937602:60,1332638402:120,1351387202:60,1364692802:120,1382836802:60,1396142402:120,1414286402:60,1427592002:120,1445736002:60,1459041602:120,1477790402:60,1490491202:120,1509240002:60,1521940802:120,1540689602:60},
"Europe/Uzhgorod":{1230916803:120,1238289603:180,1256433603:120,1269739203:180,1288488003:120,1301188803:180,1319937603:120,1332638403:180,1351387203:120,1364692803:180,1382836803:120,1396142403:180,1414286403:120,1427592003:180,1445736003:120,1459041603:180,1477790403:120,1490491203:180,1509240003:120,1521940803:180,1540689603:120},
"Europe/Vaduz":{1230916804:60,1238289604:120,1256433604:60,1269739204:120,1288488004:60,1301188804:120,1319937604:60,1332638404:120,1351387204:60,1364692804:120,1382836804:60,1396142404:120,1414286404:60,1427592004:120,1445736004:60,1459041604:120,1477790404:60,1490491204:120,1509240004:60,1521940804:120,1540689604:60},
"Europe/Vienna":{1230916805:60,1238289605:120,1256433605:60,1269739205:120,1288488005:60,1301188805:120,1319937605:60,1332638405:120,1351387205:60,1364692805:120,1382836805:60,1396142405:120,1414286405:60,1427592005:120,1445736005:60,1459041605:120,1477790405:60,1490491205:120,1509240005:60,1521940805:120,1540689605:60},
"Europe/Vilnius":{1230916805:120,1238289605:180,1256433605:120,1269739205:180,1288488005:120,1301188805:180,1319937605:120,1332638405:180,1351387205:120,1364692805:180,1382836805:120,1396142405:180,1414286405:120,1427592005:180,1445736005:120,1459041605:180,1477790405:120,1490491205:180,1509240005:120,1521940805:180,1540689605:120},
"Europe/Volgograd":{1230916806:180,1238282406:240,1256426406:180,1269732006:240,1288480806:180,1301181606:240,1319930406:180,1332631206:240,1351380006:180,1364685606:240,1382829606:180,1396135206:240,1414279206:180,1427584806:240,1445728806:180,1459034406:240,1477783206:180,1490484006:240,1509232806:180,1521933606:240,1540682406:180},
"Europe/Warsaw":{1230916807:60,1238289607:120,1256433607:60,1269739207:120,1288488007:60,1301188807:120,1319937607:60,1332638407:120,1351387207:60,1364692807:120,1382836807:60,1396142407:120,1414286407:60,1427592007:120,1445736007:60,1459041607:120,1477790407:60,1490491207:120,1509240007:60,1521940807:120,1540689607:60},
"Europe/Zaporozhye":{1230916808:120,1238289608:180,1256433608:120,1269739208:180,1288488008:120,1301188808:180,1319937608:120,1332638408:180,1351387208:120,1364692808:180,1382836808:120,1396142408:180,1414286408:120,1427592008:180,1445736008:120,1459041608:180,1477790408:120,1490491208:180,1509240008:120,1521940808:180,1540689608:120},
"Europe/Zurich":{1230916808:60,1238289608:120,1256433608:60,1269739208:120,1288488008:60,1301188808:120,1319937608:60,1332638408:120,1351387208:60,1364692808:120,1382836808:60,1396142408:120,1414286408:60,1427592008:120,1445736008:60,1459041608:120,1477790408:60,1490491208:120,1509240008:60,1521940808:120,1540689608:60},
"GMT":{1230916809:0},
"Indian Ocean/Antananarivo":{1230916810:180},
"Indian Ocean/Chagos":{1230916810:360},
"Indian Ocean/Christmas":{1230916811:420},
"Indian Ocean/Cocos":{1230916812:390},
"Indian Ocean/Comoro":{1230916812:180},
"Indian Ocean/Kerguelen":{1230916813:300},
"Indian Ocean/Mahe":{1230916813:240},
"Indian Ocean/Maldives":{1230916814:300},
"Indian Ocean/Mauritius":{1230916815:300,1238278815:240,1256422815:300,1269728415:240,1288477215:300,1301178015:240,1319926815:300,1332627615:240,1351376415:300,1364682015:240,1382826015:300,1396131615:240,1414275615:300,1427581215:240,1445725215:300,1459030815:240,1477779615:300,1490480415:240,1509229215:300,1521930015:240,1540678815:300},
"Indian Ocean/Mayotte":{1230916816:180},
"Indian Ocean/Reunion":{1230916816:240},
"Pacific/Apia":{1230916817:-660},
"Pacific/Auckland":{1230916818:780,1238854818:720,1253974818:780,1270304418:720,1285424418:780,1301754018:720,1316874018:780,1333203618:720,1348928418:780,1365258018:720,1380378018:780,1396707618:720,1411827618:780,1428157218:720,1443277218:780,1459606818:720,1474726818:780,1491056418:720,1506176418:780,1522506018:720,1538230818:780},
"Pacific/Chatham":{1230916818:825,1238854818:765,1253974818:825,1270304418:765,1285424418:825,1301754018:765,1316874018:825,1333203618:765,1348928418:825,1365258018:765,1380378018:825,1396707618:765,1411827618:825,1428157218:765,1443277218:825,1459606818:765,1474726818:825,1491056418:765,1506176418:825,1522506018:765,1538230818:825},
"Pacific/Easter":{1230916819:-300,1237087219:-360,1255234819:-300,1268536819:-360,1286684419:-300,1299986419:-360,1318134019:-300,1331436019:-360,1350188419:-300,1362885619:-360,1381638019:-300,1394335219:-360,1413087619:-300,1426389619:-360,1444537219:-300,1457839219:-360,1475986819:-300,1489288819:-360,1508041219:-300,1520738419:-360,1539490819:-300},
"Pacific/Efate":{1230916820:660},
"Pacific/Enderbury":{1230916821:780},
"Pacific/Fakaofo":{1230916821:-600},
"Pacific/Fiji":{1230916822:720},
"Pacific/Funafuti":{1230916823:720},
"Pacific/Galapagos":{1230916823:-360},
"Pacific/Gambier":{1230916824:-540},
"Pacific/Guadalcanal":{1230916824:660},
"Pacific/Guam":{1230916825:600},
"Pacific/Honolulu":{1230916826:-600},
"Pacific/Johnston":{1230916827:-600},
"Pacific/Kiritimati":{1230916827:840},
"Pacific/Kosrae":{1230916828:660},
"Pacific/Kwajalein":{1230916828:720},
"Pacific/Majuro":{1230916829:720},
"Pacific/Marquesas":{1230916830:-570},
"Pacific/Midway":{1230916831:-660},
"Pacific/Nauru":{1230916831:720},
"Pacific/Niue":{1230916832:-660},
"Pacific/Norfolk":{1230916833:690},
"Pacific/Noumea":{1230916833:660},
"Pacific/Pago Pago":{1230916834:-660},
"Pacific/Palau":{1230916835:540},
"Pacific/Pitcairn":{1230916835:-480},
"Pacific/Ponape":{1230916836:660},
"Pacific/Port Moresby":{1230916836:600},
"Pacific/Rarotonga":{1230916837:-600},
"Pacific/Saipan":{1230916838:600},
"Pacific/Tahiti":{1230916838:-600},
"Pacific/Tarawa":{1230916839:720},
"Pacific/Tongatapu":{1230916839:780},
"Pacific/Truk":{1230916840:600},
"Pacific/Wake":{1230916841:720},
"Pacific/Wallis":{1230916841:720},
"UTC":{1230916841:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'English'
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  return;
/*
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  dateArea.innerHTML = sunrise + " " + sunset;
*/
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = '';
      // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = formatDate( G.mainTimeFormat, now );

  //if ( G.swaplabels ) {
    //var temp = gDate.value;
    //gDate.value = gLabel.value;
    //gLabel.value = temp;
  //}

  //updateFonts();
  adjustTimeToFit();
  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function adjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;

  //if ( window.timeArea.className == 'bigTime' ) return 67;
  //if ( window.timeArea.className == 'smallTime' ) return 33;
  //return 44; // was 45
}


var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}


function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }

//		var tzName = document.getElementById('tzName').value;
//    var tzOffsets = tzdata2007k[ tzName ];
//		System.Gadget.Settings.write( 'tzOffsets', tzOffsets );
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}


/*
function oldgetSystemFontsList() {
  // http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1959226&SiteID=1
  var HKLM = 2147483650;
  var rPath = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\\";
  var rValue;

  // connect to the registry
  var oSwbem = new ActiveXObject("WbemScripting.SwbemLocator");
  var oSvc = oSwbem.ConnectServer(null, "root\\default");
  var oReg = oSvc.Get("StdRegProv");

  // enumerate the values 
  var oMethod = oReg.Methods_.Item("EnumValues");
  var oInParam = oMethod.InParameters.SpawnInstance_();
  oInParam.hDefKey = HKLM;
  oInParam.sSubKeyName = rPath;
  var oOutParam = oReg.ExecMethod_(oMethod.Name, oInParam);

  // get the values into an array
  var sNames = oOutParam.sNames.toArray();

  return sNames;

//  for (var i = 0; i < sNames.length; i++) {
//    document.write( sNames[i] );
//   // font names are in sNames[i]
//  }
}
*/

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}
