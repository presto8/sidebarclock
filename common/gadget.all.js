// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                return new Date (this.Y () - 1, 11, 31).formatDate ("W");
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata2007k = { 
"Africa/Abidjan":{ 1213482128:0 },
"Africa/Accra":{ 1213482129:0 },
"Africa/Addis Ababa":{ 1213482129:180 },
"Africa/Algiers":{ 1213482130:60 },
"Africa/Asmara":{ 1213482131:180 },
"Africa/Asmera":{ 1213482132:180 },
"Africa/Bamako":{ 1213482132:0 },
"Africa/Bangui":{ 1213482133:60 },
"Africa/Banjul":{ 1213482134:0 },
"Africa/Bissau":{ 1213482134:0 },
"Africa/Blantyre":{ 1213482135:120 },
"Africa/Brazzaville":{ 1213482136:60 },
"Africa/Bujumbura":{ 1213482136:120 },
"Africa/Cairo":{ 1213482137:180 , 1219958537:120 , 1240525337:180 , 1251408137:120 , 1272579737:180 , 1282857737:120 , 1304029337:180 , 1314307337:120 , 1335478937:180 , 1346361737:120 , 1366928537:180 , 1377811337:120 , 1398378137:180 , 1409260937:120 , 1429827737:180 , 1440710537:120 , 1461882137:180 , 1472160137:120 , 1493331737:180 , 1504214537:120 , 1524781337:180 },
"Africa/Casablanca":{ 1213482138:0 },
"Africa/Ceuta":{ 1213482138:120 , 1224984138:60 , 1238289738:120 , 1256433738:60 , 1269739338:120 , 1288488138:60 , 1301188938:120 , 1319937738:60 , 1332638538:120 , 1351387338:60 , 1364692938:120 , 1382836938:60 , 1396142538:120 , 1414286538:60 , 1427592138:120 , 1445736138:60 , 1459041738:120 , 1477790538:60 , 1490491338:120 , 1509240138:60 , 1521940938:120 },
"Africa/Conakry":{ 1213482139:0 },
"Africa/Dakar":{ 1213482140:0 },
"Africa/Dar es Salaam":{ 1213482141:180 },
"Africa/Djibouti":{ 1213482141:180 },
"Africa/Douala":{ 1213482142:60 },
"Africa/El Aaiun":{ 1213482143:0 },
"Africa/Freetown":{ 1213482143:0 },
"Africa/Gaborone":{ 1213482144:120 },
"Africa/Harare":{ 1213482145:120 },
"Africa/Johannesburg":{ 1213482146:120 },
"Africa/Kampala":{ 1213482146:180 },
"Africa/Khartoum":{ 1213482147:180 },
"Africa/Kigali":{ 1213482148:120 },
"Africa/Kinshasa":{ 1213482148:60 },
"Africa/Lagos":{ 1213482149:60 },
"Africa/Libreville":{ 1213482150:60 },
"Africa/Lome":{ 1213482150:0 },
"Africa/Luanda":{ 1213482151:60 },
"Africa/Lubumbashi":{ 1213482151:120 },
"Africa/Lusaka":{ 1213482152:120 },
"Africa/Malabo":{ 1213482153:60 },
"Africa/Maputo":{ 1213482153:120 },
"Africa/Maseru":{ 1213482154:120 },
"Africa/Mbabane":{ 1213482155:120 },
"Africa/Mogadishu":{ 1213482155:180 },
"Africa/Monrovia":{ 1213482156:0 },
"Africa/Nairobi":{ 1213482157:180 },
"Africa/Ndjamena":{ 1213482158:60 },
"Africa/Niamey":{ 1213482158:60 },
"Africa/Nouakchott":{ 1213482159:0 },
"Africa/Ouagadougou":{ 1213482160:0 },
"Africa/Porto-Novo":{ 1213482160:60 },
"Africa/Sao Tome":{ 1213482161:0 },
"Africa/Timbuktu":{ 1213482162:0 },
"Africa/Tripoli":{ 1213482162:120 },
"Africa/Tunis":{ 1213482163:120 , 1224984163:60 , 1238289763:120 , 1256433763:60 , 1269739363:120 , 1288488163:60 , 1301188963:120 , 1319937763:60 , 1332638563:120 , 1351387363:60 , 1364692963:120 , 1382836963:60 , 1396142563:120 , 1414286563:60 , 1427592163:120 , 1445736163:60 , 1459041763:120 , 1477790563:60 , 1490491363:120 , 1509240163:60 , 1521940963:120 },
"Africa/Windhoek":{ 1213482164:60 , 1220750564:120 , 1238890964:60 , 1252200164:120 , 1270340564:60 , 1283649764:120 , 1301790164:60 , 1315099364:120 , 1333239764:60 , 1346548964:120 , 1365294164:60 , 1377998564:120 , 1396743764:60 , 1410052964:120 , 1428193364:60 , 1441502564:120 , 1459642964:60 , 1472952164:120 , 1491092564:60 , 1504401764:120 , 1522542164:60 },
"America/Adak":{ 1213482165:-540 , 1225624965:-600 , 1236514965:-540 , 1257074565:-600 , 1268569365:-540 , 1289128965:-600 , 1300018965:-540 , 1320578565:-600 , 1331468565:-540 , 1352028165:-600 , 1362918165:-540 , 1383477765:-600 , 1394367765:-540 , 1414927365:-600 , 1425817365:-540 , 1446376965:-600 , 1457871765:-540 , 1478431365:-600 , 1489321365:-540 , 1509880965:-600 , 1520770965:-540 },
"America/Anchorage":{ 1213482165:-480 , 1225621365:-540 , 1236511365:-480 , 1257070965:-540 , 1268565765:-480 , 1289125365:-540 , 1300015365:-480 , 1320574965:-540 , 1331464965:-480 , 1352024565:-540 , 1362914565:-480 , 1383474165:-540 , 1394364165:-480 , 1414923765:-540 , 1425813765:-480 , 1446373365:-540 , 1457868165:-480 , 1478427765:-540 , 1489317765:-480 , 1509877365:-540 , 1520767365:-480 },
"America/Anguilla":{ 1213482166:-240 },
"America/Antigua":{ 1213482167:-240 },
"America/Araguaina":{ 1213482168:-180 },
"America/Aruba":{ 1213482168:-240 },
"America/Asuncion":{ 1213482169:-240 , 1224390169:-180 , 1236482569:-240 , 1255839769:-180 , 1268536969:-240 , 1287289369:-180 , 1299986569:-240 , 1318738969:-180 , 1331436169:-240 , 1350793369:-180 , 1362885769:-240 , 1382242969:-180 , 1394335369:-240 , 1413692569:-180 , 1425784969:-240 , 1445142169:-180 , 1457839369:-240 , 1476591769:-180 , 1489288969:-240 , 1508041369:-180 , 1520738569:-240 },
"America/Atikokan":{ 1213482170:-300 },
"America/Atka":{ 1213482171:-540 , 1225624971:-600 , 1236514971:-540 , 1257074571:-600 , 1268569371:-540 , 1289128971:-600 , 1300018971:-540 , 1320578571:-600 , 1331468571:-540 , 1352028171:-600 , 1362918171:-540 , 1383477771:-600 , 1394367771:-540 , 1414927371:-600 , 1425817371:-540 , 1446376971:-600 , 1457871771:-540 , 1478431371:-600 , 1489321371:-540 , 1509880971:-600 , 1520770971:-540 },
"America/Bahia":{ 1213482171:-180 },
"America/Barbados":{ 1213482172:-240 },
"America/Belem":{ 1213482173:-180 },
"America/Belize":{ 1213482174:-360 },
"America/Blanc-Sablon":{ 1213482174:-240 },
"America/Boa Vista":{ 1213482175:-240 },
"America/Bogota":{ 1213482176:-300 },
"America/Boise":{ 1213482177:-360 , 1225614177:-420 , 1236504177:-360 , 1257063777:-420 , 1268558577:-360 , 1289118177:-420 , 1300008177:-360 , 1320567777:-420 , 1331457777:-360 , 1352017377:-420 , 1362907377:-360 , 1383466977:-420 , 1394356977:-360 , 1414916577:-420 , 1425806577:-360 , 1446366177:-420 , 1457860977:-360 , 1478420577:-420 , 1489310577:-360 , 1509870177:-420 , 1520760177:-360 },
"America/Buenos Aires":{ 1213482177:-180 , 1223176977:-120 , 1237083777:-180 , 1254626577:-120 , 1269138177:-180 , 1286076177:-120 , 1300587777:-180 , 1317525777:-120 , 1332037377:-180 , 1349580177:-120 , 1363486977:-180 , 1381029777:-120 , 1394936577:-180 , 1412479377:-120 , 1426386177:-180 , 1443928977:-120 , 1458440577:-180 , 1475378577:-120 , 1489890177:-180 , 1506828177:-120 , 1521339777:-180 },
"America/Cambridge Bay":{ 1213482178:-360 , 1225614178:-420 , 1236504178:-360 , 1257063778:-420 , 1268558578:-360 , 1289118178:-420 , 1300008178:-360 , 1320567778:-420 , 1331457778:-360 , 1352017378:-420 , 1362907378:-360 , 1383466978:-420 , 1394356978:-360 , 1414916578:-420 , 1425806578:-360 , 1446366178:-420 , 1457860978:-360 , 1478420578:-420 , 1489310578:-360 , 1509870178:-420 , 1520760178:-360 },
"America/Campo Grande":{ 1213482179:-240 , 1223785379:-180 , 1234668179:-240 , 1255234979:-180 , 1266722579:-240 , 1286684579:-180 , 1298172179:-240 , 1318134179:-180 , 1329621779:-240 , 1350188579:-180 , 1361071379:-240 , 1381638179:-180 , 1392520979:-240 , 1413087779:-180 , 1423970579:-240 , 1444537379:-180 , 1456024979:-240 , 1475986979:-180 , 1487474579:-240 , 1507436579:-180 , 1518924179:-240 },
"America/Cancun":{ 1213482180:-300 , 1225005780:-360 , 1238919780:-300 , 1256455380:-360 , 1270369380:-300 , 1288509780:-360 , 1301818980:-300 , 1319959380:-360 , 1333268580:-300 , 1351408980:-360 , 1365322980:-300 , 1382858580:-360 , 1396772580:-300 , 1414308180:-360 , 1428222180:-300 , 1445757780:-360 , 1459671780:-300 , 1477812180:-360 , 1491121380:-300 , 1509261780:-360 , 1522570980:-300 },
"America/Caracas":{ 1213482180:-270 },
"America/Catamarca":{ 1213482181:-180 , 1223176981:-120 , 1237083781:-180 , 1254626581:-120 , 1269138181:-180 , 1286076181:-120 , 1300587781:-180 , 1317525781:-120 , 1332037381:-180 , 1349580181:-120 , 1363486981:-180 , 1381029781:-120 , 1394936581:-180 , 1412479381:-120 , 1426386181:-180 , 1443928981:-120 , 1458440581:-180 , 1475378581:-120 , 1489890181:-180 , 1506828181:-120 , 1521339781:-180 },
"America/Cayenne":{ 1213482182:-180 },
"America/Cayman":{ 1213482183:-300 },
"America/Chicago":{ 1213482183:-300 , 1225610583:-360 , 1236500583:-300 , 1257060183:-360 , 1268554983:-300 , 1289114583:-360 , 1300004583:-300 , 1320564183:-360 , 1331454183:-300 , 1352013783:-360 , 1362903783:-300 , 1383463383:-360 , 1394353383:-300 , 1414912983:-360 , 1425802983:-300 , 1446362583:-360 , 1457857383:-300 , 1478416983:-360 , 1489306983:-300 , 1509866583:-360 , 1520756583:-300 },
"America/Chihuahua":{ 1213482184:-360 , 1225009384:-420 , 1238923384:-360 , 1256458984:-420 , 1270372984:-360 , 1288513384:-420 , 1301822584:-360 , 1319962984:-420 , 1333272184:-360 , 1351412584:-420 , 1365326584:-360 , 1382862184:-420 , 1396776184:-360 , 1414311784:-420 , 1428225784:-360 , 1445761384:-420 , 1459675384:-360 , 1477815784:-420 , 1491124984:-360 , 1509265384:-420 , 1522574584:-360 },
"America/Coral Harbour":{ 1213482185:-300 },
"America/Cordoba":{ 1213482186:-180 , 1223176986:-120 , 1237083786:-180 , 1254626586:-120 , 1269138186:-180 , 1286076186:-120 , 1300587786:-180 , 1317525786:-120 , 1332037386:-180 , 1349580186:-120 , 1363486986:-180 , 1381029786:-120 , 1394936586:-180 , 1412479386:-120 , 1426386186:-180 , 1443928986:-120 , 1458440586:-180 , 1475378586:-120 , 1489890186:-180 , 1506828186:-120 , 1521339786:-180 },
"America/Costa Rica":{ 1213482186:-360 },
"America/Cuiaba":{ 1213482187:-240 , 1223785387:-180 , 1234668187:-240 , 1255234987:-180 , 1266722587:-240 , 1286684587:-180 , 1298172187:-240 , 1318134187:-180 , 1329621787:-240 , 1350188587:-180 , 1361071387:-240 , 1381638187:-180 , 1392520987:-240 , 1413087787:-180 , 1423970587:-240 , 1444537387:-180 , 1456024987:-240 , 1475986987:-180 , 1487474587:-240 , 1507436587:-180 , 1518924187:-240 },
"America/Curacao":{ 1213482188:-240 },
"America/Danmarkshavn":{ 1213482189:0 },
"America/Dawson":{ 1213482189:-420 , 1225617789:-480 , 1236507789:-420 , 1257067389:-480 , 1268562189:-420 , 1289121789:-480 , 1300011789:-420 , 1320571389:-480 , 1331461389:-420 , 1352020989:-480 , 1362910989:-420 , 1383470589:-480 , 1394360589:-420 , 1414920189:-480 , 1425810189:-420 , 1446369789:-480 , 1457864589:-420 , 1478424189:-480 , 1489314189:-420 , 1509873789:-480 , 1520763789:-420 },
"America/Dawson Creek":{ 1213482190:-420 },
"America/Denver":{ 1213482191:-360 , 1225614191:-420 , 1236504191:-360 , 1257063791:-420 , 1268558591:-360 , 1289118191:-420 , 1300008191:-360 , 1320567791:-420 , 1331457791:-360 , 1352017391:-420 , 1362907391:-360 , 1383466991:-420 , 1394356991:-360 , 1414916591:-420 , 1425806591:-360 , 1446366191:-420 , 1457860991:-360 , 1478420591:-420 , 1489310591:-360 , 1509870191:-420 , 1520760191:-360 },
"America/Detroit":{ 1213482192:-240 , 1225606992:-300 , 1236496992:-240 , 1257056592:-300 , 1268551392:-240 , 1289110992:-300 , 1300000992:-240 , 1320560592:-300 , 1331450592:-240 , 1352010192:-300 , 1362900192:-240 , 1383459792:-300 , 1394349792:-240 , 1414909392:-300 , 1425799392:-240 , 1446358992:-300 , 1457853792:-240 , 1478413392:-300 , 1489303392:-240 , 1509862992:-300 , 1520752992:-240 },
"America/Dominica":{ 1213482192:-240 },
"America/Edmonton":{ 1213482193:-360 , 1225614193:-420 , 1236504193:-360 , 1257063793:-420 , 1268558593:-360 , 1289118193:-420 , 1300008193:-360 , 1320567793:-420 , 1331457793:-360 , 1352017393:-420 , 1362907393:-360 , 1383466993:-420 , 1394356993:-360 , 1414916593:-420 , 1425806593:-360 , 1446366193:-420 , 1457860993:-360 , 1478420593:-420 , 1489310593:-360 , 1509870193:-420 , 1520760193:-360 },
"America/Eirunepe":{ 1213482194:-300 },
"America/El Salvador":{ 1213482195:-360 },
"America/Ensenada":{ 1213482195:-420 , 1225012995:-480 , 1238926995:-420 , 1256462595:-480 , 1270376595:-420 , 1288516995:-480 , 1301826195:-420 , 1319966595:-480 , 1333275795:-420 , 1351416195:-480 , 1365330195:-420 , 1382865795:-480 , 1396779795:-420 , 1414315395:-480 , 1428229395:-420 , 1445764995:-480 , 1459678995:-420 , 1477819395:-480 , 1491128595:-420 , 1509268995:-480 , 1522578195:-420 },
"America/Fort Wayne":{ 1213482196:-240 , 1225606996:-300 , 1236496996:-240 , 1257056596:-300 , 1268551396:-240 , 1289110996:-300 , 1300000996:-240 , 1320560596:-300 , 1331450596:-240 , 1352010196:-300 , 1362900196:-240 , 1383459796:-300 , 1394349796:-240 , 1414909396:-300 , 1425799396:-240 , 1446358996:-300 , 1457853796:-240 , 1478413396:-300 , 1489303396:-240 , 1509862996:-300 , 1520752996:-240 },
"America/Fortaleza":{ 1213482197:-180 },
"America/Glace Bay":{ 1213482198:-180 , 1225603398:-240 , 1236493398:-180 , 1257052998:-240 , 1268547798:-180 , 1289107398:-240 , 1299997398:-180 , 1320556998:-240 , 1331446998:-180 , 1352006598:-240 , 1362896598:-180 , 1383456198:-240 , 1394346198:-180 , 1414905798:-240 , 1425795798:-180 , 1446355398:-240 , 1457850198:-180 , 1478409798:-240 , 1489299798:-180 , 1509859398:-240 , 1520749398:-180 },
"America/Godthab":{ 1213482199:-120 , 1224984199:-180 , 1238289799:-120 , 1256433799:-180 , 1269739399:-120 , 1288488199:-180 , 1301188999:-120 , 1319937799:-180 , 1332638599:-120 , 1351387399:-180 , 1364692999:-120 , 1382836999:-180 , 1396142599:-120 , 1414286599:-180 , 1427592199:-120 , 1445736199:-180 , 1459041799:-120 , 1477790599:-180 , 1490491399:-120 , 1509240199:-180 , 1521940999:-120 },
"America/Goose Bay":{ 1213482199:-180 , 1225596199:-240 , 1236486199:-180 , 1257045799:-240 , 1268540599:-180 , 1289100199:-240 , 1299990199:-180 , 1320549799:-240 , 1331439799:-180 , 1351999399:-240 , 1362889399:-180 , 1383448999:-240 , 1394338999:-180 , 1414898599:-240 , 1425788599:-180 , 1446348199:-240 , 1457842999:-180 , 1478402599:-240 , 1489292599:-180 , 1509852199:-240 , 1520742199:-180 },
"America/Grand Turk":{ 1213482200:-240 , 1225607000:-300 , 1236497000:-240 , 1257056600:-300 , 1268551400:-240 , 1289111000:-300 , 1300001000:-240 , 1320560600:-300 , 1331450600:-240 , 1352010200:-300 , 1362900200:-240 , 1383459800:-300 , 1394349800:-240 , 1414909400:-300 , 1425799400:-240 , 1446359000:-300 , 1457853800:-240 , 1478413400:-300 , 1489303400:-240 , 1509863000:-300 , 1520753000:-240 },
"America/Grenada":{ 1213482201:-240 },
"America/Guadeloupe":{ 1213482202:-240 },
"America/Guatemala":{ 1213482202:-360 },
"America/Guayaquil":{ 1213482203:-300 },
"America/Guyana":{ 1213482204:-240 },
"America/Halifax":{ 1213482205:-180 , 1225603405:-240 , 1236493405:-180 , 1257053005:-240 , 1268547805:-180 , 1289107405:-240 , 1299997405:-180 , 1320557005:-240 , 1331447005:-180 , 1352006605:-240 , 1362896605:-180 , 1383456205:-240 , 1394346205:-180 , 1414905805:-240 , 1425795805:-180 , 1446355405:-240 , 1457850205:-180 , 1478409805:-240 , 1489299805:-180 , 1509859405:-240 , 1520749405:-180 },
"America/Havana":{ 1213482205:-240 , 1224998605:-300 , 1237094605:-240 , 1256448205:-300 , 1269149005:-240 , 1288502605:-300 , 1300598605:-240 , 1319952205:-300 , 1332048205:-240 , 1351401805:-300 , 1363497805:-240 , 1382851405:-300 , 1394947405:-240 , 1414301005:-300 , 1426397005:-240 , 1445750605:-300 , 1458451405:-240 , 1477805005:-300 , 1489901005:-240 , 1509254605:-300 , 1521350605:-240 },
"America/Hermosillo":{ 1213482206:-420 },
"America/Indianapolis":{ 1213482207:-240 , 1225607007:-300 , 1236497007:-240 , 1257056607:-300 , 1268551407:-240 , 1289111007:-300 , 1300001007:-240 , 1320560607:-300 , 1331450607:-240 , 1352010207:-300 , 1362900207:-240 , 1383459807:-300 , 1394349807:-240 , 1414909407:-300 , 1425799407:-240 , 1446359007:-300 , 1457853807:-240 , 1478413407:-300 , 1489303407:-240 , 1509863007:-300 , 1520753007:-240 },
"America/Inuvik":{ 1213482208:-360 , 1225614208:-420 , 1236504208:-360 , 1257063808:-420 , 1268558608:-360 , 1289118208:-420 , 1300008208:-360 , 1320567808:-420 , 1331457808:-360 , 1352017408:-420 , 1362907408:-360 , 1383467008:-420 , 1394357008:-360 , 1414916608:-420 , 1425806608:-360 , 1446366208:-420 , 1457861008:-360 , 1478420608:-420 , 1489310608:-360 , 1509870208:-420 , 1520760208:-360 },
"America/Iqaluit":{ 1213482209:-240 , 1225607009:-300 , 1236497009:-240 , 1257056609:-300 , 1268551409:-240 , 1289111009:-300 , 1300001009:-240 , 1320560609:-300 , 1331450609:-240 , 1352010209:-300 , 1362900209:-240 , 1383459809:-300 , 1394349809:-240 , 1414909409:-300 , 1425799409:-240 , 1446359009:-300 , 1457853809:-240 , 1478413409:-300 , 1489303409:-240 , 1509863009:-300 , 1520753009:-240 },
"America/Jamaica":{ 1213482209:-300 },
"America/Jujuy":{ 1213482210:-180 , 1223177010:-120 , 1237083810:-180 , 1254626610:-120 , 1269138210:-180 , 1286076210:-120 , 1300587810:-180 , 1317525810:-120 , 1332037410:-180 , 1349580210:-120 , 1363487010:-180 , 1381029810:-120 , 1394936610:-180 , 1412479410:-120 , 1426386210:-180 , 1443929010:-120 , 1458440610:-180 , 1475378610:-120 , 1489890210:-180 , 1506828210:-120 , 1521339810:-180 },
"America/Juneau":{ 1213482211:-480 , 1225621411:-540 , 1236511411:-480 , 1257071011:-540 , 1268565811:-480 , 1289125411:-540 , 1300015411:-480 , 1320575011:-540 , 1331465011:-480 , 1352024611:-540 , 1362914611:-480 , 1383474211:-540 , 1394364211:-480 , 1414923811:-540 , 1425813811:-480 , 1446373411:-540 , 1457868211:-480 , 1478427811:-540 , 1489317811:-480 , 1509877411:-540 , 1520767411:-480 },
"America/Knox IN":{ 1213482212:-300 , 1225610612:-360 , 1236500612:-300 , 1257060212:-360 , 1268555012:-300 , 1289114612:-360 , 1300004612:-300 , 1320564212:-360 , 1331454212:-300 , 1352013812:-360 , 1362903812:-300 , 1383463412:-360 , 1394353412:-300 , 1414913012:-360 , 1425803012:-300 , 1446362612:-360 , 1457857412:-300 , 1478417012:-360 , 1489307012:-300 , 1509866612:-360 , 1520756612:-300 },
"America/La Paz":{ 1213482212:-240 },
"America/Lima":{ 1213482213:-300 },
"America/Los Angeles":{ 1213482214:-420 , 1225617814:-480 , 1236507814:-420 , 1257067414:-480 , 1268562214:-420 , 1289121814:-480 , 1300011814:-420 , 1320571414:-480 , 1331461414:-420 , 1352021014:-480 , 1362911014:-420 , 1383470614:-480 , 1394360614:-420 , 1414920214:-480 , 1425810214:-420 , 1446369814:-480 , 1457864614:-420 , 1478424214:-480 , 1489314214:-420 , 1509873814:-480 , 1520763814:-420 },
"America/Louisville":{ 1213482215:-240 , 1225607015:-300 , 1236497015:-240 , 1257056615:-300 , 1268551415:-240 , 1289111015:-300 , 1300001015:-240 , 1320560615:-300 , 1331450615:-240 , 1352010215:-300 , 1362900215:-240 , 1383459815:-300 , 1394349815:-240 , 1414909415:-300 , 1425799415:-240 , 1446359015:-300 , 1457853815:-240 , 1478413415:-300 , 1489303415:-240 , 1509863015:-300 , 1520753015:-240 },
"America/Maceio":{ 1213482216:-180 },
"America/Managua":{ 1213482216:-360 },
"America/Manaus":{ 1213482217:-240 },
"America/Marigot":{ 1213482218:-240 },
"America/Martinique":{ 1213482219:-240 },
"America/Mazatlan":{ 1213482219:-360 , 1225009419:-420 , 1238923419:-360 , 1256459019:-420 , 1270373019:-360 , 1288513419:-420 , 1301822619:-360 , 1319963019:-420 , 1333272219:-360 , 1351412619:-420 , 1365326619:-360 , 1382862219:-420 , 1396776219:-360 , 1414311819:-420 , 1428225819:-360 , 1445761419:-420 , 1459675419:-360 , 1477815819:-420 , 1491125019:-360 , 1509265419:-420 , 1522574619:-360 },
"America/Mendoza":{ 1213482220:-180 , 1223177020:-120 , 1237083820:-180 , 1254626620:-120 , 1269138220:-180 , 1286076220:-120 , 1300587820:-180 , 1317525820:-120 , 1332037420:-180 , 1349580220:-120 , 1363487020:-180 , 1381029820:-120 , 1394936620:-180 , 1412479420:-120 , 1426386220:-180 , 1443929020:-120 , 1458440620:-180 , 1475378620:-120 , 1489890220:-180 , 1506828220:-120 , 1521339820:-180 },
"America/Menominee":{ 1213482221:-300 , 1225610621:-360 , 1236500621:-300 , 1257060221:-360 , 1268555021:-300 , 1289114621:-360 , 1300004621:-300 , 1320564221:-360 , 1331454221:-300 , 1352013821:-360 , 1362903821:-300 , 1383463421:-360 , 1394353421:-300 , 1414913021:-360 , 1425803021:-300 , 1446362621:-360 , 1457857421:-300 , 1478417021:-360 , 1489307021:-300 , 1509866621:-360 , 1520756621:-300 },
"America/Merida":{ 1213482222:-300 , 1225005822:-360 , 1238919822:-300 , 1256455422:-360 , 1270369422:-300 , 1288509822:-360 , 1301819022:-300 , 1319959422:-360 , 1333268622:-300 , 1351409022:-360 , 1365323022:-300 , 1382858622:-360 , 1396772622:-300 , 1414308222:-360 , 1428222222:-300 , 1445757822:-360 , 1459671822:-300 , 1477812222:-360 , 1491121422:-300 , 1509261822:-360 , 1522571022:-300 },
"America/Mexico City":{ 1213482222:-300 , 1225005822:-360 , 1238919822:-300 , 1256455422:-360 , 1270369422:-300 , 1288509822:-360 , 1301819022:-300 , 1319959422:-360 , 1333268622:-300 , 1351409022:-360 , 1365323022:-300 , 1382858622:-360 , 1396772622:-300 , 1414308222:-360 , 1428222222:-300 , 1445757822:-360 , 1459671822:-300 , 1477812222:-360 , 1491121422:-300 , 1509261822:-360 , 1522571022:-300 },
"America/Miquelon":{ 1213482223:-120 , 1225599823:-180 , 1236489823:-120 , 1257049423:-180 , 1268544223:-120 , 1289103823:-180 , 1299993823:-120 , 1320553423:-180 , 1331443423:-120 , 1352003023:-180 , 1362893023:-120 , 1383452623:-180 , 1394342623:-120 , 1414902223:-180 , 1425792223:-120 , 1446351823:-180 , 1457846623:-120 , 1478406223:-180 , 1489296223:-120 , 1509855823:-180 , 1520745823:-120 },
"America/Moncton":{ 1213482224:-180 , 1225603424:-240 , 1236493424:-180 , 1257053024:-240 , 1268547824:-180 , 1289107424:-240 , 1299997424:-180 , 1320557024:-240 , 1331447024:-180 , 1352006624:-240 , 1362896624:-180 , 1383456224:-240 , 1394346224:-180 , 1414905824:-240 , 1425795824:-180 , 1446355424:-240 , 1457850224:-180 , 1478409824:-240 , 1489299824:-180 , 1509859424:-240 , 1520749424:-180 },
"America/Monterrey":{ 1213482225:-300 , 1225005825:-360 , 1238919825:-300 , 1256455425:-360 , 1270369425:-300 , 1288509825:-360 , 1301819025:-300 , 1319959425:-360 , 1333268625:-300 , 1351409025:-360 , 1365323025:-300 , 1382858625:-360 , 1396772625:-300 , 1414308225:-360 , 1428222225:-300 , 1445757825:-360 , 1459671825:-300 , 1477812225:-360 , 1491121425:-300 , 1509261825:-360 , 1522571025:-300 },
"America/Montevideo":{ 1213482226:-180 , 1223184226:-120 , 1236486226:-180 , 1254633826:-120 , 1268540626:-180 , 1286083426:-120 , 1299990226:-180 , 1317533026:-120 , 1331439826:-180 , 1349587426:-120 , 1362889426:-180 , 1381037026:-120 , 1394339026:-180 , 1412486626:-120 , 1425788626:-180 , 1443936226:-120 , 1457843026:-180 , 1475385826:-120 , 1489292626:-180 , 1506835426:-120 , 1520742226:-180 },
"America/Montreal":{ 1213482226:-240 , 1225607026:-300 , 1236497026:-240 , 1257056626:-300 , 1268551426:-240 , 1289111026:-300 , 1300001026:-240 , 1320560626:-300 , 1331450626:-240 , 1352010226:-300 , 1362900226:-240 , 1383459826:-300 , 1394349826:-240 , 1414909426:-300 , 1425799426:-240 , 1446359026:-300 , 1457853826:-240 , 1478413426:-300 , 1489303426:-240 , 1509863026:-300 , 1520753026:-240 },
"America/Montserrat":{ 1213482227:-240 },
"America/Nassau":{ 1213482228:-240 , 1225607028:-300 , 1236497028:-240 , 1257056628:-300 , 1268551428:-240 , 1289111028:-300 , 1300001028:-240 , 1320560628:-300 , 1331450628:-240 , 1352010228:-300 , 1362900228:-240 , 1383459828:-300 , 1394349828:-240 , 1414909428:-300 , 1425799428:-240 , 1446359028:-300 , 1457853828:-240 , 1478413428:-300 , 1489303428:-240 , 1509863028:-300 , 1520753028:-240 },
"America/New York":{ 1213482229:-240 , 1225607029:-300 , 1236497029:-240 , 1257056629:-300 , 1268551429:-240 , 1289111029:-300 , 1300001029:-240 , 1320560629:-300 , 1331450629:-240 , 1352010229:-300 , 1362900229:-240 , 1383459829:-300 , 1394349829:-240 , 1414909429:-300 , 1425799429:-240 , 1446359029:-300 , 1457853829:-240 , 1478413429:-300 , 1489303429:-240 , 1509863029:-300 , 1520753029:-240 },
"America/Nipigon":{ 1213482229:-240 , 1225607029:-300 , 1236497029:-240 , 1257056629:-300 , 1268551429:-240 , 1289111029:-300 , 1300001029:-240 , 1320560629:-300 , 1331450629:-240 , 1352010229:-300 , 1362900229:-240 , 1383459829:-300 , 1394349829:-240 , 1414909429:-300 , 1425799429:-240 , 1446359029:-300 , 1457853829:-240 , 1478413429:-300 , 1489303429:-240 , 1509863029:-300 , 1520753029:-240 },
"America/Nome":{ 1213482230:-480 , 1225621430:-540 , 1236511430:-480 , 1257071030:-540 , 1268565830:-480 , 1289125430:-540 , 1300015430:-480 , 1320575030:-540 , 1331465030:-480 , 1352024630:-540 , 1362914630:-480 , 1383474230:-540 , 1394364230:-480 , 1414923830:-540 , 1425813830:-480 , 1446373430:-540 , 1457868230:-480 , 1478427830:-540 , 1489317830:-480 , 1509877430:-540 , 1520767430:-480 },
"America/Noronha":{ 1213482231:-120 },
"America/Panama":{ 1213482232:-300 },
"America/Pangnirtung":{ 1213482233:-240 , 1225607033:-300 , 1236497033:-240 , 1257056633:-300 , 1268551433:-240 , 1289111033:-300 , 1300001033:-240 , 1320560633:-300 , 1331450633:-240 , 1352010233:-300 , 1362900233:-240 , 1383459833:-300 , 1394349833:-240 , 1414909433:-300 , 1425799433:-240 , 1446359033:-300 , 1457853833:-240 , 1478413433:-300 , 1489303433:-240 , 1509863033:-300 , 1520753033:-240 },
"America/Paramaribo":{ 1213482233:-180 },
"America/Phoenix":{ 1213482234:-420 },
"America/Port of Spain":{ 1213482235:-240 },
"America/Port-au-Prince":{ 1213482236:-300 },
"America/Porto Acre":{ 1213482236:-300 },
"America/Porto Velho":{ 1213482237:-240 },
"America/Puerto Rico":{ 1213482238:-240 },
"America/Rainy River":{ 1213482239:-300 , 1225610639:-360 , 1236500639:-300 , 1257060239:-360 , 1268555039:-300 , 1289114639:-360 , 1300004639:-300 , 1320564239:-360 , 1331454239:-300 , 1352013839:-360 , 1362903839:-300 , 1383463439:-360 , 1394353439:-300 , 1414913039:-360 , 1425803039:-300 , 1446362639:-360 , 1457857439:-300 , 1478417039:-360 , 1489307039:-300 , 1509866639:-360 , 1520756639:-300 },
"America/Rankin Inlet":{ 1213482239:-300 , 1225610639:-360 , 1236500639:-300 , 1257060239:-360 , 1268555039:-300 , 1289114639:-360 , 1300004639:-300 , 1320564239:-360 , 1331454239:-300 , 1352013839:-360 , 1362903839:-300 , 1383463439:-360 , 1394353439:-300 , 1414913039:-360 , 1425803039:-300 , 1446362639:-360 , 1457857439:-300 , 1478417039:-360 , 1489307039:-300 , 1509866639:-360 , 1520756639:-300 },
"America/Recife":{ 1213482240:-180 },
"America/Regina":{ 1213482241:-360 },
"America/Resolute":{ 1213482242:-300 },
"America/Rio Branco":{ 1213482242:-300 },
"America/Rosario":{ 1213482243:-180 , 1223177043:-120 , 1237083843:-180 , 1254626643:-120 , 1269138243:-180 , 1286076243:-120 , 1300587843:-180 , 1317525843:-120 , 1332037443:-180 , 1349580243:-120 , 1363487043:-180 , 1381029843:-120 , 1394936643:-180 , 1412479443:-120 , 1426386243:-180 , 1443929043:-120 , 1458440643:-180 , 1475378643:-120 , 1489890243:-180 , 1506828243:-120 , 1521339843:-180 },
"America/Santiago":{ 1213482244:-240 , 1223785444:-180 , 1237087444:-240 , 1255235044:-180 , 1268537044:-240 , 1286684644:-180 , 1299986644:-240 , 1318134244:-180 , 1331436244:-240 , 1350188644:-180 , 1362885844:-240 , 1381638244:-180 , 1394335444:-240 , 1413087844:-180 , 1426389844:-240 , 1444537444:-180 , 1457839444:-240 , 1475987044:-180 , 1489289044:-240 , 1508041444:-180 , 1520738644:-240 },
"America/Santo Domingo":{ 1213482245:-240 },
"America/Sao Paulo":{ 1213482245:-180 , 1223781845:-120 , 1234664645:-180 , 1255231445:-120 , 1266719045:-180 , 1286681045:-120 , 1298168645:-180 , 1318130645:-120 , 1329618245:-180 , 1350185045:-120 , 1361067845:-180 , 1381634645:-120 , 1392517445:-180 , 1413084245:-120 , 1423967045:-180 , 1444533845:-120 , 1456021445:-180 , 1475983445:-120 , 1487471045:-180 , 1507433045:-120 , 1518920645:-180 },
"America/Scoresbysund":{ 1213482246:0 , 1224984246:-60 , 1238289846:0 , 1256433846:-60 , 1269739446:0 , 1288488246:-60 , 1301189046:0 , 1319937846:-60 , 1332638646:0 , 1351387446:-60 , 1364693046:0 , 1382837046:-60 , 1396142646:0 , 1414286646:-60 , 1427592246:0 , 1445736246:-60 , 1459041846:0 , 1477790646:-60 , 1490491446:0 , 1509240246:-60 , 1521941046:0 },
"America/Shiprock":{ 1213482247:-360 , 1225614247:-420 , 1236504247:-360 , 1257063847:-420 , 1268558647:-360 , 1289118247:-420 , 1300008247:-360 , 1320567847:-420 , 1331457847:-360 , 1352017447:-420 , 1362907447:-360 , 1383467047:-420 , 1394357047:-360 , 1414916647:-420 , 1425806647:-360 , 1446366247:-420 , 1457861047:-360 , 1478420647:-420 , 1489310647:-360 , 1509870247:-420 , 1520760247:-360 },
"America/St Barthelemy":{ 1213482248:-240 },
"America/St Johns":{ 1213482248:-150 , 1225596248:-210 , 1236486248:-150 , 1257045848:-210 , 1268540648:-150 , 1289100248:-210 , 1299990248:-150 , 1320549848:-210 , 1331439848:-150 , 1351999448:-210 , 1362889448:-150 , 1383449048:-210 , 1394339048:-150 , 1414898648:-210 , 1425788648:-150 , 1446348248:-210 , 1457843048:-150 , 1478402648:-210 , 1489292648:-150 , 1509852248:-210 , 1520742248:-150 },
"America/St Kitts":{ 1213482249:-240 },
"America/St Lucia":{ 1213482250:-240 },
"America/St Thomas":{ 1213482251:-240 },
"America/St Vincent":{ 1213482251:-240 },
"America/Swift Current":{ 1213482252:-360 },
"America/Tegucigalpa":{ 1213482253:-360 },
"America/Thule":{ 1213482254:-180 , 1225603454:-240 , 1236493454:-180 , 1257053054:-240 , 1268547854:-180 , 1289107454:-240 , 1299997454:-180 , 1320557054:-240 , 1331447054:-180 , 1352006654:-240 , 1362896654:-180 , 1383456254:-240 , 1394346254:-180 , 1414905854:-240 , 1425795854:-180 , 1446355454:-240 , 1457850254:-180 , 1478409854:-240 , 1489299854:-180 , 1509859454:-240 , 1520749454:-180 },
"America/Thunder Bay":{ 1213482254:-240 , 1225607054:-300 , 1236497054:-240 , 1257056654:-300 , 1268551454:-240 , 1289111054:-300 , 1300001054:-240 , 1320560654:-300 , 1331450654:-240 , 1352010254:-300 , 1362900254:-240 , 1383459854:-300 , 1394349854:-240 , 1414909454:-300 , 1425799454:-240 , 1446359054:-300 , 1457853854:-240 , 1478413454:-300 , 1489303454:-240 , 1509863054:-300 , 1520753054:-240 },
"America/Tijuana":{ 1213482255:-420 , 1225013055:-480 , 1238927055:-420 , 1256462655:-480 , 1270376655:-420 , 1288517055:-480 , 1301826255:-420 , 1319966655:-480 , 1333275855:-420 , 1351416255:-480 , 1365330255:-420 , 1382865855:-480 , 1396779855:-420 , 1414315455:-480 , 1428229455:-420 , 1445765055:-480 , 1459679055:-420 , 1477819455:-480 , 1491128655:-420 , 1509269055:-480 , 1522578255:-420 },
"America/Toronto":{ 1213482256:-240 , 1225607056:-300 , 1236497056:-240 , 1257056656:-300 , 1268551456:-240 , 1289111056:-300 , 1300001056:-240 , 1320560656:-300 , 1331450656:-240 , 1352010256:-300 , 1362900256:-240 , 1383459856:-300 , 1394349856:-240 , 1414909456:-300 , 1425799456:-240 , 1446359056:-300 , 1457853856:-240 , 1478413456:-300 , 1489303456:-240 , 1509863056:-300 , 1520753056:-240 },
"America/Tortola":{ 1213482257:-240 },
"America/Vancouver":{ 1213482258:-420 , 1225617858:-480 , 1236507858:-420 , 1257067458:-480 , 1268562258:-420 , 1289121858:-480 , 1300011858:-420 , 1320571458:-480 , 1331461458:-420 , 1352021058:-480 , 1362911058:-420 , 1383470658:-480 , 1394360658:-420 , 1414920258:-480 , 1425810258:-420 , 1446369858:-480 , 1457864658:-420 , 1478424258:-480 , 1489314258:-420 , 1509873858:-480 , 1520763858:-420 },
"America/Virgin":{ 1213482258:-240 },
"America/Whitehorse":{ 1213482259:-420 , 1225617859:-480 , 1236507859:-420 , 1257067459:-480 , 1268562259:-420 , 1289121859:-480 , 1300011859:-420 , 1320571459:-480 , 1331461459:-420 , 1352021059:-480 , 1362911059:-420 , 1383470659:-480 , 1394360659:-420 , 1414920259:-480 , 1425810259:-420 , 1446369859:-480 , 1457864659:-420 , 1478424259:-480 , 1489314259:-420 , 1509873859:-480 , 1520763859:-420 },
"America/Winnipeg":{ 1213482260:-300 , 1225610660:-360 , 1236500660:-300 , 1257060260:-360 , 1268555060:-300 , 1289114660:-360 , 1300004660:-300 , 1320564260:-360 , 1331454260:-300 , 1352013860:-360 , 1362903860:-300 , 1383463460:-360 , 1394353460:-300 , 1414913060:-360 , 1425803060:-300 , 1446362660:-360 , 1457857460:-300 , 1478417060:-360 , 1489307060:-300 , 1509866660:-360 , 1520756660:-300 },
"America/Yakutat":{ 1213482261:-480 , 1225621461:-540 , 1236511461:-480 , 1257071061:-540 , 1268565861:-480 , 1289125461:-540 , 1300015461:-480 , 1320575061:-540 , 1331465061:-480 , 1352024661:-540 , 1362914661:-480 , 1383474261:-540 , 1394364261:-480 , 1414923861:-540 , 1425813861:-480 , 1446373461:-540 , 1457868261:-480 , 1478427861:-540 , 1489317861:-480 , 1509877461:-540 , 1520767461:-480 },
"America/Yellowknife":{ 1213482261:-360 , 1225614261:-420 , 1236504261:-360 , 1257063861:-420 , 1268558661:-360 , 1289118261:-420 , 1300008261:-360 , 1320567861:-420 , 1331457861:-360 , 1352017461:-420 , 1362907461:-360 , 1383467061:-420 , 1394357061:-360 , 1414916661:-420 , 1425806661:-360 , 1446366261:-420 , 1457861061:-360 , 1478420661:-420 , 1489310661:-360 , 1509870261:-420 , 1520760261:-360 },
"Antarctica/Casey":{ 1213482262:480 },
"Antarctica/Davis":{ 1213482263:420 },
"Antarctica/DumontDUrville":{ 1213482264:600 },
"Antarctica/Mawson":{ 1213482264:360 },
"Antarctica/McMurdo":{ 1213482265:720 , 1222525465:780 , 1238855065:720 , 1253975065:780 , 1270304665:720 , 1285424665:780 , 1301754265:720 , 1316874265:780 , 1333203865:720 , 1348928665:780 , 1365258265:720 , 1380378265:780 , 1396707865:720 , 1411827865:780 , 1428157465:720 , 1443277465:780 , 1459607065:720 , 1474727065:780 , 1491056665:720 , 1506176665:780 , 1522506265:720 },
"Antarctica/Palmer":{ 1213482266:-240 , 1223785466:-180 , 1237087466:-240 , 1255235066:-180 , 1268537066:-240 , 1286684666:-180 , 1299986666:-240 , 1318134266:-180 , 1331436266:-240 , 1350188666:-180 , 1362885866:-240 , 1381638266:-180 , 1394335466:-240 , 1413087866:-180 , 1426389866:-240 , 1444537466:-180 , 1457839466:-240 , 1475987066:-180 , 1489289066:-240 , 1508041466:-180 , 1520738666:-240 },
"Antarctica/Rothera":{ 1213482267:-180 },
"Antarctica/South Pole":{ 1213482267:720 , 1222525467:780 , 1238855067:720 , 1253975067:780 , 1270304667:720 , 1285424667:780 , 1301754267:720 , 1316874267:780 , 1333203867:720 , 1348928667:780 , 1365258267:720 , 1380378267:780 , 1396707867:720 , 1411827867:780 , 1428157467:720 , 1443277467:780 , 1459607067:720 , 1474727067:780 , 1491056667:720 , 1506176667:780 , 1522506267:720 },
"Antarctica/Syowa":{ 1213482268:180 },
"Antarctica/Vostok":{ 1213482269:360 },
"Arctic/Longyearbyen":{ 1213482270:120 , 1224984270:60 , 1238289870:120 , 1256433870:60 , 1269739470:120 , 1288488270:60 , 1301189070:120 , 1319937870:60 , 1332638670:120 , 1351387470:60 , 1364693070:120 , 1382837070:60 , 1396142670:120 , 1414286670:60 , 1427592270:120 , 1445736270:60 , 1459041870:120 , 1477790670:60 , 1490491470:120 , 1509240270:60 , 1521941070:120 },
"Asia/Aden":{ 1213482270:180 },
"Asia/Almaty":{ 1213482271:360 },
"Asia/Amman":{ 1213482272:180 , 1225405472:120 , 1238019872:180 , 1256855072:120 , 1269469472:180 , 1288304672:120 , 1301523872:180 , 1319754272:120 , 1332973472:180 , 1351203872:120 , 1364423072:180 , 1382653472:120 , 1395872672:180 , 1414707872:120 , 1427322272:180 , 1446157472:120 , 1459376672:180 , 1477607072:120 , 1490826272:180 , 1509056672:120 , 1522275872:180 },
"Asia/Anadyr":{ 1213482273:780 , 1224944673:720 , 1238250273:780 , 1256394273:720 , 1269699873:780 , 1288448673:720 , 1301149473:780 , 1319898273:720 , 1332599073:780 , 1351347873:720 , 1364653473:780 , 1382797473:720 , 1396103073:780 , 1414247073:720 , 1427552673:780 , 1445696673:720 , 1459002273:780 , 1477751073:720 , 1490451873:780 , 1509200673:720 , 1521901473:780 },
"Asia/Aqtau":{ 1213482274:300 },
"Asia/Aqtobe":{ 1213482274:300 },
"Asia/Ashgabat":{ 1213482275:300 },
"Asia/Ashkhabad":{ 1213482276:300 },
"Asia/Baghdad":{ 1213482277:180 },
"Asia/Bahrain":{ 1213482277:180 },
"Asia/Baku":{ 1213482278:300 , 1224980678:240 , 1238286278:300 , 1256430278:240 , 1269735878:300 , 1288484678:240 , 1301185478:300 , 1319934278:240 , 1332635078:300 , 1351383878:240 , 1364689478:300 , 1382833478:240 , 1396139078:300 , 1414283078:240 , 1427588678:300 , 1445732678:240 , 1459038278:300 , 1477787078:240 , 1490487878:300 , 1509236678:240 , 1521937478:300 },
"Asia/Bangkok":{ 1213482279:420 },
"Asia/Beirut":{ 1213482280:180 , 1224969880:120 , 1238279080:180 , 1256419480:120 , 1269728680:180 , 1288473880:120 , 1301178280:180 , 1319923480:120 , 1332627880:180 , 1351373080:120 , 1364682280:180 , 1382822680:120 , 1396131880:180 , 1414272280:120 , 1427581480:180 , 1445721880:120 , 1459031080:180 , 1477776280:120 , 1490480680:180 , 1509225880:120 , 1521930280:180 },
"Asia/Bishkek":{ 1213482280:360 },
"Asia/Brunei":{ 1213482281:480 },
"Asia/Calcutta":{ 1213482282:330 },
"Asia/Choibalsan":{ 1213482283:540 },
"Asia/Chongqing":{ 1213482283:480 },
"Asia/Chungking":{ 1213482284:480 },
"Asia/Colombo":{ 1213482285:330 },
"Asia/Dacca":{ 1213482286:360 },
"Asia/Damascus":{ 1213482286:180 , 1222809886:120 , 1238711086:180 , 1254345886:120 , 1270160686:180 , 1285881886:120 , 1301610286:180 , 1317417886:120 , 1333664686:180 , 1349040286:120 , 1365114286:180 , 1380576286:120 , 1396563886:180 , 1412112286:120 , 1428013486:180 , 1443648286:120 , 1459463086:180 , 1475270686:120 , 1491517486:180 , 1506806686:120 , 1522967086:180 },
"Asia/Dhaka":{ 1213482287:360 },
"Asia/Dili":{ 1213482288:540 },
"Asia/Dubai":{ 1213482289:240 },
"Asia/Dushanbe":{ 1213482289:300 },
"Asia/Gaza":{ 1213482290:180 , 1221089090:120 , 1238538290:180 , 1252538690:120 , 1270074290:180 , 1283988290:120 , 1301610290:180 , 1315437890:120 , 1333232690:180 , 1347492290:120 , 1364768690:180 , 1378941890:120 , 1396304690:180 , 1410391490:120 , 1427840690:180 , 1441841090:120 , 1459463090:180 , 1473290690:120 , 1490999090:180 , 1505345090:120 , 1522535090:180 },
"Asia/Harbin":{ 1213482291:480 },
"Asia/Ho Chi Minh":{ 1213482292:420 },
"Asia/Hong Kong":{ 1213482292:480 },
"Asia/Hovd":{ 1213482293:420 },
"Asia/Irkutsk":{ 1213482294:540 , 1224959094:480 , 1238264694:540 , 1256408694:480 , 1269714294:540 , 1288463094:480 , 1301163894:540 , 1319912694:480 , 1332613494:540 , 1351362294:480 , 1364667894:540 , 1382811894:480 , 1396117494:540 , 1414261494:480 , 1427567094:540 , 1445711094:480 , 1459016694:540 , 1477765494:480 , 1490466294:540 , 1509215094:480 , 1521915894:540 },
"Asia/Istanbul":{ 1213482295:180 , 1224984295:120 , 1238289895:180 , 1256433895:120 , 1269739495:180 , 1288488295:120 , 1301189095:180 , 1319937895:120 , 1332638695:180 , 1351387495:120 , 1364693095:180 , 1382837095:120 , 1396142695:180 , 1414286695:120 , 1427592295:180 , 1445736295:120 , 1459041895:180 , 1477790695:120 , 1490491495:180 , 1509240295:120 , 1521941095:180 },
"Asia/Jakarta":{ 1213482295:420 },
"Asia/Jayapura":{ 1213482296:540 },
"Asia/Jerusalem":{ 1213482297:180 , 1223162697:120 , 1238113497:180 , 1254007497:120 , 1269563097:180 , 1284247497:120 , 1301617497:180 , 1317511497:120 , 1333067097:180 , 1348356297:120 , 1364516697:180 , 1378596297:120 , 1395966297:180 , 1411860297:120 , 1427415897:180 , 1442705097:120 , 1459470297:180 , 1475969097:120 , 1490919897:180 , 1506209097:120 , 1522369497:180 },
"Asia/Kabul":{ 1213482298:270 },
"Asia/Kamchatka":{ 1213482298:780 , 1224944698:720 , 1238250298:780 , 1256394298:720 , 1269699898:780 , 1288448698:720 , 1301149498:780 , 1319898298:720 , 1332599098:780 , 1351347898:720 , 1364653498:780 , 1382797498:720 , 1396103098:780 , 1414247098:720 , 1427552698:780 , 1445696698:720 , 1459002298:780 , 1477751098:720 , 1490451898:780 , 1509200698:720 , 1521901498:780 },
"Asia/Karachi":{ 1213482299:300 },
"Asia/Kashgar":{ 1213482300:480 },
"Asia/Katmandu":{ 1213482301:345 },
"Asia/Kolkata":{ 1213482301:330 },
"Asia/Krasnoyarsk":{ 1213482302:480 , 1224962702:420 , 1238268302:480 , 1256412302:420 , 1269717902:480 , 1288466702:420 , 1301167502:480 , 1319916302:420 , 1332617102:480 , 1351365902:420 , 1364671502:480 , 1382815502:420 , 1396121102:480 , 1414265102:420 , 1427570702:480 , 1445714702:420 , 1459020302:480 , 1477769102:420 , 1490469902:480 , 1509218702:420 , 1521919502:480 },
"Asia/Kuala Lumpur":{ 1213482303:480 },
"Asia/Kuching":{ 1213482304:480 },
"Asia/Kuwait":{ 1213482304:180 },
"Asia/Macao":{ 1213482305:480 },
"Asia/Macau":{ 1213482306:480 },
"Asia/Magadan":{ 1213482307:720 , 1224948307:660 , 1238253907:720 , 1256397907:660 , 1269703507:720 , 1288452307:660 , 1301153107:720 , 1319901907:660 , 1332602707:720 , 1351351507:660 , 1364657107:720 , 1382801107:660 , 1396106707:720 , 1414250707:660 , 1427556307:720 , 1445700307:660 , 1459005907:720 , 1477754707:660 , 1490455507:720 , 1509204307:660 , 1521905107:720 },
"Asia/Makassar":{ 1213482308:480 },
"Asia/Manila":{ 1213482308:480 },
"Asia/Muscat":{ 1213482309:240 },
"Asia/New Delhi":{ 1213482310:330 },
"Asia/Nicosia":{ 1213482311:180 , 1224984311:120 , 1238289911:180 , 1256433911:120 , 1269739511:180 , 1288488311:120 , 1301189111:180 , 1319937911:120 , 1332638711:180 , 1351387511:120 , 1364693111:180 , 1382837111:120 , 1396142711:180 , 1414286711:120 , 1427592311:180 , 1445736311:120 , 1459041911:180 , 1477790711:120 , 1490491511:180 , 1509240311:120 , 1521941111:180 },
"Asia/Novosibirsk":{ 1213482311:420 , 1224966311:360 , 1238271911:420 , 1256415911:360 , 1269721511:420 , 1288470311:360 , 1301171111:420 , 1319919911:360 , 1332620711:420 , 1351369511:360 , 1364675111:420 , 1382819111:360 , 1396124711:420 , 1414268711:360 , 1427574311:420 , 1445718311:360 , 1459023911:420 , 1477772711:360 , 1490473511:420 , 1509222311:360 , 1521923111:420 },
"Asia/Omsk":{ 1213482312:420 , 1224966312:360 , 1238271912:420 , 1256415912:360 , 1269721512:420 , 1288470312:360 , 1301171112:420 , 1319919912:360 , 1332620712:420 , 1351369512:360 , 1364675112:420 , 1382819112:360 , 1396124712:420 , 1414268712:360 , 1427574312:420 , 1445718312:360 , 1459023912:420 , 1477772712:360 , 1490473512:420 , 1509222312:360 , 1521923112:420 },
"Asia/Oral":{ 1213482313:300 },
"Asia/Phnom Penh":{ 1213482314:420 },
"Asia/Pontianak":{ 1213482314:420 },
"Asia/Pyongyang":{ 1213482315:540 },
"Asia/Qatar":{ 1213482316:180 },
"Asia/Qyzylorda":{ 1213482317:360 },
"Asia/Rangoon":{ 1213482317:390 },
"Asia/Riyadh":{ 1213482318:180 },
"Asia/Saigon":{ 1213482319:420 },
"Asia/Sakhalin":{ 1213482319:660 , 1224951919:600 , 1238257519:660 , 1256401519:600 , 1269707119:660 , 1288455919:600 , 1301156719:660 , 1319905519:600 , 1332606319:660 , 1351355119:600 , 1364660719:660 , 1382804719:600 , 1396110319:660 , 1414254319:600 , 1427559919:660 , 1445703919:600 , 1459009519:660 , 1477758319:600 , 1490459119:660 , 1509207919:600 , 1521908719:660 },
"Asia/Samarkand":{ 1213482320:300 },
"Asia/Seoul":{ 1213482321:540 },
"Asia/Shanghai":{ 1213482322:480 },
"Asia/Singapore":{ 1213482322:480 },
"Asia/Taipei":{ 1213482323:480 },
"Asia/Tashkent":{ 1213482324:300 },
"Asia/Tbilisi":{ 1213482325:240 },
"Asia/Tehran":{ 1213482325:270 , 1221942325:210 , 1237670725:270 , 1253564725:210 , 1269206725:270 , 1285100725:210 , 1300742725:270 , 1316636725:210 , 1332278725:270 , 1348172725:210 , 1363901125:270 , 1379795125:210 , 1395437125:270 , 1411331125:210 , 1426973125:270 , 1442867125:210 , 1458509125:270 , 1474403125:210 , 1490131525:270 , 1506025525:210 , 1521667525:270 },
"Asia/Tel Aviv":{ 1213482326:180 , 1223162726:120 , 1238113526:180 , 1254007526:120 , 1269563126:180 , 1284247526:120 , 1301617526:180 , 1317511526:120 , 1333067126:180 , 1348356326:120 , 1364516726:180 , 1378596326:120 , 1395966326:180 , 1411860326:120 , 1427415926:180 , 1442705126:120 , 1459470326:180 , 1475969126:120 , 1490919926:180 , 1506209126:120 , 1522369526:180 },
"Asia/Thimbu":{ 1213482327:360 },
"Asia/Thimphu":{ 1213482328:360 },
"Asia/Tokyo":{ 1213482329:540 },
"Asia/Ujung Pandang":{ 1213482329:480 },
"Asia/Ulaanbaatar":{ 1213482330:480 },
"Asia/Ulan Bator":{ 1213482331:480 },
"Asia/Urumqi":{ 1213482332:480 },
"Asia/Vientiane":{ 1213482332:420 },
"Asia/Vladivostok":{ 1213482333:660 , 1224951933:600 , 1238257533:660 , 1256401533:600 , 1269707133:660 , 1288455933:600 , 1301156733:660 , 1319905533:600 , 1332606333:660 , 1351355133:600 , 1364660733:660 , 1382804733:600 , 1396110333:660 , 1414254333:600 , 1427559933:660 , 1445703933:600 , 1459009533:660 , 1477758333:600 , 1490459133:660 , 1509207933:600 , 1521908733:660 },
"Asia/Yakutsk":{ 1213482334:600 , 1224955534:540 , 1238261134:600 , 1256405134:540 , 1269710734:600 , 1288459534:540 , 1301160334:600 , 1319909134:540 , 1332609934:600 , 1351358734:540 , 1364664334:600 , 1382808334:540 , 1396113934:600 , 1414257934:540 , 1427563534:600 , 1445707534:540 , 1459013134:600 , 1477761934:540 , 1490462734:600 , 1509211534:540 , 1521912334:600 },
"Asia/Yekaterinburg":{ 1213482335:360 , 1224969935:300 , 1238275535:360 , 1256419535:300 , 1269725135:360 , 1288473935:300 , 1301174735:360 , 1319923535:300 , 1332624335:360 , 1351373135:300 , 1364678735:360 , 1382822735:300 , 1396128335:360 , 1414272335:300 , 1427577935:360 , 1445721935:300 , 1459027535:360 , 1477776335:300 , 1490477135:360 , 1509225935:300 , 1521926735:360 },
"Asia/Yerevan":{ 1213482335:300 , 1224973535:240 , 1238279135:300 , 1256423135:240 , 1269728735:300 , 1288477535:240 , 1301178335:300 , 1319927135:240 , 1332627935:300 , 1351376735:240 , 1364682335:300 , 1382826335:240 , 1396131935:300 , 1414275935:240 , 1427581535:300 , 1445725535:240 , 1459031135:300 , 1477779935:240 , 1490480735:300 , 1509229535:240 , 1521930335:300 },
"Atlantic/Azores":{ 1213482336:0 , 1224984336:-60 , 1238289936:0 , 1256433936:-60 , 1269739536:0 , 1288488336:-60 , 1301189136:0 , 1319937936:-60 , 1332638736:0 , 1351387536:-60 , 1364693136:0 , 1382837136:-60 , 1396142736:0 , 1414286736:-60 , 1427592336:0 , 1445736336:-60 , 1459041936:0 , 1477790736:-60 , 1490491536:0 , 1509240336:-60 , 1521941136:0 },
"Atlantic/Bermuda":{ 1213482337:-180 , 1225603537:-240 , 1236493537:-180 , 1257053137:-240 , 1268547937:-180 , 1289107537:-240 , 1299997537:-180 , 1320557137:-240 , 1331447137:-180 , 1352006737:-240 , 1362896737:-180 , 1383456337:-240 , 1394346337:-180 , 1414905937:-240 , 1425795937:-180 , 1446355537:-240 , 1457850337:-180 , 1478409937:-240 , 1489299937:-180 , 1509859537:-240 , 1520749537:-180 },
"Atlantic/Canary":{ 1213482338:60 , 1224984338:0 , 1238289938:60 , 1256433938:0 , 1269739538:60 , 1288488338:0 , 1301189138:60 , 1319937938:0 , 1332638738:60 , 1351387538:0 , 1364693138:60 , 1382837138:0 , 1396142738:60 , 1414286738:0 , 1427592338:60 , 1445736338:0 , 1459041938:60 , 1477790738:0 , 1490491538:60 , 1509240338:0 , 1521941138:60 },
"Atlantic/Cape Verde":{ 1213482339:-60 },
"Atlantic/Faeroe":{ 1213482339:60 , 1224984339:0 , 1238289939:60 , 1256433939:0 , 1269739539:60 , 1288488339:0 , 1301189139:60 , 1319937939:0 , 1332638739:60 , 1351387539:0 , 1364693139:60 , 1382837139:0 , 1396142739:60 , 1414286739:0 , 1427592339:60 , 1445736339:0 , 1459041939:60 , 1477790739:0 , 1490491539:60 , 1509240339:0 , 1521941139:60 },
"Atlantic/Faroe":{ 1213482340:60 , 1224984340:0 , 1238289940:60 , 1256433940:0 , 1269739540:60 , 1288488340:0 , 1301189140:60 , 1319937940:0 , 1332638740:60 , 1351387540:0 , 1364693140:60 , 1382837140:0 , 1396142740:60 , 1414286740:0 , 1427592340:60 , 1445736340:0 , 1459041940:60 , 1477790740:0 , 1490491540:60 , 1509240340:0 , 1521941140:60 },
"Atlantic/Jan Mayen":{ 1213482341:120 , 1224984341:60 , 1238289941:120 , 1256433941:60 , 1269739541:120 , 1288488341:60 , 1301189141:120 , 1319937941:60 , 1332638741:120 , 1351387541:60 , 1364693141:120 , 1382837141:60 , 1396142741:120 , 1414286741:60 , 1427592341:120 , 1445736341:60 , 1459041941:120 , 1477790741:60 , 1490491541:120 , 1509240341:60 , 1521941141:120 },
"Atlantic/Madeira":{ 1213482342:60 , 1224984342:0 , 1238289942:60 , 1256433942:0 , 1269739542:60 , 1288488342:0 , 1301189142:60 , 1319937942:0 , 1332638742:60 , 1351387542:0 , 1364693142:60 , 1382837142:0 , 1396142742:60 , 1414286742:0 , 1427592342:60 , 1445736342:0 , 1459041942:60 , 1477790742:0 , 1490491542:60 , 1509240342:0 , 1521941142:60 },
"Atlantic/Reykjavik":{ 1213482342:0 },
"Atlantic/South Georgia":{ 1213482343:-120 },
"Atlantic/St Helena":{ 1213482344:0 },
"Atlantic/Stanley":{ 1213482344:-240 , 1220768744:-180 , 1240118744:-240 , 1252218344:-180 , 1271568344:-240 , 1283667944:-180 , 1303017944:-240 , 1315117544:-180 , 1334467544:-240 , 1346567144:-180 , 1366521944:-240 , 1378016744:-180 , 1397971544:-240 , 1410071144:-180 , 1429421144:-240 , 1441520744:-180 , 1460870744:-240 , 1472970344:-180 , 1492320344:-240 , 1504419944:-180 , 1523769944:-240 },
"Australia/ACT":{ 1213482345:600 , 1223137545:660 , 1238862345:600 , 1254587145:660 , 1270311945:600 , 1286036745:660 , 1301761545:600 , 1317486345:660 , 1333211145:600 , 1349540745:660 , 1365265545:600 , 1380990345:660 , 1396715145:600 , 1412439945:660 , 1428164745:600 , 1443889545:660 , 1459614345:600 , 1475339145:660 , 1491063945:600 , 1506788745:660 , 1522513545:600 },
"Australia/Adelaide":{ 1213482346:570 , 1223141146:630 , 1238865946:570 , 1254590746:630 , 1270315546:570 , 1286040346:630 , 1301765146:570 , 1317489946:630 , 1333214746:570 , 1349544346:630 , 1365269146:570 , 1380993946:630 , 1396718746:570 , 1412443546:630 , 1428168346:570 , 1443893146:630 , 1459617946:570 , 1475342746:630 , 1491067546:570 , 1506792346:630 , 1522517146:570 },
"Australia/Brisbane":{ 1213482347:600 },
"Australia/Broken Hill":{ 1213482347:570 , 1223141147:630 , 1238865947:570 , 1254590747:630 , 1270315547:570 , 1286040347:630 , 1301765147:570 , 1317489947:630 , 1333214747:570 , 1349544347:630 , 1365269147:570 , 1380993947:630 , 1396718747:570 , 1412443547:630 , 1428168347:570 , 1443893147:630 , 1459617947:570 , 1475342747:630 , 1491067547:570 , 1506792347:630 , 1522517147:570 },
"Australia/Canberra":{ 1213482348:600 , 1223137548:660 , 1238862348:600 , 1254587148:660 , 1270311948:600 , 1286036748:660 , 1301761548:600 , 1317486348:660 , 1333211148:600 , 1349540748:660 , 1365265548:600 , 1380990348:660 , 1396715148:600 , 1412439948:660 , 1428164748:600 , 1443889548:660 , 1459614348:600 , 1475339148:660 , 1491063948:600 , 1506788748:660 , 1522513548:600 },
"Australia/Currie":{ 1213482349:600 , 1223137549:660 , 1238862349:600 , 1254587149:660 , 1270311949:600 , 1286036749:660 , 1301761549:600 , 1317486349:660 , 1333211149:600 , 1349540749:660 , 1365265549:600 , 1380990349:660 , 1396715149:600 , 1412439949:660 , 1428164749:600 , 1443889549:660 , 1459614349:600 , 1475339149:660 , 1491063949:600 , 1506788749:660 , 1522513549:600 },
"Australia/Darwin":{ 1213482350:570 },
"Australia/Eucla":{ 1213482350:525 , 1224955550:585 , 1238261150:525 },
"Australia/Hobart":{ 1213482351:600 , 1223137551:660 , 1238862351:600 , 1254587151:660 , 1270311951:600 , 1286036751:660 , 1301761551:600 , 1317486351:660 , 1333211151:600 , 1349540751:660 , 1365265551:600 , 1380990351:660 , 1396715151:600 , 1412439951:660 , 1428164751:600 , 1443889551:660 , 1459614351:600 , 1475339151:660 , 1491063951:600 , 1506788751:660 , 1522513551:600 },
"Australia/LHI":{ 1213482352:630 , 1223137552:660 , 1238858752:630 , 1254587152:660 , 1270308352:630 , 1286036752:660 , 1301757952:630 , 1317486352:660 , 1333207552:630 , 1349540752:660 , 1365261952:630 , 1380990352:660 , 1396711552:630 , 1412439952:660 , 1428161152:630 , 1443889552:660 , 1459610752:630 , 1475339152:660 , 1491060352:630 , 1506788752:660 , 1522509952:630 },
"Australia/Lindeman":{ 1213482353:600 },
"Australia/Lord Howe":{ 1213482353:630 , 1223137553:660 , 1238858753:630 , 1254587153:660 , 1270308353:630 , 1286036753:660 , 1301757953:630 , 1317486353:660 , 1333207553:630 , 1349540753:660 , 1365261953:630 , 1380990353:660 , 1396711553:630 , 1412439953:660 , 1428161153:630 , 1443889553:660 , 1459610753:630 , 1475339153:660 , 1491060353:630 , 1506788753:660 , 1522509953:630 },
"Australia/Melbourne":{ 1213482354:600 , 1223137554:660 , 1238862354:600 , 1254587154:660 , 1270311954:600 , 1286036754:660 , 1301761554:600 , 1317486354:660 , 1333211154:600 , 1349540754:660 , 1365265554:600 , 1380990354:660 , 1396715154:600 , 1412439954:660 , 1428164754:600 , 1443889554:660 , 1459614354:600 , 1475339154:660 , 1491063954:600 , 1506788754:660 , 1522513554:600 },
"Australia/NSW":{ 1213482355:600 , 1223137555:660 , 1238862355:600 , 1254587155:660 , 1270311955:600 , 1286036755:660 , 1301761555:600 , 1317486355:660 , 1333211155:600 , 1349540755:660 , 1365265555:600 , 1380990355:660 , 1396715155:600 , 1412439955:660 , 1428164755:600 , 1443889555:660 , 1459614355:600 , 1475339155:660 , 1491063955:600 , 1506788755:660 , 1522513555:600 },
"Australia/North":{ 1213482356:570 },
"Australia/Perth":{ 1213482357:480 , 1224959157:540 , 1238264757:480 },
"Australia/Queensland":{ 1213482357:600 },
"Australia/South":{ 1213482358:570 , 1223141158:630 , 1238865958:570 , 1254590758:630 , 1270315558:570 , 1286040358:630 , 1301765158:570 , 1317489958:630 , 1333214758:570 , 1349544358:630 , 1365269158:570 , 1380993958:630 , 1396718758:570 , 1412443558:630 , 1428168358:570 , 1443893158:630 , 1459617958:570 , 1475342758:630 , 1491067558:570 , 1506792358:630 , 1522517158:570 },
"Australia/Sydney":{ 1213482359:600 , 1223137559:660 , 1238862359:600 , 1254587159:660 , 1270311959:600 , 1286036759:660 , 1301761559:600 , 1317486359:660 , 1333211159:600 , 1349540759:660 , 1365265559:600 , 1380990359:660 , 1396715159:600 , 1412439959:660 , 1428164759:600 , 1443889559:660 , 1459614359:600 , 1475339159:660 , 1491063959:600 , 1506788759:660 , 1522513559:600 },
"Australia/Tasmania":{ 1213482360:600 , 1223137560:660 , 1238862360:600 , 1254587160:660 , 1270311960:600 , 1286036760:660 , 1301761560:600 , 1317486360:660 , 1333211160:600 , 1349540760:660 , 1365265560:600 , 1380990360:660 , 1396715160:600 , 1412439960:660 , 1428164760:600 , 1443889560:660 , 1459614360:600 , 1475339160:660 , 1491063960:600 , 1506788760:660 , 1522513560:600 },
"Australia/Victoria":{ 1213482360:600 , 1223137560:660 , 1238862360:600 , 1254587160:660 , 1270311960:600 , 1286036760:660 , 1301761560:600 , 1317486360:660 , 1333211160:600 , 1349540760:660 , 1365265560:600 , 1380990360:660 , 1396715160:600 , 1412439960:660 , 1428164760:600 , 1443889560:660 , 1459614360:600 , 1475339160:660 , 1491063960:600 , 1506788760:660 , 1522513560:600 },
"Australia/West":{ 1213482361:480 , 1224959161:540 , 1238264761:480 },
"Australia/Yancowinna":{ 1213482362:570 , 1223141162:630 , 1238865962:570 , 1254590762:630 , 1270315562:570 , 1286040362:630 , 1301765162:570 , 1317489962:630 , 1333214762:570 , 1349544362:630 , 1365269162:570 , 1380993962:630 , 1396718762:570 , 1412443562:630 , 1428168362:570 , 1443893162:630 , 1459617962:570 , 1475342762:630 , 1491067562:570 , 1506792362:630 , 1522517162:570 },
"Brazil/Acre":{ 1213482363:-300 },
"Brazil/DeNoronha":{ 1213482364:-120 },
"Brazil/East":{ 1213482364:-180 , 1223781964:-120 , 1234664764:-180 , 1255231564:-120 , 1266719164:-180 , 1286681164:-120 , 1298168764:-180 , 1318130764:-120 , 1329618364:-180 , 1350185164:-120 , 1361067964:-180 , 1381634764:-120 , 1392517564:-180 , 1413084364:-120 , 1423967164:-180 , 1444533964:-120 , 1456021564:-180 , 1475983564:-120 , 1487471164:-180 , 1507433164:-120 , 1518920764:-180 },
"Brazil/West":{ 1213482365:-240 },
"Chile/Continental":{ 1213482366:-240 , 1223785566:-180 , 1237087566:-240 , 1255235166:-180 , 1268537166:-240 , 1286684766:-180 , 1299986766:-240 , 1318134366:-180 , 1331436366:-240 , 1350188766:-180 , 1362885966:-240 , 1381638366:-180 , 1394335566:-240 , 1413087966:-180 , 1426389966:-240 , 1444537566:-180 , 1457839566:-240 , 1475987166:-180 , 1489289166:-240 , 1508041566:-180 , 1520738766:-240 },
"Chile/EasterIsland":{ 1213482367:-360 , 1223785567:-300 , 1237087567:-360 , 1255235167:-300 , 1268537167:-360 , 1286684767:-300 , 1299986767:-360 , 1318134367:-300 , 1331436367:-360 , 1350188767:-300 , 1362885967:-360 , 1381638367:-300 , 1394335567:-360 , 1413087967:-300 , 1426389967:-360 , 1444537567:-300 , 1457839567:-360 , 1475987167:-300 , 1489289167:-360 , 1508041567:-300 , 1520738767:-360 },
"Europe/Amsterdam":{ 1213482367:120 , 1224984367:60 , 1238289967:120 , 1256433967:60 , 1269739567:120 , 1288488367:60 , 1301189167:120 , 1319937967:60 , 1332638767:120 , 1351387567:60 , 1364693167:120 , 1382837167:60 , 1396142767:120 , 1414286767:60 , 1427592367:120 , 1445736367:60 , 1459041967:120 , 1477790767:60 , 1490491567:120 , 1509240367:60 , 1521941167:120 },
"Europe/Andorra":{ 1213482368:120 , 1224984368:60 , 1238289968:120 , 1256433968:60 , 1269739568:120 , 1288488368:60 , 1301189168:120 , 1319937968:60 , 1332638768:120 , 1351387568:60 , 1364693168:120 , 1382837168:60 , 1396142768:120 , 1414286768:60 , 1427592368:120 , 1445736368:60 , 1459041968:120 , 1477790768:60 , 1490491568:120 , 1509240368:60 , 1521941168:120 },
"Europe/Athens":{ 1213482369:180 , 1224984369:120 , 1238289969:180 , 1256433969:120 , 1269739569:180 , 1288488369:120 , 1301189169:180 , 1319937969:120 , 1332638769:180 , 1351387569:120 , 1364693169:180 , 1382837169:120 , 1396142769:180 , 1414286769:120 , 1427592369:180 , 1445736369:120 , 1459041969:180 , 1477790769:120 , 1490491569:180 , 1509240369:120 , 1521941169:180 },
"Europe/Belfast":{ 1213482370:60 , 1224984370:0 , 1238289970:60 , 1256433970:0 , 1269739570:60 , 1288488370:0 , 1301189170:60 , 1319937970:0 , 1332638770:60 , 1351387570:0 , 1364693170:60 , 1382837170:0 , 1396142770:60 , 1414286770:0 , 1427592370:60 , 1445736370:0 , 1459041970:60 , 1477790770:0 , 1490491570:60 , 1509240370:0 , 1521941170:60 },
"Europe/Belgrade":{ 1213482371:120 , 1224984371:60 , 1238289971:120 , 1256433971:60 , 1269739571:120 , 1288488371:60 , 1301189171:120 , 1319937971:60 , 1332638771:120 , 1351387571:60 , 1364693171:120 , 1382837171:60 , 1396142771:120 , 1414286771:60 , 1427592371:120 , 1445736371:60 , 1459041971:120 , 1477790771:60 , 1490491571:120 , 1509240371:60 , 1521941171:120 },
"Europe/Berlin":{ 1213482371:120 , 1224984371:60 , 1238289971:120 , 1256433971:60 , 1269739571:120 , 1288488371:60 , 1301189171:120 , 1319937971:60 , 1332638771:120 , 1351387571:60 , 1364693171:120 , 1382837171:60 , 1396142771:120 , 1414286771:60 , 1427592371:120 , 1445736371:60 , 1459041971:120 , 1477790771:60 , 1490491571:120 , 1509240371:60 , 1521941171:120 },
"Europe/Bratislava":{ 1213482372:120 , 1224984372:60 , 1238289972:120 , 1256433972:60 , 1269739572:120 , 1288488372:60 , 1301189172:120 , 1319937972:60 , 1332638772:120 , 1351387572:60 , 1364693172:120 , 1382837172:60 , 1396142772:120 , 1414286772:60 , 1427592372:120 , 1445736372:60 , 1459041972:120 , 1477790772:60 , 1490491572:120 , 1509240372:60 , 1521941172:120 },
"Europe/Brussels":{ 1213482373:120 , 1224984373:60 , 1238289973:120 , 1256433973:60 , 1269739573:120 , 1288488373:60 , 1301189173:120 , 1319937973:60 , 1332638773:120 , 1351387573:60 , 1364693173:120 , 1382837173:60 , 1396142773:120 , 1414286773:60 , 1427592373:120 , 1445736373:60 , 1459041973:120 , 1477790773:60 , 1490491573:120 , 1509240373:60 , 1521941173:120 },
"Europe/Bucharest":{ 1213482374:180 , 1224984374:120 , 1238289974:180 , 1256433974:120 , 1269739574:180 , 1288488374:120 , 1301189174:180 , 1319937974:120 , 1332638774:180 , 1351387574:120 , 1364693174:180 , 1382837174:120 , 1396142774:180 , 1414286774:120 , 1427592374:180 , 1445736374:120 , 1459041974:180 , 1477790774:120 , 1490491574:180 , 1509240374:120 , 1521941174:180 },
"Europe/Budapest":{ 1213482374:120 , 1224984374:60 , 1238289974:120 , 1256433974:60 , 1269739574:120 , 1288488374:60 , 1301189174:120 , 1319937974:60 , 1332638774:120 , 1351387574:60 , 1364693174:120 , 1382837174:60 , 1396142774:120 , 1414286774:60 , 1427592374:120 , 1445736374:60 , 1459041974:120 , 1477790774:60 , 1490491574:120 , 1509240374:60 , 1521941174:120 },
"Europe/Chisinau":{ 1213482375:180 , 1224984375:120 , 1238289975:180 , 1256433975:120 , 1269739575:180 , 1288488375:120 , 1301189175:180 , 1319937975:120 , 1332638775:180 , 1351387575:120 , 1364693175:180 , 1382837175:120 , 1396142775:180 , 1414286775:120 , 1427592375:180 , 1445736375:120 , 1459041975:180 , 1477790775:120 , 1490491575:180 , 1509240375:120 , 1521941175:180 },
"Europe/Copenhagen":{ 1213482376:120 , 1224984376:60 , 1238289976:120 , 1256433976:60 , 1269739576:120 , 1288488376:60 , 1301189176:120 , 1319937976:60 , 1332638776:120 , 1351387576:60 , 1364693176:120 , 1382837176:60 , 1396142776:120 , 1414286776:60 , 1427592376:120 , 1445736376:60 , 1459041976:120 , 1477790776:60 , 1490491576:120 , 1509240376:60 , 1521941176:120 },
"Europe/Dublin":{ 1213482377:60 , 1224984377:0 , 1238289977:60 , 1256433977:0 , 1269739577:60 , 1288488377:0 , 1301189177:60 , 1319937977:0 , 1332638777:60 , 1351387577:0 , 1364693177:60 , 1382837177:0 , 1396142777:60 , 1414286777:0 , 1427592377:60 , 1445736377:0 , 1459041977:60 , 1477790777:0 , 1490491577:60 , 1509240377:0 , 1521941177:60 },
"Europe/Gibraltar":{ 1213482378:120 , 1224984378:60 , 1238289978:120 , 1256433978:60 , 1269739578:120 , 1288488378:60 , 1301189178:120 , 1319937978:60 , 1332638778:120 , 1351387578:60 , 1364693178:120 , 1382837178:60 , 1396142778:120 , 1414286778:60 , 1427592378:120 , 1445736378:60 , 1459041978:120 , 1477790778:60 , 1490491578:120 , 1509240378:60 , 1521941178:120 },
"Europe/Guernsey":{ 1213482378:60 , 1224984378:0 , 1238289978:60 , 1256433978:0 , 1269739578:60 , 1288488378:0 , 1301189178:60 , 1319937978:0 , 1332638778:60 , 1351387578:0 , 1364693178:60 , 1382837178:0 , 1396142778:60 , 1414286778:0 , 1427592378:60 , 1445736378:0 , 1459041978:60 , 1477790778:0 , 1490491578:60 , 1509240378:0 , 1521941178:60 },
"Europe/Helsinki":{ 1213482379:180 , 1224984379:120 , 1238289979:180 , 1256433979:120 , 1269739579:180 , 1288488379:120 , 1301189179:180 , 1319937979:120 , 1332638779:180 , 1351387579:120 , 1364693179:180 , 1382837179:120 , 1396142779:180 , 1414286779:120 , 1427592379:180 , 1445736379:120 , 1459041979:180 , 1477790779:120 , 1490491579:180 , 1509240379:120 , 1521941179:180 },
"Europe/Isle of Man":{ 1213482380:60 , 1224984380:0 , 1238289980:60 , 1256433980:0 , 1269739580:60 , 1288488380:0 , 1301189180:60 , 1319937980:0 , 1332638780:60 , 1351387580:0 , 1364693180:60 , 1382837180:0 , 1396142780:60 , 1414286780:0 , 1427592380:60 , 1445736380:0 , 1459041980:60 , 1477790780:0 , 1490491580:60 , 1509240380:0 , 1521941180:60 },
"Europe/Istanbul":{ 1213482381:180 , 1224984381:120 , 1238289981:180 , 1256433981:120 , 1269739581:180 , 1288488381:120 , 1301189181:180 , 1319937981:120 , 1332638781:180 , 1351387581:120 , 1364693181:180 , 1382837181:120 , 1396142781:180 , 1414286781:120 , 1427592381:180 , 1445736381:120 , 1459041981:180 , 1477790781:120 , 1490491581:180 , 1509240381:120 , 1521941181:180 },
"Europe/Jersey":{ 1213482381:60 , 1224984381:0 , 1238289981:60 , 1256433981:0 , 1269739581:60 , 1288488381:0 , 1301189181:60 , 1319937981:0 , 1332638781:60 , 1351387581:0 , 1364693181:60 , 1382837181:0 , 1396142781:60 , 1414286781:0 , 1427592381:60 , 1445736381:0 , 1459041981:60 , 1477790781:0 , 1490491581:60 , 1509240381:0 , 1521941181:60 },
"Europe/Kaliningrad":{ 1213482382:180 , 1224980782:120 , 1238286382:180 , 1256430382:120 , 1269735982:180 , 1288484782:120 , 1301185582:180 , 1319934382:120 , 1332635182:180 , 1351383982:120 , 1364689582:180 , 1382833582:120 , 1396139182:180 , 1414283182:120 , 1427588782:180 , 1445732782:120 , 1459038382:180 , 1477787182:120 , 1490487982:180 , 1509236782:120 , 1521937582:180 },
"Europe/Kiev":{ 1213482383:180 , 1224984383:120 , 1238289983:180 , 1256433983:120 , 1269739583:180 , 1288488383:120 , 1301189183:180 , 1319937983:120 , 1332638783:180 , 1351387583:120 , 1364693183:180 , 1382837183:120 , 1396142783:180 , 1414286783:120 , 1427592383:180 , 1445736383:120 , 1459041983:180 , 1477790783:120 , 1490491583:180 , 1509240383:120 , 1521941183:180 },
"Europe/Lisbon":{ 1213482384:60 , 1224984384:0 , 1238289984:60 , 1256433984:0 , 1269739584:60 , 1288488384:0 , 1301189184:60 , 1319937984:0 , 1332638784:60 , 1351387584:0 , 1364693184:60 , 1382837184:0 , 1396142784:60 , 1414286784:0 , 1427592384:60 , 1445736384:0 , 1459041984:60 , 1477790784:0 , 1490491584:60 , 1509240384:0 , 1521941184:60 },
"Europe/Ljubljana":{ 1213482384:120 , 1224984384:60 , 1238289984:120 , 1256433984:60 , 1269739584:120 , 1288488384:60 , 1301189184:120 , 1319937984:60 , 1332638784:120 , 1351387584:60 , 1364693184:120 , 1382837184:60 , 1396142784:120 , 1414286784:60 , 1427592384:120 , 1445736384:60 , 1459041984:120 , 1477790784:60 , 1490491584:120 , 1509240384:60 , 1521941184:120 },
"Europe/London":{ 1213482385:60 , 1224984385:0 , 1238289985:60 , 1256433985:0 , 1269739585:60 , 1288488385:0 , 1301189185:60 , 1319937985:0 , 1332638785:60 , 1351387585:0 , 1364693185:60 , 1382837185:0 , 1396142785:60 , 1414286785:0 , 1427592385:60 , 1445736385:0 , 1459041985:60 , 1477790785:0 , 1490491585:60 , 1509240385:0 , 1521941185:60 },
"Europe/Luxembourg":{ 1213482386:120 , 1224984386:60 , 1238289986:120 , 1256433986:60 , 1269739586:120 , 1288488386:60 , 1301189186:120 , 1319937986:60 , 1332638786:120 , 1351387586:60 , 1364693186:120 , 1382837186:60 , 1396142786:120 , 1414286786:60 , 1427592386:120 , 1445736386:60 , 1459041986:120 , 1477790786:60 , 1490491586:120 , 1509240386:60 , 1521941186:120 },
"Europe/Madrid":{ 1213482387:120 , 1224984387:60 , 1238289987:120 , 1256433987:60 , 1269739587:120 , 1288488387:60 , 1301189187:120 , 1319937987:60 , 1332638787:120 , 1351387587:60 , 1364693187:120 , 1382837187:60 , 1396142787:120 , 1414286787:60 , 1427592387:120 , 1445736387:60 , 1459041987:120 , 1477790787:60 , 1490491587:120 , 1509240387:60 , 1521941187:120 },
"Europe/Malta":{ 1213482387:120 , 1224984387:60 , 1238289987:120 , 1256433987:60 , 1269739587:120 , 1288488387:60 , 1301189187:120 , 1319937987:60 , 1332638787:120 , 1351387587:60 , 1364693187:120 , 1382837187:60 , 1396142787:120 , 1414286787:60 , 1427592387:120 , 1445736387:60 , 1459041987:120 , 1477790787:60 , 1490491587:120 , 1509240387:60 , 1521941187:120 },
"Europe/Mariehamn":{ 1213482388:180 , 1224984388:120 , 1238289988:180 , 1256433988:120 , 1269739588:180 , 1288488388:120 , 1301189188:180 , 1319937988:120 , 1332638788:180 , 1351387588:120 , 1364693188:180 , 1382837188:120 , 1396142788:180 , 1414286788:120 , 1427592388:180 , 1445736388:120 , 1459041988:180 , 1477790788:120 , 1490491588:180 , 1509240388:120 , 1521941188:180 },
"Europe/Minsk":{ 1213482389:180 , 1224980789:120 , 1238286389:180 , 1256430389:120 , 1269735989:180 , 1288484789:120 , 1301185589:180 , 1319934389:120 , 1332635189:180 , 1351383989:120 , 1364689589:180 , 1382833589:120 , 1396139189:180 , 1414283189:120 , 1427588789:180 , 1445732789:120 , 1459038389:180 , 1477787189:120 , 1490487989:180 , 1509236789:120 , 1521937589:180 },
"Europe/Monaco":{ 1213482390:120 , 1224984390:60 , 1238289990:120 , 1256433990:60 , 1269739590:120 , 1288488390:60 , 1301189190:120 , 1319937990:60 , 1332638790:120 , 1351387590:60 , 1364693190:120 , 1382837190:60 , 1396142790:120 , 1414286790:60 , 1427592390:120 , 1445736390:60 , 1459041990:120 , 1477790790:60 , 1490491590:120 , 1509240390:60 , 1521941190:120 },
"Europe/Moscow":{ 1213482391:240 , 1224977191:180 , 1238282791:240 , 1256426791:180 , 1269732391:240 , 1288481191:180 , 1301181991:240 , 1319930791:180 , 1332631591:240 , 1351380391:180 , 1364685991:240 , 1382829991:180 , 1396135591:240 , 1414279591:180 , 1427585191:240 , 1445729191:180 , 1459034791:240 , 1477783591:180 , 1490484391:240 , 1509233191:180 , 1521933991:240 },
"Europe/Nicosia":{ 1213482391:180 , 1224984391:120 , 1238289991:180 , 1256433991:120 , 1269739591:180 , 1288488391:120 , 1301189191:180 , 1319937991:120 , 1332638791:180 , 1351387591:120 , 1364693191:180 , 1382837191:120 , 1396142791:180 , 1414286791:120 , 1427592391:180 , 1445736391:120 , 1459041991:180 , 1477790791:120 , 1490491591:180 , 1509240391:120 , 1521941191:180 },
"Europe/Oslo":{ 1213482392:120 , 1224984392:60 , 1238289992:120 , 1256433992:60 , 1269739592:120 , 1288488392:60 , 1301189192:120 , 1319937992:60 , 1332638792:120 , 1351387592:60 , 1364693192:120 , 1382837192:60 , 1396142792:120 , 1414286792:60 , 1427592392:120 , 1445736392:60 , 1459041992:120 , 1477790792:60 , 1490491592:120 , 1509240392:60 , 1521941192:120 },
"Europe/Paris":{ 1213482393:120 , 1224984393:60 , 1238289993:120 , 1256433993:60 , 1269739593:120 , 1288488393:60 , 1301189193:120 , 1319937993:60 , 1332638793:120 , 1351387593:60 , 1364693193:120 , 1382837193:60 , 1396142793:120 , 1414286793:60 , 1427592393:120 , 1445736393:60 , 1459041993:120 , 1477790793:60 , 1490491593:120 , 1509240393:60 , 1521941193:120 },
"Europe/Podgorica":{ 1213482394:120 , 1224984394:60 , 1238289994:120 , 1256433994:60 , 1269739594:120 , 1288488394:60 , 1301189194:120 , 1319937994:60 , 1332638794:120 , 1351387594:60 , 1364693194:120 , 1382837194:60 , 1396142794:120 , 1414286794:60 , 1427592394:120 , 1445736394:60 , 1459041994:120 , 1477790794:60 , 1490491594:120 , 1509240394:60 , 1521941194:120 },
"Europe/Prague":{ 1213482394:120 , 1224984394:60 , 1238289994:120 , 1256433994:60 , 1269739594:120 , 1288488394:60 , 1301189194:120 , 1319937994:60 , 1332638794:120 , 1351387594:60 , 1364693194:120 , 1382837194:60 , 1396142794:120 , 1414286794:60 , 1427592394:120 , 1445736394:60 , 1459041994:120 , 1477790794:60 , 1490491594:120 , 1509240394:60 , 1521941194:120 },
"Europe/Riga":{ 1213482395:180 , 1224984395:120 , 1238289995:180 , 1256433995:120 , 1269739595:180 , 1288488395:120 , 1301189195:180 , 1319937995:120 , 1332638795:180 , 1351387595:120 , 1364693195:180 , 1382837195:120 , 1396142795:180 , 1414286795:120 , 1427592395:180 , 1445736395:120 , 1459041995:180 , 1477790795:120 , 1490491595:180 , 1509240395:120 , 1521941195:180 },
"Europe/Rome":{ 1213482396:120 , 1224984396:60 , 1238289996:120 , 1256433996:60 , 1269739596:120 , 1288488396:60 , 1301189196:120 , 1319937996:60 , 1332638796:120 , 1351387596:60 , 1364693196:120 , 1382837196:60 , 1396142796:120 , 1414286796:60 , 1427592396:120 , 1445736396:60 , 1459041996:120 , 1477790796:60 , 1490491596:120 , 1509240396:60 , 1521941196:120 },
"Europe/Samara":{ 1213482397:300 , 1224973597:240 , 1238279197:300 , 1256423197:240 , 1269728797:300 , 1288477597:240 , 1301178397:300 , 1319927197:240 , 1332627997:300 , 1351376797:240 , 1364682397:300 , 1382826397:240 , 1396131997:300 , 1414275997:240 , 1427581597:300 , 1445725597:240 , 1459031197:300 , 1477779997:240 , 1490480797:300 , 1509229597:240 , 1521930397:300 },
"Europe/San Marino":{ 1213482397:120 , 1224984397:60 , 1238289997:120 , 1256433997:60 , 1269739597:120 , 1288488397:60 , 1301189197:120 , 1319937997:60 , 1332638797:120 , 1351387597:60 , 1364693197:120 , 1382837197:60 , 1396142797:120 , 1414286797:60 , 1427592397:120 , 1445736397:60 , 1459041997:120 , 1477790797:60 , 1490491597:120 , 1509240397:60 , 1521941197:120 },
"Europe/Sarajevo":{ 1213482398:120 , 1224984398:60 , 1238289998:120 , 1256433998:60 , 1269739598:120 , 1288488398:60 , 1301189198:120 , 1319937998:60 , 1332638798:120 , 1351387598:60 , 1364693198:120 , 1382837198:60 , 1396142798:120 , 1414286798:60 , 1427592398:120 , 1445736398:60 , 1459041998:120 , 1477790798:60 , 1490491598:120 , 1509240398:60 , 1521941198:120 },
"Europe/Simferopol":{ 1213482399:180 , 1224984399:120 , 1238289999:180 , 1256433999:120 , 1269739599:180 , 1288488399:120 , 1301189199:180 , 1319937999:120 , 1332638799:180 , 1351387599:120 , 1364693199:180 , 1382837199:120 , 1396142799:180 , 1414286799:120 , 1427592399:180 , 1445736399:120 , 1459041999:180 , 1477790799:120 , 1490491599:180 , 1509240399:120 , 1521941199:180 },
"Europe/Skopje":{ 1213482400:120 , 1224984400:60 , 1238290000:120 , 1256434000:60 , 1269739600:120 , 1288488400:60 , 1301189200:120 , 1319938000:60 , 1332638800:120 , 1351387600:60 , 1364693200:120 , 1382837200:60 , 1396142800:120 , 1414286800:60 , 1427592400:120 , 1445736400:60 , 1459042000:120 , 1477790800:60 , 1490491600:120 , 1509240400:60 , 1521941200:120 },
"Europe/Sofia":{ 1213482400:180 , 1224984400:120 , 1238290000:180 , 1256434000:120 , 1269739600:180 , 1288488400:120 , 1301189200:180 , 1319938000:120 , 1332638800:180 , 1351387600:120 , 1364693200:180 , 1382837200:120 , 1396142800:180 , 1414286800:120 , 1427592400:180 , 1445736400:120 , 1459042000:180 , 1477790800:120 , 1490491600:180 , 1509240400:120 , 1521941200:180 },
"Europe/Stockholm":{ 1213482401:120 , 1224984401:60 , 1238290001:120 , 1256434001:60 , 1269739601:120 , 1288488401:60 , 1301189201:120 , 1319938001:60 , 1332638801:120 , 1351387601:60 , 1364693201:120 , 1382837201:60 , 1396142801:120 , 1414286801:60 , 1427592401:120 , 1445736401:60 , 1459042001:120 , 1477790801:60 , 1490491601:120 , 1509240401:60 , 1521941201:120 },
"Europe/Tallinn":{ 1213482402:180 , 1224984402:120 , 1238290002:180 , 1256434002:120 , 1269739602:180 , 1288488402:120 , 1301189202:180 , 1319938002:120 , 1332638802:180 , 1351387602:120 , 1364693202:180 , 1382837202:120 , 1396142802:180 , 1414286802:120 , 1427592402:180 , 1445736402:120 , 1459042002:180 , 1477790802:120 , 1490491602:180 , 1509240402:120 , 1521941202:180 },
"Europe/Tirane":{ 1213482403:120 , 1224984403:60 , 1238290003:120 , 1256434003:60 , 1269739603:120 , 1288488403:60 , 1301189203:120 , 1319938003:60 , 1332638803:120 , 1351387603:60 , 1364693203:120 , 1382837203:60 , 1396142803:120 , 1414286803:60 , 1427592403:120 , 1445736403:60 , 1459042003:120 , 1477790803:60 , 1490491603:120 , 1509240403:60 , 1521941203:120 },
"Europe/Tiraspol":{ 1213482403:180 , 1224984403:120 , 1238290003:180 , 1256434003:120 , 1269739603:180 , 1288488403:120 , 1301189203:180 , 1319938003:120 , 1332638803:180 , 1351387603:120 , 1364693203:180 , 1382837203:120 , 1396142803:180 , 1414286803:120 , 1427592403:180 , 1445736403:120 , 1459042003:180 , 1477790803:120 , 1490491603:180 , 1509240403:120 , 1521941203:180 },
"Europe/Uzhgorod":{ 1213482404:180 , 1224984404:120 , 1238290004:180 , 1256434004:120 , 1269739604:180 , 1288488404:120 , 1301189204:180 , 1319938004:120 , 1332638804:180 , 1351387604:120 , 1364693204:180 , 1382837204:120 , 1396142804:180 , 1414286804:120 , 1427592404:180 , 1445736404:120 , 1459042004:180 , 1477790804:120 , 1490491604:180 , 1509240404:120 , 1521941204:180 },
"Europe/Vaduz":{ 1213482405:120 , 1224984405:60 , 1238290005:120 , 1256434005:60 , 1269739605:120 , 1288488405:60 , 1301189205:120 , 1319938005:60 , 1332638805:120 , 1351387605:60 , 1364693205:120 , 1382837205:60 , 1396142805:120 , 1414286805:60 , 1427592405:120 , 1445736405:60 , 1459042005:120 , 1477790805:60 , 1490491605:120 , 1509240405:60 , 1521941205:120 },
"Europe/Vatican":{ 1213482406:120 , 1224984406:60 , 1238290006:120 , 1256434006:60 , 1269739606:120 , 1288488406:60 , 1301189206:120 , 1319938006:60 , 1332638806:120 , 1351387606:60 , 1364693206:120 , 1382837206:60 , 1396142806:120 , 1414286806:60 , 1427592406:120 , 1445736406:60 , 1459042006:120 , 1477790806:60 , 1490491606:120 , 1509240406:60 , 1521941206:120 },
"Europe/Vienna":{ 1213482406:120 , 1224984406:60 , 1238290006:120 , 1256434006:60 , 1269739606:120 , 1288488406:60 , 1301189206:120 , 1319938006:60 , 1332638806:120 , 1351387606:60 , 1364693206:120 , 1382837206:60 , 1396142806:120 , 1414286806:60 , 1427592406:120 , 1445736406:60 , 1459042006:120 , 1477790806:60 , 1490491606:120 , 1509240406:60 , 1521941206:120 },
"Europe/Vilnius":{ 1213482407:180 , 1224984407:120 , 1238290007:180 , 1256434007:120 , 1269739607:180 , 1288488407:120 , 1301189207:180 , 1319938007:120 , 1332638807:180 , 1351387607:120 , 1364693207:180 , 1382837207:120 , 1396142807:180 , 1414286807:120 , 1427592407:180 , 1445736407:120 , 1459042007:180 , 1477790807:120 , 1490491607:180 , 1509240407:120 , 1521941207:180 },
"Europe/Volgograd":{ 1213482408:240 , 1224977208:180 , 1238282808:240 , 1256426808:180 , 1269732408:240 , 1288481208:180 , 1301182008:240 , 1319930808:180 , 1332631608:240 , 1351380408:180 , 1364686008:240 , 1382830008:180 , 1396135608:240 , 1414279608:180 , 1427585208:240 , 1445729208:180 , 1459034808:240 , 1477783608:180 , 1490484408:240 , 1509233208:180 , 1521934008:240 },
"Europe/Warsaw":{ 1213482409:120 , 1224984409:60 , 1238290009:120 , 1256434009:60 , 1269739609:120 , 1288488409:60 , 1301189209:120 , 1319938009:60 , 1332638809:120 , 1351387609:60 , 1364693209:120 , 1382837209:60 , 1396142809:120 , 1414286809:60 , 1427592409:120 , 1445736409:60 , 1459042009:120 , 1477790809:60 , 1490491609:120 , 1509240409:60 , 1521941209:120 },
"Europe/Zagreb":{ 1213482409:120 , 1224984409:60 , 1238290009:120 , 1256434009:60 , 1269739609:120 , 1288488409:60 , 1301189209:120 , 1319938009:60 , 1332638809:120 , 1351387609:60 , 1364693209:120 , 1382837209:60 , 1396142809:120 , 1414286809:60 , 1427592409:120 , 1445736409:60 , 1459042009:120 , 1477790809:60 , 1490491609:120 , 1509240409:60 , 1521941209:120 },
"Europe/Zaporozhye":{ 1213482410:180 , 1224984410:120 , 1238290010:180 , 1256434010:120 , 1269739610:180 , 1288488410:120 , 1301189210:180 , 1319938010:120 , 1332638810:180 , 1351387610:120 , 1364693210:180 , 1382837210:120 , 1396142810:180 , 1414286810:120 , 1427592410:180 , 1445736410:120 , 1459042010:180 , 1477790810:120 , 1490491610:180 , 1509240410:120 , 1521941210:180 },
"Europe/Zurich":{ 1213482411:120 , 1224984411:60 , 1238290011:120 , 1256434011:60 , 1269739611:120 , 1288488411:60 , 1301189211:120 , 1319938011:60 , 1332638811:120 , 1351387611:60 , 1364693211:120 , 1382837211:60 , 1396142811:120 , 1414286811:60 , 1427592411:120 , 1445736411:60 , 1459042011:120 , 1477790811:60 , 1490491611:120 , 1509240411:60 , 1521941211:120 },
"GMT":{ 1213482412:0 },
"Indian Ocean/Antananarivo":{ 1213482412:180 },
"Indian Ocean/Chagos":{ 1213482413:360 },
"Indian Ocean/Christmas":{ 1213482413:420 },
"Indian Ocean/Cocos":{ 1213482414:390 },
"Indian Ocean/Comoro":{ 1213482414:180 },
"Indian Ocean/Kerguelen":{ 1213482415:300 },
"Indian Ocean/Mahe":{ 1213482416:240 },
"Indian Ocean/Maldives":{ 1213482416:300 },
"Indian Ocean/Mauritius":{ 1213482417:240 },
"Indian Ocean/Mayotte":{ 1213482418:180 },
"Indian Ocean/Reunion":{ 1213482419:240 },
"Mexico/BajaNorte":{ 1213482419:-420 , 1225013219:-480 , 1238927219:-420 , 1256462819:-480 , 1270376819:-420 , 1288517219:-480 , 1301826419:-420 , 1319966819:-480 , 1333276019:-420 , 1351416419:-480 , 1365330419:-420 , 1382866019:-480 , 1396780019:-420 , 1414315619:-480 , 1428229619:-420 , 1445765219:-480 , 1459679219:-420 , 1477819619:-480 , 1491128819:-420 , 1509269219:-480 , 1522578419:-420 },
"Mexico/BajaSur":{ 1213482420:-360 , 1225009620:-420 , 1238923620:-360 , 1256459220:-420 , 1270373220:-360 , 1288513620:-420 , 1301822820:-360 , 1319963220:-420 , 1333272420:-360 , 1351412820:-420 , 1365326820:-360 , 1382862420:-420 , 1396776420:-360 , 1414312020:-420 , 1428226020:-360 , 1445761620:-420 , 1459675620:-360 , 1477816020:-420 , 1491125220:-360 , 1509265620:-420 , 1522574820:-360 },
"Mexico/General":{ 1213482421:-300 , 1225006021:-360 , 1238920021:-300 , 1256455621:-360 , 1270369621:-300 , 1288510021:-360 , 1301819221:-300 , 1319959621:-360 , 1333268821:-300 , 1351409221:-360 , 1365323221:-300 , 1382858821:-360 , 1396772821:-300 , 1414308421:-360 , 1428222421:-300 , 1445758021:-360 , 1459672021:-300 , 1477812421:-360 , 1491121621:-300 , 1509262021:-360 , 1522571221:-300 },
"Pacific/Apia":{ 1213482421:-660 },
"Pacific/Auckland":{ 1213482422:720 , 1222525622:780 , 1238855222:720 , 1253975222:780 , 1270304822:720 , 1285424822:780 , 1301754422:720 , 1316874422:780 , 1333204022:720 , 1348928822:780 , 1365258422:720 , 1380378422:780 , 1396708022:720 , 1411828022:780 , 1428157622:720 , 1443277622:780 , 1459607222:720 , 1474727222:780 , 1491056822:720 , 1506176822:780 , 1522506422:720 },
"Pacific/Chatham":{ 1213482423:765 , 1222525623:825 , 1238855223:765 , 1253975223:825 , 1270304823:765 , 1285424823:825 , 1301754423:765 , 1316874423:825 , 1333204023:765 , 1348928823:825 , 1365258423:765 , 1380378423:825 , 1396708023:765 , 1411828023:825 , 1428157623:765 , 1443277623:825 , 1459607223:765 , 1474727223:825 , 1491056823:765 , 1506176823:825 , 1522506423:765 },
"Pacific/Easter":{ 1213482424:-360 , 1223785624:-300 , 1237087624:-360 , 1255235224:-300 , 1268537224:-360 , 1286684824:-300 , 1299986824:-360 , 1318134424:-300 , 1331436424:-360 , 1350188824:-300 , 1362886024:-360 , 1381638424:-300 , 1394335624:-360 , 1413088024:-300 , 1426390024:-360 , 1444537624:-300 , 1457839624:-360 , 1475987224:-300 , 1489289224:-360 , 1508041624:-300 , 1520738824:-360 },
"Pacific/Efate":{ 1213482424:660 },
"Pacific/Enderbury":{ 1213482425:780 },
"Pacific/Fakaofo":{ 1213482426:-600 },
"Pacific/Fiji":{ 1213482426:720 },
"Pacific/Funafuti":{ 1213482427:720 },
"Pacific/Galapagos":{ 1213482427:-360 },
"Pacific/Gambier":{ 1213482428:-540 },
"Pacific/Guadalcanal":{ 1213482429:660 },
"Pacific/Guam":{ 1213482430:600 },
"Pacific/Honolulu":{ 1213482430:-600 },
"Pacific/Johnston":{ 1213482431:-600 },
"Pacific/Kiritimati":{ 1213482431:840 },
"Pacific/Kosrae":{ 1213482432:660 },
"Pacific/Kwajalein":{ 1213482433:720 },
"Pacific/Majuro":{ 1213482434:720 },
"Pacific/Marquesas":{ 1213482434:-570 },
"Pacific/Midway":{ 1213482435:-660 },
"Pacific/Nauru":{ 1213482436:720 },
"Pacific/Niue":{ 1213482436:-660 },
"Pacific/Norfolk":{ 1213482437:690 },
"Pacific/Noumea":{ 1213482438:660 },
"Pacific/Pago Pago":{ 1213482439:-660 },
"Pacific/Palau":{ 1213482439:540 },
"Pacific/Pitcairn":{ 1213482440:-480 },
"Pacific/Ponape":{ 1213482440:660 },
"Pacific/Port Moresby":{ 1213482441:600 },
"Pacific/Rarotonga":{ 1213482441:-600 },
"Pacific/Saipan":{ 1213482442:600 },
"Pacific/Samoa":{ 1213482443:-660 },
"Pacific/Tahiti":{ 1213482443:-600 },
"Pacific/Tarawa":{ 1213482444:720 },
"Pacific/Tongatapu":{ 1213482445:780 },
"Pacific/Truk":{ 1213482445:600 },
"Pacific/Wake":{ 1213482446:720 },
"Pacific/Wallis":{ 1213482446:720 },
"Pacific/Yap":{ 1213482446:600 },
"UTC":{ 1213482447:0 }
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: encoding=utf-8

var translations = {

'en': {
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':    'Date format:',
	't_timeformat':    'Time format:',
	't_timezone':      'Time zone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Bottom label:',
	't_optional':      '(optional)',
	't_examples':      'Examples:',
	't_date':          'Date:',
	't_time':          'Time:',
	't_label':         'Label:',
	't_dateexamples':  'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Portland, Tokyo, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'About this gadget',
	't_translateby':   '',
	't_language':      'Language:'
},

'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:'
},

'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Language:'
},

'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû","Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:'
},

'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:'
},

'de': {
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':    'Date format:',
	't_timeformat':    'Time format:',
	't_timezone':      'Time zone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Bottom label:',
	't_optional':      '(optional)',
	't_examples':      'Examples:',
	't_date':          'Date:',
	't_time':          'Time:',
	't_label':         'Label:',
	't_dateexamples':  'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Portland, Tokyo, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'About this gadget',
	't_translateby':   '',
	't_language':      'Language:'
},

'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:'
},

'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Label:',
	't_optional':      '(facultatief)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijdsaanduiding:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdaam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'De taal:'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et
 */

var isDirty = true;

var mainDateFormat = null;
var mainTimeFormat = null;
var tzLabel = null;
var tzName = null;
var locale = 'en';
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( locale === '' ) locale = 'en';
	L = translations[locale];
}

function readSettings() {
  mainDateFormat = readSetting( "mainDateFormat" );
  mainTimeFormat = readSetting( "mainTimeFormat" );
  tzLabel = readSetting( "tzLabel" );
  tzName = readSetting( "tzName" );
  locale = readSetting( "locale" );

  setLocale();
//	document.tzOffsets = readSetting( "tzOffsets" );
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = readSettings;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  var background = document.getElementById('imgBackground');
  background.src = 'images/background-black.png';

  gDate = background.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = background.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = background.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateGadget();
}

function changeColor( lat, lon, gmt ) {
  return;
/*
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  dateArea.innerHTML = sunrise + " " + sunset;
*/
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata2007k[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      tzName = '';
      // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = mainDateFormat ? 100 : 0;
  gDate.value = mainDateFormat ? formatDate( mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = formatDate( mainTimeFormat, now );

  //adjustDateFont();
  adjustTimeToFit();
  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && tzName.length ) {
    var coords = latlon[ tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Adjust tops
  gDate.top = 5;
  gLabel.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  if ( gDate.value.length && ! gLabel.value.length ) {
    // Adjust down if there is date only
    gTime.top += ( gDate.height - 5 ) / 2;
  } else if ( ! gDate.value.length && gLabel.value.length ) {
    // Adjust up if there is label only
    gTime.top -= ( gLabel.height - 5 ) / 2;
  }
}

function adjustTimeToFit() {
  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;

  //if ( window.timeArea.className == 'bigTime' ) return 67;
  //if ( window.timeArea.className == 'smallTime' ) return 33;
  //return 44; // was 45
}

function adjustDateFont() {
  var width = window.timeArea.offsetWidth;
  var maxLen = 18;
  var dateLen = window.dateArea.innerText.length;

  window.dateArea.className = (dateLen > maxLen) ? 'smallDate' : 'normalDate';
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = varEl.value;
  System.Gadget.Settings.write( variablename, varVal );
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata2007k;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata2007k[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;

  document.getElementById("mainDateFormat").value = readSetting( "mainDateFormat" );
  document.getElementById("mainTimeFormat").value = readSetting( "mainTimeFormat" );
  document.getElementById("tzLabel").value = readSetting( "tzLabel" );
  locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
	localizeText();
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );

//		var tzName = document.getElementById('tzName').value;
//    var tzOffsets = tzdata2007k[ tzName ];
//		System.Gadget.Settings.write( 'tzOffsets', tzOffsets );
  }

  event.cancel = false;
}

function getSystemFontsList() {
  // http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1959226&SiteID=1
  var HKLM = 2147483650;
  var rPath = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\\";
  var rValue;

  // connect to the registry
  var oSwbem = new ActiveXObject("WbemScripting.SwbemLocator");
  var oSvc = oSwbem.ConnectServer(null, "root\\default");
  var oReg = oSvc.Get("StdRegProv");

  // enumerate the values 
  var oMethod = oReg.Methods_.Item("EnumValues");
  var oInParam = oMethod.InParameters.SpawnInstance_();
  oInParam.hDefKey = HKLM;
  oInParam.sSubKeyName = rPath;
  var oOutParam = oReg.ExecMethod_(oMethod.Name, oInParam);

  // get the values into an array
  var sNames = oOutParam.sNames.toArray();

  return sNames;

/*
  for (var i = 0; i < sNames.length; i++) {
    document.write( sNames[i] );
   // font names are in sNames[i]
  }
*/
}
