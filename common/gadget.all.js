// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1242877178:0},
"Africa/Accra":{1242877179:0},
"Africa/Addis Ababa":{1242877180:180},
"Africa/Algiers":{1242877180:60},
"Africa/Asmara":{1242877181:180},
"Africa/Bamako":{1242877182:0},
"Africa/Bangui":{1242877183:60},
"Africa/Banjul":{1242877183:0},
"Africa/Bissau":{1242877184:0},
"Africa/Blantyre":{1242877185:120},
"Africa/Brazzaville":{1242877186:60},
"Africa/Bujumbura":{1242877186:120},
"Africa/Cairo":{1242877187:180,1253828387:120,1272580787:180,1285882787:120,1304030387:180,1317332387:120,1335479987:180,1348781987:120,1366929587:180,1380231587:120,1398379187:180,1411681187:120,1429828787:180,1443130787:120,1461883187:180,1475185187:120,1493332787:180,1506634787:120,1524782387:180,1538084387:120,1556231987:180},
"Africa/Casablanca":{1242877187:0,1243816787:60,1250811587:0},
"Africa/Ceuta":{1242877188:120,1256434788:60,1269740388:120,1288489188:60,1301189988:120,1319938788:60,1332639588:120,1351388388:60,1364693988:120,1382837988:60,1396143588:120,1414287588:60,1427593188:120,1445737188:60,1459042788:120,1477791588:60,1490492388:120,1509241188:60,1521941988:120,1540690788:60,1553996388:120},
"Africa/Conakry":{1242877189:0},
"Africa/Dakar":{1242877190:0},
"Africa/Dar es Salaam":{1242877190:180},
"Africa/Djibouti":{1242877191:180},
"Africa/Douala":{1242877192:60},
"Africa/El Aaiun":{1242877193:0},
"Africa/Freetown":{1242877193:0},
"Africa/Gaborone":{1242877194:120},
"Africa/Harare":{1242877195:120},
"Africa/Johannesburg":{1242877195:120},
"Africa/Kampala":{1242877196:180},
"Africa/Khartoum":{1242877197:180},
"Africa/Kigali":{1242877198:120},
"Africa/Kinshasa":{1242877198:60},
"Africa/Lagos":{1242877199:60},
"Africa/Libreville":{1242877200:60},
"Africa/Lome":{1242877200:0},
"Africa/Luanda":{1242877201:60},
"Africa/Lubumbashi":{1242877201:120},
"Africa/Lusaka":{1242877202:120},
"Africa/Malabo":{1242877202:60},
"Africa/Maputo":{1242877203:120},
"Africa/Maseru":{1242877204:120},
"Africa/Mbabane":{1242877205:120},
"Africa/Mogadishu":{1242877205:180},
"Africa/Monrovia":{1242877206:0},
"Africa/Nairobi":{1242877207:180},
"Africa/Ndjamena":{1242877208:60},
"Africa/Niamey":{1242877208:60},
"Africa/Nouakchott":{1242877209:0},
"Africa/Ouagadougou":{1242877210:0},
"Africa/Porto-Novo":{1242877210:60},
"Africa/Sao Tome":{1242877211:0},
"Africa/Tripoli":{1242877212:120},
"Africa/Tunis":{1242877213:60,1269740413:120,1288489213:60,1301190013:120,1319938813:60,1332639613:120,1351388413:60,1364694013:120,1382838013:60,1396143613:120,1414287613:60,1427593213:120,1445737213:60,1459042813:120,1477791613:60,1490492413:120,1509241213:60,1521942013:120,1540690813:60,1553996413:120},
"Africa/Windhoek":{1242877213:60,1252201213:120,1270341613:60,1283650813:120,1301791213:60,1315100413:120,1333240813:60,1346550013:120,1365295213:60,1377999613:120,1396744813:60,1410054013:120,1428194413:60,1441503613:120,1459644013:60,1472953213:120,1491093613:60,1504402813:120,1522543213:60,1535852413:120,1554597613:60},
"America/Adak":{1242877214:-540,1257075614:-600,1268570414:-540,1289130014:-600,1300020014:-540,1320579614:-600,1331469614:-540,1352029214:-600,1362919214:-540,1383478814:-600,1394368814:-540,1414928414:-600,1425818414:-540,1446378014:-600,1457872814:-540,1478432414:-600,1489322414:-540,1509882014:-600,1520772014:-540,1541331614:-600,1552221614:-540},
"America/Anchorage":{1242877215:-480,1257072015:-540,1268566815:-480,1289126415:-540,1300016415:-480,1320576015:-540,1331466015:-480,1352025615:-540,1362915615:-480,1383475215:-540,1394365215:-480,1414924815:-540,1425814815:-480,1446374415:-540,1457869215:-480,1478428815:-540,1489318815:-480,1509878415:-540,1520768415:-480,1541328015:-540,1552218015:-480},
"America/Anguilla":{1242877216:-240},
"America/Antigua":{1242877216:-240},
"America/Araguaina":{1242877217:-180},
"America/Argentina/Buenos Aires":{1242877218:-180,1255837218:-120,1269139218:-180,1287286818:-120,1300588818:-180,1318736418:-120,1332038418:-180,1350790818:-120,1363488018:-180,1382240418:-120,1394937618:-180,1413690018:-120,1426387218:-180,1445139618:-120,1458441618:-180,1476589218:-120,1489891218:-180,1508038818:-120,1521340818:-180,1540093218:-120,1552790418:-180},
"America/Argentina/Catamarca":{1242877219:-180},
"America/Argentina/Cordoba":{1242877219:-180,1255837219:-120,1269139219:-180,1287286819:-120,1300588819:-180,1318736419:-120,1332038419:-180,1350790819:-120,1363488019:-180,1382240419:-120,1394937619:-180,1413690019:-120,1426387219:-180,1445139619:-120,1458441619:-180,1476589219:-120,1489891219:-180,1508038819:-120,1521340819:-180,1540093219:-120,1552790419:-180},
"America/Argentina/Jujuy":{1242877220:-180},
"America/Argentina/La Rioja":{1242877221:-180},
"America/Argentina/Mendoza":{1242877222:-180},
"America/Argentina/Rio Gallegos":{1242877222:-180},
"America/Argentina/Salta":{1242877223:-180},
"America/Argentina/San Juan":{1242877224:-180},
"America/Argentina/San Luis":{1242877225:-240,1255840825:-180,1269142825:-240,1287290425:-180,1300592425:-240,1318740025:-180,1332042025:-240,1350794425:-180,1363491625:-240,1382244025:-180,1394941225:-240,1413693625:-180,1426390825:-240,1445143225:-180,1458445225:-240,1476592825:-180,1489894825:-240,1508042425:-180,1521344425:-240,1540096825:-180,1552794025:-240},
"America/Argentina/Tucuman":{1242877225:-180,1255837225:-120,1269139225:-180,1287286825:-120,1300588825:-180,1318736425:-120,1332038425:-180,1350790825:-120,1363488025:-180,1382240425:-120,1394937625:-180,1413690025:-120,1426387225:-180,1445139625:-120,1458441625:-180,1476589225:-120,1489891225:-180,1508038825:-120,1521340825:-180,1540093225:-120,1552790425:-180},
"America/Argentina/Ushuaia":{1242877226:-180},
"America/Aruba":{1242877227:-240},
"America/Asuncion":{1242877228:-240,1255840828:-180,1268538028:-240,1287290428:-180,1299987628:-240,1318740028:-180,1331437228:-240,1350794428:-180,1362886828:-240,1382244028:-180,1394336428:-240,1413693628:-180,1425786028:-240,1445143228:-180,1457840428:-240,1476592828:-180,1489290028:-240,1508042428:-180,1520739628:-240,1540096828:-180,1552189228:-240},
"America/Atikokan":{1242877228:-300},
"America/Bahia":{1242877229:-180},
"America/Barbados":{1242877230:-240},
"America/Belem":{1242877231:-180},
"America/Belize":{1242877231:-360},
"America/Blanc-Sablon":{1242877232:-240},
"America/Boa Vista":{1242877233:-240},
"America/Bogota":{1242877234:-300},
"America/Boise":{1242877234:-360,1257064834:-420,1268559634:-360,1289119234:-420,1300009234:-360,1320568834:-420,1331458834:-360,1352018434:-420,1362908434:-360,1383468034:-420,1394358034:-360,1414917634:-420,1425807634:-360,1446367234:-420,1457862034:-360,1478421634:-420,1489311634:-360,1509871234:-420,1520761234:-360,1541320834:-420,1552210834:-360},
"America/Cambridge Bay":{1242877235:-360,1257064835:-420,1268559635:-360,1289119235:-420,1300009235:-360,1320568835:-420,1331458835:-360,1352018435:-420,1362908435:-360,1383468035:-420,1394358035:-360,1414917635:-420,1425807635:-360,1446367235:-420,1457862035:-360,1478421635:-420,1489311635:-360,1509871235:-420,1520761235:-360,1541320835:-420,1552210835:-360},
"America/Campo Grande":{1242877236:-240,1255840836:-180,1266723636:-240,1287290436:-180,1298173236:-240,1318740036:-180,1330227636:-240,1350794436:-180,1361072436:-240,1382244036:-180,1392522036:-240,1413693636:-180,1424576436:-240,1445143236:-180,1456026036:-240,1476592836:-180,1487475636:-240,1508042436:-180,1518925236:-240,1540096836:-180,1550374836:-240},
"America/Cancun":{1242877237:-300,1256456437:-360,1270370437:-300,1288510837:-360,1301820037:-300,1319960437:-360,1333269637:-300,1351410037:-360,1365324037:-300,1382859637:-360,1396773637:-300,1414309237:-360,1428223237:-300,1445758837:-360,1459672837:-300,1477813237:-360,1491122437:-300,1509262837:-360,1522572037:-300,1540712437:-360,1554626437:-300},
"America/Caracas":{1242877237:-270},
"America/Cayenne":{1242877238:-180},
"America/Cayman":{1242877239:-300},
"America/Chicago":{1242877240:-300,1257061240:-360,1268556040:-300,1289115640:-360,1300005640:-300,1320565240:-360,1331455240:-300,1352014840:-360,1362904840:-300,1383464440:-360,1394354440:-300,1414914040:-360,1425804040:-300,1446363640:-360,1457858440:-300,1478418040:-360,1489308040:-300,1509867640:-360,1520757640:-300,1541317240:-360,1552207240:-300},
"America/Chihuahua":{1242877240:-360,1256460040:-420,1270374040:-360,1288514440:-420,1301823640:-360,1319964040:-420,1333273240:-360,1351413640:-420,1365327640:-360,1382863240:-420,1396777240:-360,1414312840:-420,1428226840:-360,1445762440:-420,1459676440:-360,1477816840:-420,1491126040:-360,1509266440:-420,1522575640:-360,1540716040:-420,1554630040:-360},
"America/Costa Rica":{1242877241:-360},
"America/Cuiaba":{1242877242:-240,1255840842:-180,1266723642:-240,1287290442:-180,1298173242:-240,1318740042:-180,1330227642:-240,1350794442:-180,1361072442:-240,1382244042:-180,1392522042:-240,1413693642:-180,1424576442:-240,1445143242:-180,1456026042:-240,1476592842:-180,1487475642:-240,1508042442:-180,1518925242:-240,1540096842:-180,1550374842:-240},
"America/Curacao":{1242877243:-240},
"America/Danmarkshavn":{1242877243:0},
"America/Dawson":{1242877244:-420,1257068444:-480,1268563244:-420,1289122844:-480,1300012844:-420,1320572444:-480,1331462444:-420,1352022044:-480,1362912044:-420,1383471644:-480,1394361644:-420,1414921244:-480,1425811244:-420,1446370844:-480,1457865644:-420,1478425244:-480,1489315244:-420,1509874844:-480,1520764844:-420,1541324444:-480,1552214444:-420},
"America/Dawson Creek":{1242877245:-420},
"America/Denver":{1242877246:-360,1257064846:-420,1268559646:-360,1289119246:-420,1300009246:-360,1320568846:-420,1331458846:-360,1352018446:-420,1362908446:-360,1383468046:-420,1394358046:-360,1414917646:-420,1425807646:-360,1446367246:-420,1457862046:-360,1478421646:-420,1489311646:-360,1509871246:-420,1520761246:-360,1541320846:-420,1552210846:-360},
"America/Detroit":{1242877246:-240,1257057646:-300,1268552446:-240,1289112046:-300,1300002046:-240,1320561646:-300,1331451646:-240,1352011246:-300,1362901246:-240,1383460846:-300,1394350846:-240,1414910446:-300,1425800446:-240,1446360046:-300,1457854846:-240,1478414446:-300,1489304446:-240,1509864046:-300,1520754046:-240,1541313646:-300,1552203646:-240},
"America/Dominica":{1242877247:-240},
"America/Edmonton":{1242877248:-360,1257064848:-420,1268559648:-360,1289119248:-420,1300009248:-360,1320568848:-420,1331458848:-360,1352018448:-420,1362908448:-360,1383468048:-420,1394358048:-360,1414917648:-420,1425807648:-360,1446367248:-420,1457862048:-360,1478421648:-420,1489311648:-360,1509871248:-420,1520761248:-360,1541320848:-420,1552210848:-360},
"America/Eirunepe":{1242877249:-240},
"America/El Salvador":{1242877249:-360},
"America/Fortaleza":{1242877250:-180},
"America/Glace Bay":{1242877251:-180,1257054051:-240,1268548851:-180,1289108451:-240,1299998451:-180,1320558051:-240,1331448051:-180,1352007651:-240,1362897651:-180,1383457251:-240,1394347251:-180,1414906851:-240,1425796851:-180,1446356451:-240,1457851251:-180,1478410851:-240,1489300851:-180,1509860451:-240,1520750451:-180,1541310051:-240,1552200051:-180},
"America/Godthab":{1242877252:-120,1256434852:-180,1269740452:-120,1288489252:-180,1301190052:-120,1319938852:-180,1332639652:-120,1351388452:-180,1364694052:-120,1382838052:-180,1396143652:-120,1414287652:-180,1427593252:-120,1445737252:-180,1459042852:-120,1477791652:-180,1490492452:-120,1509241252:-180,1521942052:-120,1540690852:-180,1553996452:-120},
"America/Goose Bay":{1242877252:-180,1257046852:-240,1268541652:-180,1289101252:-240,1299991252:-180,1320550852:-240,1331440852:-180,1352000452:-240,1362890452:-180,1383450052:-240,1394340052:-180,1414899652:-240,1425789652:-180,1446349252:-240,1457844052:-180,1478403652:-240,1489293652:-180,1509853252:-240,1520743252:-180,1541302852:-240,1552192852:-180},
"America/Grand Turk":{1242877253:-240,1257057653:-300,1268552453:-240,1289112053:-300,1300002053:-240,1320561653:-300,1331451653:-240,1352011253:-300,1362901253:-240,1383460853:-300,1394350853:-240,1414910453:-300,1425800453:-240,1446360053:-300,1457854853:-240,1478414453:-300,1489304453:-240,1509864053:-300,1520754053:-240,1541313653:-300,1552203653:-240},
"America/Grenada":{1242877254:-240},
"America/Guadeloupe":{1242877255:-240},
"America/Guatemala":{1242877255:-360},
"America/Guayaquil":{1242877256:-300},
"America/Guyana":{1242877257:-240},
"America/Halifax":{1242877257:-180,1257054057:-240,1268548857:-180,1289108457:-240,1299998457:-180,1320558057:-240,1331448057:-180,1352007657:-240,1362897657:-180,1383457257:-240,1394347257:-180,1414906857:-240,1425796857:-180,1446356457:-240,1457851257:-180,1478410857:-240,1489300857:-180,1509860457:-240,1520750457:-180,1541310057:-240,1552200057:-180},
"America/Havana":{1242877258:-240,1256449258:-300,1268545258:-240,1288503658:-300,1299994858:-240,1319953258:-300,1331444458:-240,1351402858:-300,1362894058:-240,1382852458:-300,1394343658:-240,1414302058:-300,1425793258:-240,1445751658:-300,1457847658:-240,1477806058:-300,1489297258:-240,1509255658:-300,1520746858:-240,1540705258:-300,1552196458:-240},
"America/Hermosillo":{1242877259:-420},
"America/Indiana/Indianapolis":{1242877260:-240,1257057660:-300,1268552460:-240,1289112060:-300,1300002060:-240,1320561660:-300,1331451660:-240,1352011260:-300,1362901260:-240,1383460860:-300,1394350860:-240,1414910460:-300,1425800460:-240,1446360060:-300,1457854860:-240,1478414460:-300,1489304460:-240,1509864060:-300,1520754060:-240,1541313660:-300,1552203660:-240},
"America/Indiana/Knox":{1242877261:-300,1257061261:-360,1268556061:-300,1289115661:-360,1300005661:-300,1320565261:-360,1331455261:-300,1352014861:-360,1362904861:-300,1383464461:-360,1394354461:-300,1414914061:-360,1425804061:-300,1446363661:-360,1457858461:-300,1478418061:-360,1489308061:-300,1509867661:-360,1520757661:-300,1541317261:-360,1552207261:-300},
"America/Indiana/Marengo":{1242877261:-240,1257057661:-300,1268552461:-240,1289112061:-300,1300002061:-240,1320561661:-300,1331451661:-240,1352011261:-300,1362901261:-240,1383460861:-300,1394350861:-240,1414910461:-300,1425800461:-240,1446360061:-300,1457854861:-240,1478414461:-300,1489304461:-240,1509864061:-300,1520754061:-240,1541313661:-300,1552203661:-240},
"America/Indiana/Petersburg":{1242877262:-240,1257057662:-300,1268552462:-240,1289112062:-300,1300002062:-240,1320561662:-300,1331451662:-240,1352011262:-300,1362901262:-240,1383460862:-300,1394350862:-240,1414910462:-300,1425800462:-240,1446360062:-300,1457854862:-240,1478414462:-300,1489304462:-240,1509864062:-300,1520754062:-240,1541313662:-300,1552203662:-240},
"America/Indiana/Tell City":{1242877263:-300,1257061263:-360,1268556063:-300,1289115663:-360,1300005663:-300,1320565263:-360,1331455263:-300,1352014863:-360,1362904863:-300,1383464463:-360,1394354463:-300,1414914063:-360,1425804063:-300,1446363663:-360,1457858463:-300,1478418063:-360,1489308063:-300,1509867663:-360,1520757663:-300,1541317263:-360,1552207263:-300},
"America/Indiana/Vevay":{1242877264:-240,1257057664:-300,1268552464:-240,1289112064:-300,1300002064:-240,1320561664:-300,1331451664:-240,1352011264:-300,1362901264:-240,1383460864:-300,1394350864:-240,1414910464:-300,1425800464:-240,1446360064:-300,1457854864:-240,1478414464:-300,1489304464:-240,1509864064:-300,1520754064:-240,1541313664:-300,1552203664:-240},
"America/Indiana/Vincennes":{1242877264:-240,1257057664:-300,1268552464:-240,1289112064:-300,1300002064:-240,1320561664:-300,1331451664:-240,1352011264:-300,1362901264:-240,1383460864:-300,1394350864:-240,1414910464:-300,1425800464:-240,1446360064:-300,1457854864:-240,1478414464:-300,1489304464:-240,1509864064:-300,1520754064:-240,1541313664:-300,1552203664:-240},
"America/Indiana/Winamac":{1242877265:-240,1257057665:-300,1268552465:-240,1289112065:-300,1300002065:-240,1320561665:-300,1331451665:-240,1352011265:-300,1362901265:-240,1383460865:-300,1394350865:-240,1414910465:-300,1425800465:-240,1446360065:-300,1457854865:-240,1478414465:-300,1489304465:-240,1509864065:-300,1520754065:-240,1541313665:-300,1552203665:-240},
"America/Inuvik":{1242877266:-360,1257064866:-420,1268559666:-360,1289119266:-420,1300009266:-360,1320568866:-420,1331458866:-360,1352018466:-420,1362908466:-360,1383468066:-420,1394358066:-360,1414917666:-420,1425807666:-360,1446367266:-420,1457862066:-360,1478421666:-420,1489311666:-360,1509871266:-420,1520761266:-360,1541320866:-420,1552210866:-360},
"America/Iqaluit":{1242877267:-240,1257057667:-300,1268552467:-240,1289112067:-300,1300002067:-240,1320561667:-300,1331451667:-240,1352011267:-300,1362901267:-240,1383460867:-300,1394350867:-240,1414910467:-300,1425800467:-240,1446360067:-300,1457854867:-240,1478414467:-300,1489304467:-240,1509864067:-300,1520754067:-240,1541313667:-300,1552203667:-240},
"America/Jamaica":{1242877267:-300},
"America/Juneau":{1242877268:-480,1257072068:-540,1268566868:-480,1289126468:-540,1300016468:-480,1320576068:-540,1331466068:-480,1352025668:-540,1362915668:-480,1383475268:-540,1394365268:-480,1414924868:-540,1425814868:-480,1446374468:-540,1457869268:-480,1478428868:-540,1489318868:-480,1509878468:-540,1520768468:-480,1541328068:-540,1552218068:-480},
"America/Kentucky/Louisville":{1242877269:-240,1257057669:-300,1268552469:-240,1289112069:-300,1300002069:-240,1320561669:-300,1331451669:-240,1352011269:-300,1362901269:-240,1383460869:-300,1394350869:-240,1414910469:-300,1425800469:-240,1446360069:-300,1457854869:-240,1478414469:-300,1489304469:-240,1509864069:-300,1520754069:-240,1541313669:-300,1552203669:-240},
"America/Kentucky/Monticello":{1242877270:-240,1257057670:-300,1268552470:-240,1289112070:-300,1300002070:-240,1320561670:-300,1331451670:-240,1352011270:-300,1362901270:-240,1383460870:-300,1394350870:-240,1414910470:-300,1425800470:-240,1446360070:-300,1457854870:-240,1478414470:-300,1489304470:-240,1509864070:-300,1520754070:-240,1541313670:-300,1552203670:-240},
"America/La Paz":{1242877271:-240},
"America/Lima":{1242877271:-300},
"America/Los Angeles":{1242877272:-420,1257068472:-480,1268563272:-420,1289122872:-480,1300012872:-420,1320572472:-480,1331462472:-420,1352022072:-480,1362912072:-420,1383471672:-480,1394361672:-420,1414921272:-480,1425811272:-420,1446370872:-480,1457865672:-420,1478425272:-480,1489315272:-420,1509874872:-480,1520764872:-420,1541324472:-480,1552214472:-420},
"America/Maceio":{1242877273:-180},
"America/Managua":{1242877274:-360},
"America/Manaus":{1242877274:-240},
"America/Martinique":{1242877275:-240},
"America/Mazatlan":{1242877276:-360,1256460076:-420,1270374076:-360,1288514476:-420,1301823676:-360,1319964076:-420,1333273276:-360,1351413676:-420,1365327676:-360,1382863276:-420,1396777276:-360,1414312876:-420,1428226876:-360,1445762476:-420,1459676476:-360,1477816876:-420,1491126076:-360,1509266476:-420,1522575676:-360,1540716076:-420,1554630076:-360},
"America/Menominee":{1242877277:-300,1257061277:-360,1268556077:-300,1289115677:-360,1300005677:-300,1320565277:-360,1331455277:-300,1352014877:-360,1362904877:-300,1383464477:-360,1394354477:-300,1414914077:-360,1425804077:-300,1446363677:-360,1457858477:-300,1478418077:-360,1489308077:-300,1509867677:-360,1520757677:-300,1541317277:-360,1552207277:-300},
"America/Merida":{1242877277:-300,1256456477:-360,1270370477:-300,1288510877:-360,1301820077:-300,1319960477:-360,1333269677:-300,1351410077:-360,1365324077:-300,1382859677:-360,1396773677:-300,1414309277:-360,1428223277:-300,1445758877:-360,1459672877:-300,1477813277:-360,1491122477:-300,1509262877:-360,1522572077:-300,1540712477:-360,1554626477:-300},
"America/Mexico City":{1242877278:-300,1256456478:-360,1270370478:-300,1288510878:-360,1301820078:-300,1319960478:-360,1333269678:-300,1351410078:-360,1365324078:-300,1382859678:-360,1396773678:-300,1414309278:-360,1428223278:-300,1445758878:-360,1459672878:-300,1477813278:-360,1491122478:-300,1509262878:-360,1522572078:-300,1540712478:-360,1554626478:-300},
"America/Miquelon":{1242877279:-120,1257050479:-180,1268545279:-120,1289104879:-180,1299994879:-120,1320554479:-180,1331444479:-120,1352004079:-180,1362894079:-120,1383453679:-180,1394343679:-120,1414903279:-180,1425793279:-120,1446352879:-180,1457847679:-120,1478407279:-180,1489297279:-120,1509856879:-180,1520746879:-120,1541306479:-180,1552196479:-120},
"America/Moncton":{1242877280:-180,1257054080:-240,1268548880:-180,1289108480:-240,1299998480:-180,1320558080:-240,1331448080:-180,1352007680:-240,1362897680:-180,1383457280:-240,1394347280:-180,1414906880:-240,1425796880:-180,1446356480:-240,1457851280:-180,1478410880:-240,1489300880:-180,1509860480:-240,1520750480:-180,1541310080:-240,1552200080:-180},
"America/Monterrey":{1242877280:-300,1256456480:-360,1270370480:-300,1288510880:-360,1301820080:-300,1319960480:-360,1333269680:-300,1351410080:-360,1365324080:-300,1382859680:-360,1396773680:-300,1414309280:-360,1428223280:-300,1445758880:-360,1459672880:-300,1477813280:-360,1491122480:-300,1509262880:-360,1522572080:-300,1540712480:-360,1554626480:-300},
"America/Montevideo":{1242877281:-180,1254634881:-120,1268541681:-180,1286084481:-120,1299991281:-180,1317534081:-120,1331440881:-180,1349588481:-120,1362890481:-180,1381038081:-120,1394340081:-180,1412487681:-120,1425789681:-180,1443937281:-120,1457844081:-180,1475386881:-120,1489293681:-180,1506836481:-120,1520743281:-180,1538890881:-120,1552192881:-180},
"America/Montreal":{1242877282:-240,1257057682:-300,1268552482:-240,1289112082:-300,1300002082:-240,1320561682:-300,1331451682:-240,1352011282:-300,1362901282:-240,1383460882:-300,1394350882:-240,1414910482:-300,1425800482:-240,1446360082:-300,1457854882:-240,1478414482:-300,1489304482:-240,1509864082:-300,1520754082:-240,1541313682:-300,1552203682:-240},
"America/Montserrat":{1242877283:-240},
"America/Nassau":{1242877283:-240,1257057683:-300,1268552483:-240,1289112083:-300,1300002083:-240,1320561683:-300,1331451683:-240,1352011283:-300,1362901283:-240,1383460883:-300,1394350883:-240,1414910483:-300,1425800483:-240,1446360083:-300,1457854883:-240,1478414483:-300,1489304483:-240,1509864083:-300,1520754083:-240,1541313683:-300,1552203683:-240},
"America/New York":{1242877284:-240,1257057684:-300,1268552484:-240,1289112084:-300,1300002084:-240,1320561684:-300,1331451684:-240,1352011284:-300,1362901284:-240,1383460884:-300,1394350884:-240,1414910484:-300,1425800484:-240,1446360084:-300,1457854884:-240,1478414484:-300,1489304484:-240,1509864084:-300,1520754084:-240,1541313684:-300,1552203684:-240},
"America/Nipigon":{1242877285:-240,1257057685:-300,1268552485:-240,1289112085:-300,1300002085:-240,1320561685:-300,1331451685:-240,1352011285:-300,1362901285:-240,1383460885:-300,1394350885:-240,1414910485:-300,1425800485:-240,1446360085:-300,1457854885:-240,1478414485:-300,1489304485:-240,1509864085:-300,1520754085:-240,1541313685:-300,1552203685:-240},
"America/Nome":{1242877286:-480,1257072086:-540,1268566886:-480,1289126486:-540,1300016486:-480,1320576086:-540,1331466086:-480,1352025686:-540,1362915686:-480,1383475286:-540,1394365286:-480,1414924886:-540,1425814886:-480,1446374486:-540,1457869286:-480,1478428886:-540,1489318886:-480,1509878486:-540,1520768486:-480,1541328086:-540,1552218086:-480},
"America/Noronha":{1242877287:-120},
"America/North Dakota/Center":{1242877287:-300,1257061287:-360,1268556087:-300,1289115687:-360,1300005687:-300,1320565287:-360,1331455287:-300,1352014887:-360,1362904887:-300,1383464487:-360,1394354487:-300,1414914087:-360,1425804087:-300,1446363687:-360,1457858487:-300,1478418087:-360,1489308087:-300,1509867687:-360,1520757687:-300,1541317287:-360,1552207287:-300},
"America/North Dakota/New Salem":{1242877288:-300,1257061288:-360,1268556088:-300,1289115688:-360,1300005688:-300,1320565288:-360,1331455288:-300,1352014888:-360,1362904888:-300,1383464488:-360,1394354488:-300,1414914088:-360,1425804088:-300,1446363688:-360,1457858488:-300,1478418088:-360,1489308088:-300,1509867688:-360,1520757688:-300,1541317288:-360,1552207288:-300},
"America/Panama":{1242877289:-300},
"America/Pangnirtung":{1242877290:-240,1257057690:-300,1268552490:-240,1289112090:-300,1300002090:-240,1320561690:-300,1331451690:-240,1352011290:-300,1362901290:-240,1383460890:-300,1394350890:-240,1414910490:-300,1425800490:-240,1446360090:-300,1457854890:-240,1478414490:-300,1489304490:-240,1509864090:-300,1520754090:-240,1541313690:-300,1552203690:-240},
"America/Paramaribo":{1242877290:-180},
"America/Phoenix":{1242877291:-420},
"America/Port of Spain":{1242877292:-240},
"America/Port-au-Prince":{1242877293:-300},
"America/Porto Velho":{1242877293:-240},
"America/Puerto Rico":{1242877294:-240},
"America/Rainy River":{1242877295:-300,1257061295:-360,1268556095:-300,1289115695:-360,1300005695:-300,1320565295:-360,1331455295:-300,1352014895:-360,1362904895:-300,1383464495:-360,1394354495:-300,1414914095:-360,1425804095:-300,1446363695:-360,1457858495:-300,1478418095:-360,1489308095:-300,1509867695:-360,1520757695:-300,1541317295:-360,1552207295:-300},
"America/Rankin Inlet":{1242877296:-300,1257061296:-360,1268556096:-300,1289115696:-360,1300005696:-300,1320565296:-360,1331455296:-300,1352014896:-360,1362904896:-300,1383464496:-360,1394354496:-300,1414914096:-360,1425804096:-300,1446363696:-360,1457858496:-300,1478418096:-360,1489308096:-300,1509867696:-360,1520757696:-300,1541317296:-360,1552207296:-300},
"America/Recife":{1242877296:-180},
"America/Regina":{1242877297:-360},
"America/Resolute":{1242877298:-300},
"America/Rio Branco":{1242877299:-240},
"America/Santarem":{1242877299:-180},
"America/Santiago":{1242877300:-240,1255236100:-180,1268538100:-240,1286685700:-180,1299987700:-240,1318135300:-180,1331437300:-240,1350189700:-180,1362886900:-240,1381639300:-180,1394336500:-240,1413088900:-180,1426390900:-240,1444538500:-180,1457840500:-240,1475988100:-180,1489290100:-240,1508042500:-180,1520739700:-240,1539492100:-180,1552189300:-240},
"America/Santo Domingo":{1242877301:-240},
"America/Sao Paulo":{1242877302:-180,1255837302:-120,1266720102:-180,1287286902:-120,1298169702:-180,1318736502:-120,1330224102:-180,1350790902:-120,1361068902:-180,1382240502:-120,1392518502:-180,1413690102:-120,1424572902:-180,1445139702:-120,1456022502:-180,1476589302:-120,1487472102:-180,1508038902:-120,1518921702:-180,1540093302:-120,1550371302:-180},
"America/Scoresbysund":{1242877302:0,1256434902:-60,1269740502:0,1288489302:-60,1301190102:0,1319938902:-60,1332639702:0,1351388502:-60,1364694102:0,1382838102:-60,1396143702:0,1414287702:-60,1427593302:0,1445737302:-60,1459042902:0,1477791702:-60,1490492502:0,1509241302:-60,1521942102:0,1540690902:-60,1553996502:0},
"America/St Johns":{1242877303:-150,1257043303:-210,1268538103:-150,1289097703:-210,1299987703:-150,1320547303:-210,1331437303:-150,1351996903:-210,1362886903:-150,1383446503:-210,1394336503:-150,1414896103:-210,1425786103:-150,1446345703:-210,1457840503:-150,1478400103:-210,1489290103:-150,1509849703:-210,1520739703:-150,1541299303:-210,1552189303:-150},
"America/St Kitts":{1242877304:-240},
"America/St Lucia":{1242877305:-240},
"America/St Thomas":{1242877305:-240},
"America/St Vincent":{1242877306:-240},
"America/Swift Current":{1242877307:-360},
"America/Tegucigalpa":{1242877308:-360},
"America/Thule":{1242877308:-180,1257054108:-240,1268548908:-180,1289108508:-240,1299998508:-180,1320558108:-240,1331448108:-180,1352007708:-240,1362897708:-180,1383457308:-240,1394347308:-180,1414906908:-240,1425796908:-180,1446356508:-240,1457851308:-180,1478410908:-240,1489300908:-180,1509860508:-240,1520750508:-180,1541310108:-240,1552200108:-180},
"America/Thunder Bay":{1242877309:-240,1257057709:-300,1268552509:-240,1289112109:-300,1300002109:-240,1320561709:-300,1331451709:-240,1352011309:-300,1362901309:-240,1383460909:-300,1394350909:-240,1414910509:-300,1425800509:-240,1446360109:-300,1457854909:-240,1478414509:-300,1489304509:-240,1509864109:-300,1520754109:-240,1541313709:-300,1552203709:-240},
"America/Tijuana":{1242877310:-420,1256463710:-480,1270377710:-420,1288518110:-480,1301827310:-420,1319967710:-480,1333276910:-420,1351417310:-480,1365331310:-420,1382866910:-480,1396780910:-420,1414316510:-480,1428230510:-420,1445766110:-480,1459680110:-420,1477820510:-480,1491129710:-420,1509270110:-480,1522579310:-420,1540719710:-480,1554633710:-420},
"America/Toronto":{1242877311:-240,1257057711:-300,1268552511:-240,1289112111:-300,1300002111:-240,1320561711:-300,1331451711:-240,1352011311:-300,1362901311:-240,1383460911:-300,1394350911:-240,1414910511:-300,1425800511:-240,1446360111:-300,1457854911:-240,1478414511:-300,1489304511:-240,1509864111:-300,1520754111:-240,1541313711:-300,1552203711:-240},
"America/Tortola":{1242877312:-240},
"America/Vancouver":{1242877312:-420,1257068512:-480,1268563312:-420,1289122912:-480,1300012912:-420,1320572512:-480,1331462512:-420,1352022112:-480,1362912112:-420,1383471712:-480,1394361712:-420,1414921312:-480,1425811312:-420,1446370912:-480,1457865712:-420,1478425312:-480,1489315312:-420,1509874912:-480,1520764912:-420,1541324512:-480,1552214512:-420},
"America/Whitehorse":{1242877313:-420,1257068513:-480,1268563313:-420,1289122913:-480,1300012913:-420,1320572513:-480,1331462513:-420,1352022113:-480,1362912113:-420,1383471713:-480,1394361713:-420,1414921313:-480,1425811313:-420,1446370913:-480,1457865713:-420,1478425313:-480,1489315313:-420,1509874913:-480,1520764913:-420,1541324513:-480,1552214513:-420},
"America/Winnipeg":{1242877314:-300,1257061314:-360,1268556114:-300,1289115714:-360,1300005714:-300,1320565314:-360,1331455314:-300,1352014914:-360,1362904914:-300,1383464514:-360,1394354514:-300,1414914114:-360,1425804114:-300,1446363714:-360,1457858514:-300,1478418114:-360,1489308114:-300,1509867714:-360,1520757714:-300,1541317314:-360,1552207314:-300},
"America/Yakutat":{1242877315:-480,1257072115:-540,1268566915:-480,1289126515:-540,1300016515:-480,1320576115:-540,1331466115:-480,1352025715:-540,1362915715:-480,1383475315:-540,1394365315:-480,1414924915:-540,1425814915:-480,1446374515:-540,1457869315:-480,1478428915:-540,1489318915:-480,1509878515:-540,1520768515:-480,1541328115:-540,1552218115:-480},
"America/Yellowknife":{1242877315:-360,1257064915:-420,1268559715:-360,1289119315:-420,1300009315:-360,1320568915:-420,1331458915:-360,1352018515:-420,1362908515:-360,1383468115:-420,1394358115:-360,1414917715:-420,1425807715:-360,1446367315:-420,1457862115:-360,1478421715:-420,1489311715:-360,1509871315:-420,1520761315:-360,1541320915:-420,1552210915:-360},
"Antarctica/Casey":{1242877316:480},
"Antarctica/Davis":{1242877317:420},
"Antarctica/DumontDUrville":{1242877318:600},
"Antarctica/Mawson":{1242877318:360},
"Antarctica/McMurdo":{1242877319:720,1253976119:780,1270305719:720,1285425719:780,1301755319:720,1316875319:780,1333204919:720,1348929719:780,1365259319:720,1380379319:780,1396708919:720,1411828919:780,1428158519:720,1443278519:780,1459608119:720,1474728119:780,1491057719:720,1506177719:780,1522507319:720,1538232119:780,1554561719:720},
"Antarctica/Palmer":{1242877320:-240,1255236120:-180,1268538120:-240,1286685720:-180,1299987720:-240,1318135320:-180,1331437320:-240,1350189720:-180,1362886920:-240,1381639320:-180,1394336520:-240,1413088920:-180,1426390920:-240,1444538520:-180,1457840520:-240,1475988120:-180,1489290120:-240,1508042520:-180,1520739720:-240,1539492120:-180,1552189320:-240},
"Antarctica/Rothera":{1242877321:-180},
"Antarctica/Syowa":{1242877321:180},
"Antarctica/Vostok":{1242877322:360},
"Asia/Aden":{1242877323:180},
"Asia/Almaty":{1242877323:360},
"Asia/Amman":{1242877324:180,1256856124:120,1269556924:180,1288305724:120,1301006524:180,1319755324:120,1333060924:180,1351204924:120,1364510524:180,1382654524:120,1395960124:180,1414708924:120,1427409724:180,1446158524:120,1458859324:180,1477608124:120,1490913724:180,1509057724:120,1522363324:180,1540507324:120,1553812924:180},
"Asia/Anadyr":{1242877325:780,1256395325:720,1269700925:780,1288449725:720,1301150525:780,1319899325:720,1332600125:780,1351348925:720,1364654525:780,1382798525:720,1396104125:780,1414248125:720,1427553725:780,1445697725:720,1459003325:780,1477752125:720,1490452925:780,1509201725:720,1521902525:780,1540651325:720,1553956925:780},
"Asia/Aqtau":{1242877326:300},
"Asia/Aqtobe":{1242877327:300},
"Asia/Ashgabat":{1242877327:300},
"Asia/Baghdad":{1242877328:180},
"Asia/Bahrain":{1242877329:180},
"Asia/Baku":{1242877330:300,1256431330:240,1269736930:300,1288485730:240,1301186530:300,1319935330:240,1332636130:300,1351384930:240,1364690530:300,1382834530:240,1396140130:300,1414284130:240,1427589730:300,1445733730:240,1459039330:300,1477788130:240,1490488930:300,1509237730:240,1521938530:300,1540687330:240,1553992930:300},
"Asia/Bangkok":{1242877330:420},
"Asia/Beirut":{1242877331:180,1256420531:120,1269729731:180,1288474931:120,1301179331:180,1319924531:120,1332628931:180,1351374131:120,1364683331:180,1382823731:120,1396132931:180,1414273331:120,1427582531:180,1445722931:120,1459032131:180,1477777331:120,1490481731:180,1509226931:120,1521931331:180,1540676531:120,1553985731:180},
"Asia/Bishkek":{1242877332:360},
"Asia/Brunei":{1242877333:480},
"Asia/Choibalsan":{1242877333:480},
"Asia/Chongqing":{1242877334:480},
"Asia/Colombo":{1242877335:330},
"Asia/Damascus":{1242877336:180,1257025336:120,1269556936:180,1288561336:120,1301006536:180,1320097336:120,1333060936:180,1351719736:120,1364510536:180,1383255736:120,1395960136:180,1414791736:120,1427409736:180,1446327736:120,1458859336:180,1477950136:120,1490913736:180,1509486136:120,1522363336:180,1541022136:120,1553812936:180},
"Asia/Dhaka":{1242877336:360},
"Asia/Dili":{1242877337:540},
"Asia/Dubai":{1242877338:240},
"Asia/Dushanbe":{1242877338:300},
"Asia/Gaza":{1242877339:180,1254094939:120,1269556939:180,1285544539:120,1301006539:180,1316994139:120,1333060939:180,1348443739:120,1364510539:180,1380498139:120,1395960139:180,1411947739:120,1427409739:180,1443397339:120,1458859339:180,1474846939:120,1490913739:180,1506296539:120,1522363339:180,1537746139:120,1553812939:180},
"Asia/Harbin":{1242877340:480},
"Asia/Ho Chi Minh":{1242877341:420},
"Asia/Hong Kong":{1242877341:480},
"Asia/Hovd":{1242877342:420},
"Asia/Irkutsk":{1242877343:540,1256409743:480,1269715343:540,1288464143:480,1301164943:540,1319913743:480,1332614543:540,1351363343:480,1364668943:540,1382812943:480,1396118543:540,1414262543:480,1427568143:540,1445712143:480,1459017743:540,1477766543:480,1490467343:540,1509216143:480,1521916943:540,1540665743:480,1553971343:540},
"Asia/Jakarta":{1242877344:420},
"Asia/Jayapura":{1242877345:540},
"Asia/Jerusalem":{1242877345:180,1254008545:120,1269564145:180,1284248545:120,1301618545:180,1317512545:120,1333068145:180,1348357345:120,1364517745:180,1378597345:120,1395967345:180,1411861345:120,1427416945:180,1442706145:120,1459471345:180,1475970145:120,1490920945:180,1506210145:120,1522370545:180,1537054945:120,1553820145:180},
"Asia/Kabul":{1242877346:270},
"Asia/Kamchatka":{1242877347:780,1256395347:720,1269700947:780,1288449747:720,1301150547:780,1319899347:720,1332600147:780,1351348947:720,1364654547:780,1382798547:720,1396104147:780,1414248147:720,1427553747:780,1445697747:720,1459003347:780,1477752147:720,1490452947:780,1509201747:720,1521902547:780,1540651347:720,1553956947:780},
"Asia/Karachi":{1242877348:360,1257014548:300},
"Asia/Kashgar":{1242877348:480},
"Asia/Kathmandu":{1242877349:345},
"Asia/Kolkata":{1242877350:330},
"Asia/Krasnoyarsk":{1242877350:480,1256413350:420,1269718950:480,1288467750:420,1301168550:480,1319917350:420,1332618150:480,1351366950:420,1364672550:480,1382816550:420,1396122150:480,1414266150:420,1427571750:480,1445715750:420,1459021350:480,1477770150:420,1490470950:480,1509219750:420,1521920550:480,1540669350:420,1553974950:480},
"Asia/Kuala Lumpur":{1242877351:480},
"Asia/Kuching":{1242877352:480},
"Asia/Kuwait":{1242877353:180},
"Asia/Macau":{1242877353:480},
"Asia/Magadan":{1242877354:720,1256398954:660,1269704554:720,1288453354:660,1301154154:720,1319902954:660,1332603754:720,1351352554:660,1364658154:720,1382802154:660,1396107754:720,1414251754:660,1427557354:720,1445701354:660,1459006954:720,1477755754:660,1490456554:720,1509205354:660,1521906154:720,1540654954:660,1553960554:720},
"Asia/Makassar":{1242877355:480},
"Asia/Manila":{1242877356:480},
"Asia/Muscat":{1242877356:240},
"Asia/New Delhi":{1242877357:330},
"Asia/Nicosia":{1242877358:180,1256434958:120,1269740558:180,1288489358:120,1301190158:180,1319938958:120,1332639758:180,1351388558:120,1364694158:180,1382838158:120,1396143758:180,1414287758:120,1427593358:180,1445737358:120,1459042958:180,1477791758:120,1490492558:180,1509241358:120,1521942158:180,1540690958:120,1553996558:180},
"Asia/Novosibirsk":{1242877359:420,1256416959:360,1269722559:420,1288471359:360,1301172159:420,1319920959:360,1332621759:420,1351370559:360,1364676159:420,1382820159:360,1396125759:420,1414269759:360,1427575359:420,1445719359:360,1459024959:420,1477773759:360,1490474559:420,1509223359:360,1521924159:420,1540672959:360,1553978559:420},
"Asia/Omsk":{1242877359:420,1256416959:360,1269722559:420,1288471359:360,1301172159:420,1319920959:360,1332621759:420,1351370559:360,1364676159:420,1382820159:360,1396125759:420,1414269759:360,1427575359:420,1445719359:360,1459024959:420,1477773759:360,1490474559:420,1509223359:360,1521924159:420,1540672959:360,1553978559:420},
"Asia/Oral":{1242877360:300},
"Asia/Phnom Penh":{1242877361:420},
"Asia/Pontianak":{1242877362:420},
"Asia/Pyongyang":{1242877362:540},
"Asia/Qatar":{1242877363:180},
"Asia/Qyzylorda":{1242877364:360},
"Asia/Rangoon":{1242877364:390},
"Asia/Riyadh":{1242877365:180},
"Asia/Sakhalin":{1242877366:660,1256402566:600,1269708166:660,1288456966:600,1301157766:660,1319906566:600,1332607366:660,1351356166:600,1364661766:660,1382805766:600,1396111366:660,1414255366:600,1427560966:660,1445704966:600,1459010566:660,1477759366:600,1490460166:660,1509208966:600,1521909766:660,1540658566:600,1553964166:660},
"Asia/Samarkand":{1242877367:300},
"Asia/Seoul":{1242877367:540},
"Asia/Shanghai":{1242877368:480},
"Asia/Singapore":{1242877369:480},
"Asia/Taipei":{1242877370:480},
"Asia/Tashkent":{1242877370:300},
"Asia/Tbilisi":{1242877371:240},
"Asia/Tehran":{1242877372:270,1253562172:210,1269204172:270,1285098172:210,1300740172:270,1316634172:210,1332276172:270,1348170172:210,1363898572:270,1379792572:210,1395434572:270,1411328572:210,1426970572:270,1442864572:210,1458506572:270,1474400572:210,1490128972:270,1506022972:210,1521664972:270,1537558972:210,1553200972:270},
"Asia/Thimphu":{1242877373:360},
"Asia/Tokyo":{1242877373:540},
"Asia/Ulaanbaatar":{1242877374:480},
"Asia/Urumqi":{1242877375:480},
"Asia/Vientiane":{1242877375:420},
"Asia/Vladivostok":{1242877376:660,1256402576:600,1269708176:660,1288456976:600,1301157776:660,1319906576:600,1332607376:660,1351356176:600,1364661776:660,1382805776:600,1396111376:660,1414255376:600,1427560976:660,1445704976:600,1459010576:660,1477759376:600,1490460176:660,1509208976:600,1521909776:660,1540658576:600,1553964176:660},
"Asia/Yakutsk":{1242877377:600,1256406177:540,1269711777:600,1288460577:540,1301161377:600,1319910177:540,1332610977:600,1351359777:540,1364665377:600,1382809377:540,1396114977:600,1414258977:540,1427564577:600,1445708577:540,1459014177:600,1477762977:540,1490463777:600,1509212577:540,1521913377:600,1540662177:540,1553967777:600},
"Asia/Yekaterinburg":{1242877378:360,1256420578:300,1269726178:360,1288474978:300,1301175778:360,1319924578:300,1332625378:360,1351374178:300,1364679778:360,1382823778:300,1396129378:360,1414273378:300,1427578978:360,1445722978:300,1459028578:360,1477777378:300,1490478178:360,1509226978:300,1521927778:360,1540676578:300,1553982178:360},
"Asia/Yerevan":{1242877379:300,1256424179:240,1269729779:300,1288478579:240,1301179379:300,1319928179:240,1332628979:300,1351377779:240,1364683379:300,1382827379:240,1396132979:300,1414276979:240,1427582579:300,1445726579:240,1459032179:300,1477780979:240,1490481779:300,1509230579:240,1521931379:300,1540680179:240,1553985779:300},
"Atlantic/Azores":{1242877379:0,1256434979:-60,1269740579:0,1288489379:-60,1301190179:0,1319938979:-60,1332639779:0,1351388579:-60,1364694179:0,1382838179:-60,1396143779:0,1414287779:-60,1427593379:0,1445737379:-60,1459042979:0,1477791779:-60,1490492579:0,1509241379:-60,1521942179:0,1540690979:-60,1553996579:0},
"Atlantic/Bermuda":{1242877380:-180,1257054180:-240,1268548980:-180,1289108580:-240,1299998580:-180,1320558180:-240,1331448180:-180,1352007780:-240,1362897780:-180,1383457380:-240,1394347380:-180,1414906980:-240,1425796980:-180,1446356580:-240,1457851380:-180,1478410980:-240,1489300980:-180,1509860580:-240,1520750580:-180,1541310180:-240,1552200180:-180},
"Atlantic/Canary":{1242877381:60,1256434981:0,1269740581:60,1288489381:0,1301190181:60,1319938981:0,1332639781:60,1351388581:0,1364694181:60,1382838181:0,1396143781:60,1414287781:0,1427593381:60,1445737381:0,1459042981:60,1477791781:0,1490492581:60,1509241381:0,1521942181:60,1540690981:0,1553996581:60},
"Atlantic/Cape Verde":{1242877382:-60},
"Atlantic/Faroe":{1242877382:60,1256434982:0,1269740582:60,1288489382:0,1301190182:60,1319938982:0,1332639782:60,1351388582:0,1364694182:60,1382838182:0,1396143782:60,1414287782:0,1427593382:60,1445737382:0,1459042982:60,1477791782:0,1490492582:60,1509241382:0,1521942182:60,1540690982:0,1553996582:60},
"Atlantic/Madeira":{1242877383:60,1256434983:0,1269740583:60,1288489383:0,1301190183:60,1319938983:0,1332639783:60,1351388583:0,1364694183:60,1382838183:0,1396143783:60,1414287783:0,1427593383:60,1445737383:0,1459042983:60,1477791783:0,1490492583:60,1509241383:0,1521942183:60,1540690983:0,1553996583:60},
"Atlantic/Reykjavik":{1242877384:0},
"Atlantic/South Georgia":{1242877385:-120},
"Atlantic/St Helena":{1242877385:0},
"Atlantic/Stanley":{1242877386:-240,1252219386:-180,1271569386:-240,1283668986:-180,1303018986:-240,1315118586:-180,1334468586:-240,1346568186:-180,1366522986:-240,1378017786:-180,1397972586:-240,1410072186:-180,1429422186:-240,1441521786:-180,1460871786:-240,1472971386:-180,1492321386:-240,1504420986:-180,1523770986:-240,1535870586:-180,1555825386:-240},
"Australia/Adelaide":{1242877387:570,1254588187:630,1270312987:570,1286037787:630,1301762587:570,1317487387:630,1333212187:570,1349541787:630,1365266587:570,1380991387:630,1396716187:570,1412440987:630,1428165787:570,1443890587:630,1459615387:570,1475340187:630,1491064987:570,1506789787:630,1522514587:570,1538844187:630,1554568987:570},
"Australia/Brisbane":{1242877387:600},
"Australia/Broken Hill":{1242877388:570,1254588188:630,1270312988:570,1286037788:630,1301762588:570,1317487388:630,1333212188:570,1349541788:630,1365266588:570,1380991388:630,1396716188:570,1412440988:630,1428165788:570,1443890588:630,1459615388:570,1475340188:630,1491064988:570,1506789788:630,1522514588:570,1538844188:630,1554568988:570},
"Australia/Currie":{1242877389:600,1254588189:660,1270312989:600,1286037789:660,1301762589:600,1317487389:660,1333212189:600,1349541789:660,1365266589:600,1380991389:660,1396716189:600,1412440989:660,1428165789:600,1443890589:660,1459615389:600,1475340189:660,1491064989:600,1506789789:660,1522514589:600,1538844189:660,1554568989:600},
"Australia/Darwin":{1242877390:570},
"Australia/Eucla":{1242877390:525},
"Australia/Hobart":{1242877391:600,1254588191:660,1270312991:600,1286037791:660,1301762591:600,1317487391:660,1333212191:600,1349541791:660,1365266591:600,1380991391:660,1396716191:600,1412440991:660,1428165791:600,1443890591:660,1459615391:600,1475340191:660,1491064991:600,1506789791:660,1522514591:600,1538844191:660,1554568991:600},
"Australia/Lindeman":{1242877392:600},
"Australia/Lord Howe":{1242877393:630,1254584593:660,1270309393:630,1286034193:660,1301758993:630,1317483793:660,1333208593:630,1349538193:660,1365262993:630,1380987793:660,1396712593:630,1412437393:660,1428162193:630,1443886993:660,1459611793:630,1475336593:660,1491061393:630,1506786193:660,1522510993:630,1538840593:660,1554565393:630},
"Australia/Melbourne":{1242877393:600,1254588193:660,1270312993:600,1286037793:660,1301762593:600,1317487393:660,1333212193:600,1349541793:660,1365266593:600,1380991393:660,1396716193:600,1412440993:660,1428165793:600,1443890593:660,1459615393:600,1475340193:660,1491064993:600,1506789793:660,1522514593:600,1538844193:660,1554568993:600},
"Australia/Perth":{1242877394:480},
"Australia/Sydney":{1242877395:600,1254588195:660,1270312995:600,1286037795:660,1301762595:600,1317487395:660,1333212195:600,1349541795:660,1365266595:600,1380991395:660,1396716195:600,1412440995:660,1428165795:600,1443890595:660,1459615395:600,1475340195:660,1491064995:600,1506789795:660,1522514595:600,1538844195:660,1554568995:600},
"Europe/Amsterdam":{1242877396:120,1256434996:60,1269740596:120,1288489396:60,1301190196:120,1319938996:60,1332639796:120,1351388596:60,1364694196:120,1382838196:60,1396143796:120,1414287796:60,1427593396:120,1445737396:60,1459042996:120,1477791796:60,1490492596:120,1509241396:60,1521942196:120,1540690996:60,1553996596:120},
"Europe/Andorra":{1242877397:120,1256434997:60,1269740597:120,1288489397:60,1301190197:120,1319938997:60,1332639797:120,1351388597:60,1364694197:120,1382838197:60,1396143797:120,1414287797:60,1427593397:120,1445737397:60,1459042997:120,1477791797:60,1490492597:120,1509241397:60,1521942197:120,1540690997:60,1553996597:120},
"Europe/Athens":{1242877397:180,1256434997:120,1269740597:180,1288489397:120,1301190197:180,1319938997:120,1332639797:180,1351388597:120,1364694197:180,1382838197:120,1396143797:180,1414287797:120,1427593397:180,1445737397:120,1459042997:180,1477791797:120,1490492597:180,1509241397:120,1521942197:180,1540690997:120,1553996597:180},
"Europe/Belgrade":{1242877398:120,1256434998:60,1269740598:120,1288489398:60,1301190198:120,1319938998:60,1332639798:120,1351388598:60,1364694198:120,1382838198:60,1396143798:120,1414287798:60,1427593398:120,1445737398:60,1459042998:120,1477791798:60,1490492598:120,1509241398:60,1521942198:120,1540690998:60,1553996598:120},
"Europe/Berlin":{1242877399:120,1256434999:60,1269740599:120,1288489399:60,1301190199:120,1319938999:60,1332639799:120,1351388599:60,1364694199:120,1382838199:60,1396143799:120,1414287799:60,1427593399:120,1445737399:60,1459042999:120,1477791799:60,1490492599:120,1509241399:60,1521942199:120,1540690999:60,1553996599:120},
"Europe/Brussels":{1242877400:120,1256435000:60,1269740600:120,1288489400:60,1301190200:120,1319939000:60,1332639800:120,1351388600:60,1364694200:120,1382838200:60,1396143800:120,1414287800:60,1427593400:120,1445737400:60,1459043000:120,1477791800:60,1490492600:120,1509241400:60,1521942200:120,1540691000:60,1553996600:120},
"Europe/Bucharest":{1242877400:180,1256435000:120,1269740600:180,1288489400:120,1301190200:180,1319939000:120,1332639800:180,1351388600:120,1364694200:180,1382838200:120,1396143800:180,1414287800:120,1427593400:180,1445737400:120,1459043000:180,1477791800:120,1490492600:180,1509241400:120,1521942200:180,1540691000:120,1553996600:180},
"Europe/Budapest":{1242877401:120,1256435001:60,1269740601:120,1288489401:60,1301190201:120,1319939001:60,1332639801:120,1351388601:60,1364694201:120,1382838201:60,1396143801:120,1414287801:60,1427593401:120,1445737401:60,1459043001:120,1477791801:60,1490492601:120,1509241401:60,1521942201:120,1540691001:60,1553996601:120},
"Europe/Chisinau":{1242877402:180,1256435002:120,1269740602:180,1288489402:120,1301190202:180,1319939002:120,1332639802:180,1351388602:120,1364694202:180,1382838202:120,1396143802:180,1414287802:120,1427593402:180,1445737402:120,1459043002:180,1477791802:120,1490492602:180,1509241402:120,1521942202:180,1540691002:120,1553996602:180},
"Europe/Copenhagen":{1242877403:120,1256435003:60,1269740603:120,1288489403:60,1301190203:120,1319939003:60,1332639803:120,1351388603:60,1364694203:120,1382838203:60,1396143803:120,1414287803:60,1427593403:120,1445737403:60,1459043003:120,1477791803:60,1490492603:120,1509241403:60,1521942203:120,1540691003:60,1553996603:120},
"Europe/Dublin":{1242877403:60,1256435003:0,1269740603:60,1288489403:0,1301190203:60,1319939003:0,1332639803:60,1351388603:0,1364694203:60,1382838203:0,1396143803:60,1414287803:0,1427593403:60,1445737403:0,1459043003:60,1477791803:0,1490492603:60,1509241403:0,1521942203:60,1540691003:0,1553996603:60},
"Europe/Gibraltar":{1242877404:120,1256435004:60,1269740604:120,1288489404:60,1301190204:120,1319939004:60,1332639804:120,1351388604:60,1364694204:120,1382838204:60,1396143804:120,1414287804:60,1427593404:120,1445737404:60,1459043004:120,1477791804:60,1490492604:120,1509241404:60,1521942204:120,1540691004:60,1553996604:120},
"Europe/Helsinki":{1242877405:180,1256435005:120,1269740605:180,1288489405:120,1301190205:180,1319939005:120,1332639805:180,1351388605:120,1364694205:180,1382838205:120,1396143805:180,1414287805:120,1427593405:180,1445737405:120,1459043005:180,1477791805:120,1490492605:180,1509241405:120,1521942205:180,1540691005:120,1553996605:180},
"Europe/Istanbul":{1242877406:180,1256435006:120,1269740606:180,1288489406:120,1301190206:180,1319939006:120,1332639806:180,1351388606:120,1364694206:180,1382838206:120,1396143806:180,1414287806:120,1427593406:180,1445737406:120,1459043006:180,1477791806:120,1490492606:180,1509241406:120,1521942206:180,1540691006:120,1553996606:180},
"Europe/Kaliningrad":{1242877407:180,1256431407:120,1269737007:180,1288485807:120,1301186607:180,1319935407:120,1332636207:180,1351385007:120,1364690607:180,1382834607:120,1396140207:180,1414284207:120,1427589807:180,1445733807:120,1459039407:180,1477788207:120,1490489007:180,1509237807:120,1521938607:180,1540687407:120,1553993007:180},
"Europe/Kiev":{1242877407:180,1256435007:120,1269740607:180,1288489407:120,1301190207:180,1319939007:120,1332639807:180,1351388607:120,1364694207:180,1382838207:120,1396143807:180,1414287807:120,1427593407:180,1445737407:120,1459043007:180,1477791807:120,1490492607:180,1509241407:120,1521942207:180,1540691007:120,1553996607:180},
"Europe/Lisbon":{1242877408:60,1256435008:0,1269740608:60,1288489408:0,1301190208:60,1319939008:0,1332639808:60,1351388608:0,1364694208:60,1382838208:0,1396143808:60,1414287808:0,1427593408:60,1445737408:0,1459043008:60,1477791808:0,1490492608:60,1509241408:0,1521942208:60,1540691008:0,1553996608:60},
"Europe/London":{1242877409:60,1256435009:0,1269740609:60,1288489409:0,1301190209:60,1319939009:0,1332639809:60,1351388609:0,1364694209:60,1382838209:0,1396143809:60,1414287809:0,1427593409:60,1445737409:0,1459043009:60,1477791809:0,1490492609:60,1509241409:0,1521942209:60,1540691009:0,1553996609:60},
"Europe/Luxembourg":{1242877410:120,1256435010:60,1269740610:120,1288489410:60,1301190210:120,1319939010:60,1332639810:120,1351388610:60,1364694210:120,1382838210:60,1396143810:120,1414287810:60,1427593410:120,1445737410:60,1459043010:120,1477791810:60,1490492610:120,1509241410:60,1521942210:120,1540691010:60,1553996610:120},
"Europe/Madrid":{1242877410:120,1256435010:60,1269740610:120,1288489410:60,1301190210:120,1319939010:60,1332639810:120,1351388610:60,1364694210:120,1382838210:60,1396143810:120,1414287810:60,1427593410:120,1445737410:60,1459043010:120,1477791810:60,1490492610:120,1509241410:60,1521942210:120,1540691010:60,1553996610:120},
"Europe/Malta":{1242877411:120,1256435011:60,1269740611:120,1288489411:60,1301190211:120,1319939011:60,1332639811:120,1351388611:60,1364694211:120,1382838211:60,1396143811:120,1414287811:60,1427593411:120,1445737411:60,1459043011:120,1477791811:60,1490492611:120,1509241411:60,1521942211:120,1540691011:60,1553996611:120},
"Europe/Minsk":{1242877412:180,1256431412:120,1269737012:180,1288485812:120,1301186612:180,1319935412:120,1332636212:180,1351385012:120,1364690612:180,1382834612:120,1396140212:180,1414284212:120,1427589812:180,1445733812:120,1459039412:180,1477788212:120,1490489012:180,1509237812:120,1521938612:180,1540687412:120,1553993012:180},
"Europe/Monaco":{1242877413:120,1256435013:60,1269740613:120,1288489413:60,1301190213:120,1319939013:60,1332639813:120,1351388613:60,1364694213:120,1382838213:60,1396143813:120,1414287813:60,1427593413:120,1445737413:60,1459043013:120,1477791813:60,1490492613:120,1509241413:60,1521942213:120,1540691013:60,1553996613:120},
"Europe/Moscow":{1242877414:240,1256427814:180,1269733414:240,1288482214:180,1301183014:240,1319931814:180,1332632614:240,1351381414:180,1364687014:240,1382831014:180,1396136614:240,1414280614:180,1427586214:240,1445730214:180,1459035814:240,1477784614:180,1490485414:240,1509234214:180,1521935014:240,1540683814:180,1553989414:240},
"Europe/Oslo":{1242877414:120,1256435014:60,1269740614:120,1288489414:60,1301190214:120,1319939014:60,1332639814:120,1351388614:60,1364694214:120,1382838214:60,1396143814:120,1414287814:60,1427593414:120,1445737414:60,1459043014:120,1477791814:60,1490492614:120,1509241414:60,1521942214:120,1540691014:60,1553996614:120},
"Europe/Paris":{1242877415:120,1256435015:60,1269740615:120,1288489415:60,1301190215:120,1319939015:60,1332639815:120,1351388615:60,1364694215:120,1382838215:60,1396143815:120,1414287815:60,1427593415:120,1445737415:60,1459043015:120,1477791815:60,1490492615:120,1509241415:60,1521942215:120,1540691015:60,1553996615:120},
"Europe/Prague":{1242877416:120,1256435016:60,1269740616:120,1288489416:60,1301190216:120,1319939016:60,1332639816:120,1351388616:60,1364694216:120,1382838216:60,1396143816:120,1414287816:60,1427593416:120,1445737416:60,1459043016:120,1477791816:60,1490492616:120,1509241416:60,1521942216:120,1540691016:60,1553996616:120},
"Europe/Riga":{1242877417:180,1256435017:120,1269740617:180,1288489417:120,1301190217:180,1319939017:120,1332639817:180,1351388617:120,1364694217:180,1382838217:120,1396143817:180,1414287817:120,1427593417:180,1445737417:120,1459043017:180,1477791817:120,1490492617:180,1509241417:120,1521942217:180,1540691017:120,1553996617:180},
"Europe/Rome":{1242877417:120,1256435017:60,1269740617:120,1288489417:60,1301190217:120,1319939017:60,1332639817:120,1351388617:60,1364694217:120,1382838217:60,1396143817:120,1414287817:60,1427593417:120,1445737417:60,1459043017:120,1477791817:60,1490492617:120,1509241417:60,1521942217:120,1540691017:60,1553996617:120},
"Europe/Samara":{1242877418:300,1256424218:240,1269729818:300,1288478618:240,1301179418:300,1319928218:240,1332629018:300,1351377818:240,1364683418:300,1382827418:240,1396133018:300,1414277018:240,1427582618:300,1445726618:240,1459032218:300,1477781018:240,1490481818:300,1509230618:240,1521931418:300,1540680218:240,1553985818:300},
"Europe/Simferopol":{1242877419:180,1256435019:120,1269740619:180,1288489419:120,1301190219:180,1319939019:120,1332639819:180,1351388619:120,1364694219:180,1382838219:120,1396143819:180,1414287819:120,1427593419:180,1445737419:120,1459043019:180,1477791819:120,1490492619:180,1509241419:120,1521942219:180,1540691019:120,1553996619:180},
"Europe/Sofia":{1242877420:180,1256435020:120,1269740620:180,1288489420:120,1301190220:180,1319939020:120,1332639820:180,1351388620:120,1364694220:180,1382838220:120,1396143820:180,1414287820:120,1427593420:180,1445737420:120,1459043020:180,1477791820:120,1490492620:180,1509241420:120,1521942220:180,1540691020:120,1553996620:180},
"Europe/Stockholm":{1242877421:120,1256435021:60,1269740621:120,1288489421:60,1301190221:120,1319939021:60,1332639821:120,1351388621:60,1364694221:120,1382838221:60,1396143821:120,1414287821:60,1427593421:120,1445737421:60,1459043021:120,1477791821:60,1490492621:120,1509241421:60,1521942221:120,1540691021:60,1553996621:120},
"Europe/Tallinn":{1242877421:180,1256435021:120,1269740621:180,1288489421:120,1301190221:180,1319939021:120,1332639821:180,1351388621:120,1364694221:180,1382838221:120,1396143821:180,1414287821:120,1427593421:180,1445737421:120,1459043021:180,1477791821:120,1490492621:180,1509241421:120,1521942221:180,1540691021:120,1553996621:180},
"Europe/Tirane":{1242877422:120,1256435022:60,1269740622:120,1288489422:60,1301190222:120,1319939022:60,1332639822:120,1351388622:60,1364694222:120,1382838222:60,1396143822:120,1414287822:60,1427593422:120,1445737422:60,1459043022:120,1477791822:60,1490492622:120,1509241422:60,1521942222:120,1540691022:60,1553996622:120},
"Europe/Uzhgorod":{1242877423:180,1256435023:120,1269740623:180,1288489423:120,1301190223:180,1319939023:120,1332639823:180,1351388623:120,1364694223:180,1382838223:120,1396143823:180,1414287823:120,1427593423:180,1445737423:120,1459043023:180,1477791823:120,1490492623:180,1509241423:120,1521942223:180,1540691023:120,1553996623:180},
"Europe/Vaduz":{1242877424:120,1256435024:60,1269740624:120,1288489424:60,1301190224:120,1319939024:60,1332639824:120,1351388624:60,1364694224:120,1382838224:60,1396143824:120,1414287824:60,1427593424:120,1445737424:60,1459043024:120,1477791824:60,1490492624:120,1509241424:60,1521942224:120,1540691024:60,1553996624:120},
"Europe/Vienna":{1242877424:120,1256435024:60,1269740624:120,1288489424:60,1301190224:120,1319939024:60,1332639824:120,1351388624:60,1364694224:120,1382838224:60,1396143824:120,1414287824:60,1427593424:120,1445737424:60,1459043024:120,1477791824:60,1490492624:120,1509241424:60,1521942224:120,1540691024:60,1553996624:120},
"Europe/Vilnius":{1242877425:180,1256435025:120,1269740625:180,1288489425:120,1301190225:180,1319939025:120,1332639825:180,1351388625:120,1364694225:180,1382838225:120,1396143825:180,1414287825:120,1427593425:180,1445737425:120,1459043025:180,1477791825:120,1490492625:180,1509241425:120,1521942225:180,1540691025:120,1553996625:180},
"Europe/Volgograd":{1242877426:240,1256427826:180,1269733426:240,1288482226:180,1301183026:240,1319931826:180,1332632626:240,1351381426:180,1364687026:240,1382831026:180,1396136626:240,1414280626:180,1427586226:240,1445730226:180,1459035826:240,1477784626:180,1490485426:240,1509234226:180,1521935026:240,1540683826:180,1553989426:240},
"Europe/Warsaw":{1242877427:120,1256435027:60,1269740627:120,1288489427:60,1301190227:120,1319939027:60,1332639827:120,1351388627:60,1364694227:120,1382838227:60,1396143827:120,1414287827:60,1427593427:120,1445737427:60,1459043027:120,1477791827:60,1490492627:120,1509241427:60,1521942227:120,1540691027:60,1553996627:120},
"Europe/Zaporozhye":{1242877428:180,1256435028:120,1269740628:180,1288489428:120,1301190228:180,1319939028:120,1332639828:180,1351388628:120,1364694228:180,1382838228:120,1396143828:180,1414287828:120,1427593428:180,1445737428:120,1459043028:180,1477791828:120,1490492628:180,1509241428:120,1521942228:180,1540691028:120,1553996628:180},
"Europe/Zurich":{1242877428:120,1256435028:60,1269740628:120,1288489428:60,1301190228:120,1319939028:60,1332639828:120,1351388628:60,1364694228:120,1382838228:60,1396143828:120,1414287828:60,1427593428:120,1445737428:60,1459043028:120,1477791828:60,1490492628:120,1509241428:60,1521942228:120,1540691028:60,1553996628:120},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-09":{0:-540},
"GMT-08":{0:-480},
"GMT-07":{0:-420},
"GMT-06":{0:-360},
"GMT-05":{0:-300},
"GMT-04":{0:-240},
"GMT-03":{0:-180},
"GMT-02":{0:-120},
"GMT-01":{0:-60},
"GMT+00":{0:0},
"GMT+01":{0:60},
"GMT+02":{0:120},
"GMT+03":{0:180},
"GMT+04":{0:240},
"GMT+05":{0:300},
"GMT+06":{0:360},
"GMT+07":{0:420},
"GMT+08":{0:480},
"GMT+09":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660},
"GMT+12":{0:720},
"Indian Ocean/Antananarivo":{1242877429:180},
"Indian Ocean/Chagos":{1242877430:360},
"Indian Ocean/Christmas":{1242877431:420},
"Indian Ocean/Cocos":{1242877431:390},
"Indian Ocean/Comoro":{1242877431:180},
"Indian Ocean/Kerguelen":{1242877432:300},
"Indian Ocean/Mahe":{1242877433:240},
"Indian Ocean/Maldives":{1242877434:300},
"Indian Ocean/Mauritius":{1242877434:240,1256424234:300,1269729834:240,1288478634:300,1301179434:240,1319928234:300,1332629034:240,1351377834:300,1364683434:240,1382827434:300,1396133034:240,1414277034:300,1427582634:240,1445726634:300,1459032234:240,1477781034:300,1490481834:240,1509230634:300,1521931434:240,1540680234:300,1553985834:240},
"Indian Ocean/Mayotte":{1242877435:180},
"Indian Ocean/Reunion":{1242877436:240},
"Pacific/Apia":{1242877436:-660},
"Pacific/Auckland":{1242877437:720,1253976237:780,1270305837:720,1285425837:780,1301755437:720,1316875437:780,1333205037:720,1348929837:780,1365259437:720,1380379437:780,1396709037:720,1411829037:780,1428158637:720,1443278637:780,1459608237:720,1474728237:780,1491057837:720,1506177837:780,1522507437:720,1538232237:780,1554561837:720},
"Pacific/Chatham":{1242877438:765,1253976238:825,1270305838:765,1285425838:825,1301755438:765,1316875438:825,1333205038:765,1348929838:825,1365259438:765,1380379438:825,1396709038:765,1411829038:825,1428158638:765,1443278638:825,1459608238:765,1474728238:825,1491057838:765,1506177838:825,1522507438:765,1538232238:825,1554561838:765},
"Pacific/Easter":{1242877439:-360,1255236239:-300,1268538239:-360,1286685839:-300,1299987839:-360,1318135439:-300,1331437439:-360,1350189839:-300,1362887039:-360,1381639439:-300,1394336639:-360,1413089039:-300,1426391039:-360,1444538639:-300,1457840639:-360,1475988239:-300,1489290239:-360,1508042639:-300,1520739839:-360,1539492239:-300,1552189439:-360},
"Pacific/Efate":{1242877440:660},
"Pacific/Enderbury":{1242877440:780},
"Pacific/Fakaofo":{1242877441:-600},
"Pacific/Fiji":{1242877441:720},
"Pacific/Funafuti":{1242877442:720},
"Pacific/Galapagos":{1242877443:-360},
"Pacific/Gambier":{1242877443:-540},
"Pacific/Guadalcanal":{1242877444:660},
"Pacific/Guam":{1242877445:600},
"Pacific/Honolulu":{1242877445:-600},
"Pacific/Johnston":{1242877446:-600},
"Pacific/Kiritimati":{1242877447:840},
"Pacific/Kosrae":{1242877447:660},
"Pacific/Kwajalein":{1242877448:720},
"Pacific/Majuro":{1242877449:720},
"Pacific/Marquesas":{1242877450:-570},
"Pacific/Midway":{1242877450:-660},
"Pacific/Nauru":{1242877451:720},
"Pacific/Niue":{1242877452:-660},
"Pacific/Norfolk":{1242877452:690},
"Pacific/Noumea":{1242877453:660},
"Pacific/Pago Pago":{1242877454:-660},
"Pacific/Palau":{1242877455:540},
"Pacific/Pitcairn":{1242877455:-480},
"Pacific/Ponape":{1242877456:660},
"Pacific/Port Moresby":{1242877456:600},
"Pacific/Rarotonga":{1242877457:-600},
"Pacific/Saipan":{1242877457:600},
"Pacific/Tahiti":{1242877458:-600},
"Pacific/Tarawa":{1242877459:720},
"Pacific/Tongatapu":{1242877459:780},
"Pacific/Truk":{1242877460:600},
"Pacific/Wake":{1242877460:720},
"Pacific/Wallis":{1242877461:720},
"UTC":{1242877461:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// All email addresses get stripped from this file before publishing

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  // Update these with the correct format for your country
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
  // Don't modify xxVER or xxDATE
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
  // If you want credit for translation, translate "Languagename translation by your name"
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "A newer version of Presto's Clock is available. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  // Replace English with the name of your language in your language
  't_languagename':    'English'
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Bulgarian translation by Artyom Ivanov <artyom.ivanov@abv.bg>

"bg": {
  "daysLong":          ["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],
  "daysShort":         ["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],
  "monthsLong":        ["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],
  "monthsShort":       ["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Ное","Дек"],
  "defaultDateFormat": "D M d",
  "defaultTimeFormat": "H:i:s",
  "t_dateformat":      "Формат на датата:",
  "t_timeformat":      "Формат на часа:",
  "t_timezone":        "Часови пояс:",
  "t_localtime":       "Местно време",
  "t_bottomlabel":     "Текст:",
  "t_optional":        "(допълнително)",
  "t_examples":        "Примери:",
  "t_date":            "Дата:",
  "t_time":            "Час:",
  "t_label":           "Текст:",
  "t_dateexamples":    "D M d = Съб Апр 07<br>n/j l = 4/7 Събота",
  "t_timeexamples":    "g:i a = 5:44 pm<br>H:i = 17:44",
  "t_labelexamples":   "София, GMT+2",
  "t_formathelp":      '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a>',
  "t_formathelplong":  '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a> (не се поддържат: T, e, o, u)',
  "t_version":         "Версия xxVER (xxDATE)",
  "t_about":           "За гаджета",
  "t_translateby":     "Превод на български ArTy  &copy;",
  "t_language":        "Език:",
  "t_charity":         'Presto\'s Clock това е Charityware. Ако приложението Ви е харесало, моля направете дарение за да подпомогнете нуждаещите се по света. Повече <a href="http://prestonhunt.com/story/110">информация за да направите дарение</a> може да намерите на страницата на проекта.',
  "t_fontfamily1":     "Шрифт:",
  "t_fontfamily2":     "Шрифт:",
  "t_fontfamily3":     "Шрифт:",
  "t_fontsize1":       "Размер на шрифта:",
  "t_fontsize2":       "Размер на шрифта:",
  "t_fontsize3":       "Размер на шрифта:",
  "t_fontcolor1":      "Цвят на шрифта:",
  "t_fontcolor2":      "Цвят на шрифта:",
  "t_fontcolor3":      "Цвят на шрифта:",
  "t_date2":           "Дата",
  "t_time2":           "Час",
  "t_label2":          "Текст",
  "t_swap_labels":     "Размени местата на датата и текста",
  "t_tab1":            "Настройки",
  "t_tab2":            "Външност",
  "t_tab3":            "За програмата",
  "t_copyright":       "Copyright 2009 Preston Hunt",
  "t_languagename":    "Български"
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Portuguese translation by Mateus Scherer Cardoso <matschcar@terra.com.br>
pt: {
  daysLong:      ["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"],
  daysShort:      ["dom","seg","ter","qua","qui","sex","sáb"],
  monthsLong:     ["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],
  monthsShort:    ["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],
  defaultDateFormat:    "D M d",
  defaultTimeFormat:    "h:i a",
  t_dateformat:         "Formato da data:",
  t_timeformat:         "Formato do horário:",
  t_timezone:           "Fuso horário:",
  t_localtime:          "Horário local",
  t_bottomlabel:        "Linha inferior:",
  t_optional:           "(opcional)",
  t_examples:           "Exemplos:",
  t_date:               "Data:",
  t_time:               "Horário:",
  t_label:              "Linha:",
  t_dateexamples:       "D M d = Sáb Abr 07<br>n/j l = 4/7 Sábado",
  t_timeexamples:       "g:i a = 5:44 pm<br>H:i = 17:44",
  t_labelexamples:      "Portland, Tokyo, GMT+2",
  t_formathelp:         '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a>',
  t_formathelplong:     '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a> (não suportado: T, e, o, u)',
  t_version:            "Versão xxVER (xxDATE)",
  t_about:              "Sobre este gadget",
  t_translateby:        "",
  t_language:           "Idioma:",
  t_charity:            'Presto\'s Clock é Charityware. Se você gostar, por favor considere uma doação para o menos afortunado do mundo. Veja a página do projeto para <a href="http://prestonhunt.com/story/110">informações de como doar</a>.',
  t_fontfamily1:        "Fonte:",
  t_fontfamily2:        "Fonte:",
  t_fontfamily3:        "Fonte:",
  t_fontsize1:          "Tamanho da fonte:",
  t_fontsize2:          "Tamanho da fonte:",
  t_fontsize3:          "Tamanho da fonte:",
  t_fontcolor1:         "Cor da fonte:",
  t_fontcolor2:         "Cor da fonte:",
  t_fontcolor3:         "Cor da fonte:",
  t_date2:              "Data",
  t_time2:              "Horário",
  t_label2:             "Linha",
  t_swap_labels:        "Trocar a data com a linha inferior",
  t_tab1:               "Geral",
  t_tab2:               "Aparência",
  t_tab3:               "Sobre",
  t_copyright:          "Copyright 2009 Preston Hunt",
  t_update:             'Uma nova versão do Presto\'s Clock está disponível. <a href="http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51">Atualize agora!</a>',
  t_languagename:       "Português"
},


// Преведено на македонски од Виктор Манчев <viktor.mancev@gmail.com>
'mk': {
	'daysLong':    ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"],
	'daysShort':   ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"],
	'monthsLong':  ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"],
	'monthsShort': ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Изглед на датумот:',
	't_timeformat':     'Изглед на часовникот:',
	't_timezone':       'Временска зона:',
	't_localtime':      'Локално време',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнително)',
	't_examples':       'Примери:',
	't_date':           'Датум:',
	't_time':           'Време:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Саб 07 Апр<br>n/j l = 4/7 Сабота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Скопје, UTC+1',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a> (не се поддржани: T, e, o, u)',
	't_version':        'Верзија xxVER (xxDATE)',
	't_about':          'За овој gadget',
	't_translateby':    'Преведено на македонски од Виктор Манчев',
	't_language':       'Јазик:',
	't_charity':        "Presto's Clock претставува Charityware. Ако ви се допаѓа и често го користите, ве молам размислете да донирате на помалку среќните. Посетете ја веб-страницата на проектов <a href=\"http://prestonhunt.com/story/110\">за повеќе информации</a>.",
	't_fontfamily1':     'Фонт:',
	't_fontfamily2':     'Фонт:',
	't_fontfamily3':     'Фонт:',
	't_fontsize1':       'Големина на фонтот:',
	't_fontsize2':       'Големина на фонтот:',
	't_fontsize3':       'Големина на фонтот:',
	't_fontcolor1':      'Боја на фонтот:',
	't_fontcolor2':      'Боја на фонтот:',
	't_fontcolor3':      'Боја на фонтот:',
//	't_background':  		'Позадина',
	't_date2': 				 	 'Датум',
	't_time2': 				 	 'Време',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Промени ги местата на датумот и текстот',
  't_tab1':            'Општо', 
  't_tab2':            'Изглеd',
  't_tab3':            'Информации',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "Достапна е понова верзија од Presto's Clock. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Превземете ја!</a>",
  't_languagename':    'македонски'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0; // force recalculation of width

  gTime.opacity = G.mainTimeFormat ? 100 : 0;
  gTime.value = formatDate( G.mainTimeFormat, now );
  gTime.height = gTime.width = 0; // force recalculation of width

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;
  okToUpdate = true;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  showIfUpdateAvailable();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}

function getHttpAsText( url ) {
  try {
    var req = new ActiveXObject( "Microsoft.XMLHTTP" );
    req.open( 'GET', url, false );
    req.send();
    if ( req.status == 200 ) {
      return req.responseText;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

function isUpdateAvailable() {
  var newestText = getHttpAsText( 'http://prestonhunt.com/m/2009/prestosidebarclock.version?cacheBuster=' + Math.random() );
  if ( newestText === false ) return false;
  var currentText = 'xxVER';

  var newestVersion = parseFloat( newestText );
  var currentVersion = parseFloat( currentText );

  return newestVersion > currentVersion;
}

function showIfUpdateAvailable() {
  if ( isUpdateAvailable() ) {
    document.getElementById( 't_update' ).style.display = 'block';
  }
}
