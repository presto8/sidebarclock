// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1237871663:0},
"Africa/Accra":{1237871664:0},
"Africa/Addis Ababa":{1237871665:180},
"Africa/Algiers":{1237871665:60},
"Africa/Asmara":{1237871666:180},
"Africa/Bamako":{1237871667:0},
"Africa/Bangui":{1237871668:60},
"Africa/Banjul":{1237871668:0},
"Africa/Bissau":{1237871669:0},
"Africa/Blantyre":{1237871670:120},
"Africa/Brazzaville":{1237871670:60},
"Africa/Bujumbura":{1237871671:120},
"Africa/Cairo":{1237871672:120,1240524872:180,1251407672:120,1272579272:180,1282857272:120,1304028872:180,1314306872:120,1335478472:180,1346361272:120,1366928072:180,1377810872:120,1398377672:180,1409260472:120,1429827272:180,1440710072:120,1461881672:180,1472159672:120,1493331272:180,1504214072:120,1524780872:180,1535663672:120},
"Africa/Casablanca":{1237871672:0},
"Africa/Ceuta":{1237871673:60,1238289273:120,1256433273:60,1269738873:120,1288487673:60,1301188473:120,1319937273:60,1332638073:120,1351386873:60,1364692473:120,1382836473:60,1396142073:120,1414286073:60,1427591673:120,1445735673:60,1459041273:120,1477790073:60,1490490873:120,1509239673:60,1521940473:120,1540689273:60},
"Africa/Conakry":{1237871674:0},
"Africa/Dakar":{1237871675:0},
"Africa/Dar es Salaam":{1237871675:180},
"Africa/Djibouti":{1237871676:180},
"Africa/Douala":{1237871677:60},
"Africa/El Aaiun":{1237871677:0},
"Africa/Freetown":{1237871678:0},
"Africa/Gaborone":{1237871679:120},
"Africa/Harare":{1237871680:120},
"Africa/Johannesburg":{1237871680:120},
"Africa/Kampala":{1237871681:180},
"Africa/Khartoum":{1237871682:180},
"Africa/Kigali":{1237871682:120},
"Africa/Kinshasa":{1237871683:60},
"Africa/Lagos":{1237871684:60},
"Africa/Libreville":{1237871684:60},
"Africa/Lome":{1237871685:0},
"Africa/Luanda":{1237871685:60},
"Africa/Lubumbashi":{1237871686:120},
"Africa/Lusaka":{1237871687:120},
"Africa/Malabo":{1237871687:60},
"Africa/Maputo":{1237871688:120},
"Africa/Maseru":{1237871689:120},
"Africa/Mbabane":{1237871689:120},
"Africa/Mogadishu":{1237871690:180},
"Africa/Monrovia":{1237871691:0},
"Africa/Nairobi":{1237871692:180},
"Africa/Ndjamena":{1237871692:60},
"Africa/Niamey":{1237871693:60},
"Africa/Nouakchott":{1237871694:0},
"Africa/Ouagadougou":{1237871694:0},
"Africa/Porto-Novo":{1237871695:60},
"Africa/Sao Tome":{1237871696:0},
"Africa/Tripoli":{1237871697:120},
"Africa/Tunis":{1237871697:60,1238289297:120,1256433297:60,1269738897:120,1288487697:60,1301188497:120,1319937297:60,1332638097:120,1351386897:60,1364692497:120,1382836497:60,1396142097:120,1414286097:60,1427591697:120,1445735697:60,1459041297:120,1477790097:60,1490490897:120,1509239697:60,1521940497:120,1540689297:60},
"Africa/Windhoek":{1237871698:120,1238890498:60,1252199698:120,1270340098:60,1283649298:120,1301789698:60,1315098898:120,1333239298:60,1346548498:120,1365293698:60,1377998098:120,1396743298:60,1410052498:120,1428192898:60,1441502098:120,1459642498:60,1472951698:120,1491092098:60,1504401298:120,1522541698:60,1535850898:120},
"America/Adak":{1237871699:-540,1257074099:-600,1268568899:-540,1289128499:-600,1300018499:-540,1320578099:-600,1331468099:-540,1352027699:-600,1362917699:-540,1383477299:-600,1394367299:-540,1414926899:-600,1425816899:-540,1446376499:-600,1457871299:-540,1478430899:-600,1489320899:-540,1509880499:-600,1520770499:-540,1541330099:-600,1552220099:-540},
"America/Anchorage":{1237871700:-480,1257070500:-540,1268565300:-480,1289124900:-540,1300014900:-480,1320574500:-540,1331464500:-480,1352024100:-540,1362914100:-480,1383473700:-540,1394363700:-480,1414923300:-540,1425813300:-480,1446372900:-540,1457867700:-480,1478427300:-540,1489317300:-480,1509876900:-540,1520766900:-480,1541326500:-540,1552216500:-480},
"America/Anguilla":{1237871700:-240},
"America/Antigua":{1237871701:-240},
"America/Araguaina":{1237871702:-180},
"America/Argentina/Buenos Aires":{1237871702:-180,1255835702:-120,1269137702:-180,1287285302:-120,1300587302:-180,1318734902:-120,1332036902:-180,1350789302:-120,1363486502:-180,1382238902:-120,1394936102:-180,1413688502:-120,1426385702:-180,1445138102:-120,1458440102:-180,1476587702:-120,1489889702:-180,1508037302:-120,1521339302:-180,1540091702:-120,1552788902:-180},
"America/Argentina/Catamarca":{1237871703:-180},
"America/Argentina/Cordoba":{1237871704:-180,1255835704:-120,1269137704:-180,1287285304:-120,1300587304:-180,1318734904:-120,1332036904:-180,1350789304:-120,1363486504:-180,1382238904:-120,1394936104:-180,1413688504:-120,1426385704:-180,1445138104:-120,1458440104:-180,1476587704:-120,1489889704:-180,1508037304:-120,1521339304:-180,1540091704:-120,1552788904:-180},
"America/Argentina/Jujuy":{1237871705:-180},
"America/Argentina/La Rioja":{1237871705:-180},
"America/Argentina/Mendoza":{1237871706:-180},
"America/Argentina/Rio Gallegos":{1237871707:-180},
"America/Argentina/Salta":{1237871708:-180},
"America/Argentina/San Juan":{1237871708:-180},
"America/Argentina/San Luis":{1237871709:-180},
"America/Argentina/Tucuman":{1237871710:-180,1255835710:-120,1269137710:-180,1287285310:-120,1300587310:-180,1318734910:-120,1332036910:-180,1350789310:-120,1363486510:-180,1382238910:-120,1394936110:-180,1413688510:-120,1426385710:-180,1445138110:-120,1458440110:-180,1476587710:-120,1489889710:-180,1508037310:-120,1521339310:-180,1540091710:-120,1552788910:-180},
"America/Argentina/Ushuaia":{1237871711:-180},
"America/Aruba":{1237871711:-240},
"America/Asuncion":{1237871712:-240,1255839312:-180,1268536512:-240,1287288912:-180,1299986112:-240,1318738512:-180,1331435712:-240,1350792912:-180,1362885312:-240,1382242512:-180,1394334912:-240,1413692112:-180,1425784512:-240,1445141712:-180,1457838912:-240,1476591312:-180,1489288512:-240,1508040912:-180,1520738112:-240,1540095312:-180,1552187712:-240},
"America/Atikokan":{1237871713:-300},
"America/Bahia":{1237871714:-180},
"America/Barbados":{1237871714:-240},
"America/Belem":{1237871715:-180},
"America/Belize":{1237871716:-360},
"America/Blanc-Sablon":{1237871716:-240},
"America/Boa Vista":{1237871717:-240},
"America/Bogota":{1237871718:-300},
"America/Boise":{1237871719:-360,1257063319:-420,1268558119:-360,1289117719:-420,1300007719:-360,1320567319:-420,1331457319:-360,1352016919:-420,1362906919:-360,1383466519:-420,1394356519:-360,1414916119:-420,1425806119:-360,1446365719:-420,1457860519:-360,1478420119:-420,1489310119:-360,1509869719:-420,1520759719:-360,1541319319:-420,1552209319:-360},
"America/Cambridge Bay":{1237871719:-360,1257063319:-420,1268558119:-360,1289117719:-420,1300007719:-360,1320567319:-420,1331457319:-360,1352016919:-420,1362906919:-360,1383466519:-420,1394356519:-360,1414916119:-420,1425806119:-360,1446365719:-420,1457860519:-360,1478420119:-420,1489310119:-360,1509869719:-420,1520759719:-360,1541319319:-420,1552209319:-360},
"America/Campo Grande":{1237871720:-240,1255839320:-180,1266722120:-240,1287288920:-180,1298171720:-240,1318738520:-180,1330226120:-240,1350792920:-180,1361070920:-240,1382242520:-180,1392520520:-240,1413692120:-180,1424574920:-240,1445141720:-180,1456024520:-240,1476591320:-180,1487474120:-240,1508040920:-180,1518923720:-240,1540095320:-180,1550373320:-240},
"America/Cancun":{1237871721:-360,1238919321:-300,1256454921:-360,1270368921:-300,1288509321:-360,1301818521:-300,1319958921:-360,1333268121:-300,1351408521:-360,1365322521:-300,1382858121:-360,1396772121:-300,1414307721:-360,1428221721:-300,1445757321:-360,1459671321:-300,1477811721:-360,1491120921:-300,1509261321:-360,1522570521:-300,1540710921:-360},
"America/Caracas":{1237871722:-270},
"America/Cayenne":{1237871722:-180},
"America/Cayman":{1237871723:-300},
"America/Chicago":{1237871724:-300,1257059724:-360,1268554524:-300,1289114124:-360,1300004124:-300,1320563724:-360,1331453724:-300,1352013324:-360,1362903324:-300,1383462924:-360,1394352924:-300,1414912524:-360,1425802524:-300,1446362124:-360,1457856924:-300,1478416524:-360,1489306524:-300,1509866124:-360,1520756124:-300,1541315724:-360,1552205724:-300},
"America/Chihuahua":{1237871725:-420,1238922925:-360,1256458525:-420,1270372525:-360,1288512925:-420,1301822125:-360,1319962525:-420,1333271725:-360,1351412125:-420,1365326125:-360,1382861725:-420,1396775725:-360,1414311325:-420,1428225325:-360,1445760925:-420,1459674925:-360,1477815325:-420,1491124525:-360,1509264925:-420,1522574125:-360,1540714525:-420},
"America/Costa Rica":{1237871725:-360},
"America/Cuiaba":{1237871726:-240,1255839326:-180,1266722126:-240,1287288926:-180,1298171726:-240,1318738526:-180,1330226126:-240,1350792926:-180,1361070926:-240,1382242526:-180,1392520526:-240,1413692126:-180,1424574926:-240,1445141726:-180,1456024526:-240,1476591326:-180,1487474126:-240,1508040926:-180,1518923726:-240,1540095326:-180,1550373326:-240},
"America/Curacao":{1237871727:-240},
"America/Danmarkshavn":{1237871727:0},
"America/Dawson":{1237871728:-420,1257066928:-480,1268561728:-420,1289121328:-480,1300011328:-420,1320570928:-480,1331460928:-420,1352020528:-480,1362910528:-420,1383470128:-480,1394360128:-420,1414919728:-480,1425809728:-420,1446369328:-480,1457864128:-420,1478423728:-480,1489313728:-420,1509873328:-480,1520763328:-420,1541322928:-480,1552212928:-420},
"America/Dawson Creek":{1237871729:-420},
"America/Denver":{1237871730:-360,1257063330:-420,1268558130:-360,1289117730:-420,1300007730:-360,1320567330:-420,1331457330:-360,1352016930:-420,1362906930:-360,1383466530:-420,1394356530:-360,1414916130:-420,1425806130:-360,1446365730:-420,1457860530:-360,1478420130:-420,1489310130:-360,1509869730:-420,1520759730:-360,1541319330:-420,1552209330:-360},
"America/Detroit":{1237871730:-240,1257056130:-300,1268550930:-240,1289110530:-300,1300000530:-240,1320560130:-300,1331450130:-240,1352009730:-300,1362899730:-240,1383459330:-300,1394349330:-240,1414908930:-300,1425798930:-240,1446358530:-300,1457853330:-240,1478412930:-300,1489302930:-240,1509862530:-300,1520752530:-240,1541312130:-300,1552202130:-240},
"America/Dominica":{1237871731:-240},
"America/Edmonton":{1237871732:-360,1257063332:-420,1268558132:-360,1289117732:-420,1300007732:-360,1320567332:-420,1331457332:-360,1352016932:-420,1362906932:-360,1383466532:-420,1394356532:-360,1414916132:-420,1425806132:-360,1446365732:-420,1457860532:-360,1478420132:-420,1489310132:-360,1509869732:-420,1520759732:-360,1541319332:-420,1552209332:-360},
"America/Eirunepe":{1237871733:-240},
"America/El Salvador":{1237871733:-360},
"America/Fortaleza":{1237871734:-180},
"America/Glace Bay":{1237871735:-180,1257052535:-240,1268547335:-180,1289106935:-240,1299996935:-180,1320556535:-240,1331446535:-180,1352006135:-240,1362896135:-180,1383455735:-240,1394345735:-180,1414905335:-240,1425795335:-180,1446354935:-240,1457849735:-180,1478409335:-240,1489299335:-180,1509858935:-240,1520748935:-180,1541308535:-240,1552198535:-180},
"America/Godthab":{1237871736:-180,1238289336:-120,1256433336:-180,1269738936:-120,1288487736:-180,1301188536:-120,1319937336:-180,1332638136:-120,1351386936:-180,1364692536:-120,1382836536:-180,1396142136:-120,1414286136:-180,1427591736:-120,1445735736:-180,1459041336:-120,1477790136:-180,1490490936:-120,1509239736:-180,1521940536:-120,1540689336:-180},
"America/Goose Bay":{1237871736:-180,1257045336:-240,1268540136:-180,1289099736:-240,1299989736:-180,1320549336:-240,1331439336:-180,1351998936:-240,1362888936:-180,1383448536:-240,1394338536:-180,1414898136:-240,1425788136:-180,1446347736:-240,1457842536:-180,1478402136:-240,1489292136:-180,1509851736:-240,1520741736:-180,1541301336:-240,1552191336:-180},
"America/Grand Turk":{1237871737:-240,1257056137:-300,1268550937:-240,1289110537:-300,1300000537:-240,1320560137:-300,1331450137:-240,1352009737:-300,1362899737:-240,1383459337:-300,1394349337:-240,1414908937:-300,1425798937:-240,1446358537:-300,1457853337:-240,1478412937:-300,1489302937:-240,1509862537:-300,1520752537:-240,1541312137:-300,1552202137:-240},
"America/Grenada":{1237871738:-240},
"America/Guadeloupe":{1237871739:-240},
"America/Guatemala":{1237871739:-360},
"America/Guayaquil":{1237871740:-300},
"America/Guyana":{1237871741:-240},
"America/Halifax":{1237871741:-180,1257052541:-240,1268547341:-180,1289106941:-240,1299996941:-180,1320556541:-240,1331446541:-180,1352006141:-240,1362896141:-180,1383455741:-240,1394345741:-180,1414905341:-240,1425795341:-180,1446354941:-240,1457849741:-180,1478409341:-240,1489299341:-180,1509858941:-240,1520748941:-180,1541308541:-240,1552198541:-180},
"America/Havana":{1237871742:-240,1256447742:-300,1269148542:-240,1288502142:-300,1300598142:-240,1319951742:-300,1332047742:-240,1351401342:-300,1363497342:-240,1382850942:-300,1394946942:-240,1414300542:-300,1426396542:-240,1445750142:-300,1458450942:-240,1477804542:-300,1489900542:-240,1509254142:-300,1521350142:-240,1540703742:-300,1552799742:-240},
"America/Hermosillo":{1237871743:-420},
"America/Indiana/Indianapolis":{1237871744:-240,1257056144:-300,1268550944:-240,1289110544:-300,1300000544:-240,1320560144:-300,1331450144:-240,1352009744:-300,1362899744:-240,1383459344:-300,1394349344:-240,1414908944:-300,1425798944:-240,1446358544:-300,1457853344:-240,1478412944:-300,1489302944:-240,1509862544:-300,1520752544:-240,1541312144:-300,1552202144:-240},
"America/Indiana/Knox":{1237871744:-300,1257059744:-360,1268554544:-300,1289114144:-360,1300004144:-300,1320563744:-360,1331453744:-300,1352013344:-360,1362903344:-300,1383462944:-360,1394352944:-300,1414912544:-360,1425802544:-300,1446362144:-360,1457856944:-300,1478416544:-360,1489306544:-300,1509866144:-360,1520756144:-300,1541315744:-360,1552205744:-300},
"America/Indiana/Marengo":{1237871745:-240,1257056145:-300,1268550945:-240,1289110545:-300,1300000545:-240,1320560145:-300,1331450145:-240,1352009745:-300,1362899745:-240,1383459345:-300,1394349345:-240,1414908945:-300,1425798945:-240,1446358545:-300,1457853345:-240,1478412945:-300,1489302945:-240,1509862545:-300,1520752545:-240,1541312145:-300,1552202145:-240},
"America/Indiana/Petersburg":{1237871746:-240,1257056146:-300,1268550946:-240,1289110546:-300,1300000546:-240,1320560146:-300,1331450146:-240,1352009746:-300,1362899746:-240,1383459346:-300,1394349346:-240,1414908946:-300,1425798946:-240,1446358546:-300,1457853346:-240,1478412946:-300,1489302946:-240,1509862546:-300,1520752546:-240,1541312146:-300,1552202146:-240},
"America/Indiana/Tell City":{1237871747:-300,1257059747:-360,1268554547:-300,1289114147:-360,1300004147:-300,1320563747:-360,1331453747:-300,1352013347:-360,1362903347:-300,1383462947:-360,1394352947:-300,1414912547:-360,1425802547:-300,1446362147:-360,1457856947:-300,1478416547:-360,1489306547:-300,1509866147:-360,1520756147:-300,1541315747:-360,1552205747:-300},
"America/Indiana/Vevay":{1237871747:-240,1257056147:-300,1268550947:-240,1289110547:-300,1300000547:-240,1320560147:-300,1331450147:-240,1352009747:-300,1362899747:-240,1383459347:-300,1394349347:-240,1414908947:-300,1425798947:-240,1446358547:-300,1457853347:-240,1478412947:-300,1489302947:-240,1509862547:-300,1520752547:-240,1541312147:-300,1552202147:-240},
"America/Indiana/Vincennes":{1237871748:-240,1257056148:-300,1268550948:-240,1289110548:-300,1300000548:-240,1320560148:-300,1331450148:-240,1352009748:-300,1362899748:-240,1383459348:-300,1394349348:-240,1414908948:-300,1425798948:-240,1446358548:-300,1457853348:-240,1478412948:-300,1489302948:-240,1509862548:-300,1520752548:-240,1541312148:-300,1552202148:-240},
"America/Indiana/Winamac":{1237871749:-240,1257056149:-300,1268550949:-240,1289110549:-300,1300000549:-240,1320560149:-300,1331450149:-240,1352009749:-300,1362899749:-240,1383459349:-300,1394349349:-240,1414908949:-300,1425798949:-240,1446358549:-300,1457853349:-240,1478412949:-300,1489302949:-240,1509862549:-300,1520752549:-240,1541312149:-300,1552202149:-240},
"America/Inuvik":{1237871750:-360,1257063350:-420,1268558150:-360,1289117750:-420,1300007750:-360,1320567350:-420,1331457350:-360,1352016950:-420,1362906950:-360,1383466550:-420,1394356550:-360,1414916150:-420,1425806150:-360,1446365750:-420,1457860550:-360,1478420150:-420,1489310150:-360,1509869750:-420,1520759750:-360,1541319350:-420,1552209350:-360},
"America/Iqaluit":{1237871750:-240,1257056150:-300,1268550950:-240,1289110550:-300,1300000550:-240,1320560150:-300,1331450150:-240,1352009750:-300,1362899750:-240,1383459350:-300,1394349350:-240,1414908950:-300,1425798950:-240,1446358550:-300,1457853350:-240,1478412950:-300,1489302950:-240,1509862550:-300,1520752550:-240,1541312150:-300,1552202150:-240},
"America/Jamaica":{1237871751:-300},
"America/Juneau":{1237871752:-480,1257070552:-540,1268565352:-480,1289124952:-540,1300014952:-480,1320574552:-540,1331464552:-480,1352024152:-540,1362914152:-480,1383473752:-540,1394363752:-480,1414923352:-540,1425813352:-480,1446372952:-540,1457867752:-480,1478427352:-540,1489317352:-480,1509876952:-540,1520766952:-480,1541326552:-540,1552216552:-480},
"America/Kentucky/Louisville":{1237871753:-240,1257056153:-300,1268550953:-240,1289110553:-300,1300000553:-240,1320560153:-300,1331450153:-240,1352009753:-300,1362899753:-240,1383459353:-300,1394349353:-240,1414908953:-300,1425798953:-240,1446358553:-300,1457853353:-240,1478412953:-300,1489302953:-240,1509862553:-300,1520752553:-240,1541312153:-300,1552202153:-240},
"America/Kentucky/Monticello":{1237871753:-240,1257056153:-300,1268550953:-240,1289110553:-300,1300000553:-240,1320560153:-300,1331450153:-240,1352009753:-300,1362899753:-240,1383459353:-300,1394349353:-240,1414908953:-300,1425798953:-240,1446358553:-300,1457853353:-240,1478412953:-300,1489302953:-240,1509862553:-300,1520752553:-240,1541312153:-300,1552202153:-240},
"America/La Paz":{1237871754:-240},
"America/Lima":{1237871755:-300},
"America/Los Angeles":{1237871756:-420,1257066956:-480,1268561756:-420,1289121356:-480,1300011356:-420,1320570956:-480,1331460956:-420,1352020556:-480,1362910556:-420,1383470156:-480,1394360156:-420,1414919756:-480,1425809756:-420,1446369356:-480,1457864156:-420,1478423756:-480,1489313756:-420,1509873356:-480,1520763356:-420,1541322956:-480,1552212956:-420},
"America/Maceio":{1237871756:-180},
"America/Managua":{1237871757:-360},
"America/Manaus":{1237871758:-240},
"America/Martinique":{1237871759:-240},
"America/Mazatlan":{1237871759:-420,1238922959:-360,1256458559:-420,1270372559:-360,1288512959:-420,1301822159:-360,1319962559:-420,1333271759:-360,1351412159:-420,1365326159:-360,1382861759:-420,1396775759:-360,1414311359:-420,1428225359:-360,1445760959:-420,1459674959:-360,1477815359:-420,1491124559:-360,1509264959:-420,1522574159:-360,1540714559:-420},
"America/Menominee":{1237871760:-300,1257059760:-360,1268554560:-300,1289114160:-360,1300004160:-300,1320563760:-360,1331453760:-300,1352013360:-360,1362903360:-300,1383462960:-360,1394352960:-300,1414912560:-360,1425802560:-300,1446362160:-360,1457856960:-300,1478416560:-360,1489306560:-300,1509866160:-360,1520756160:-300,1541315760:-360,1552205760:-300},
"America/Merida":{1237871761:-360,1238919361:-300,1256454961:-360,1270368961:-300,1288509361:-360,1301818561:-300,1319958961:-360,1333268161:-300,1351408561:-360,1365322561:-300,1382858161:-360,1396772161:-300,1414307761:-360,1428221761:-300,1445757361:-360,1459671361:-300,1477811761:-360,1491120961:-300,1509261361:-360,1522570561:-300,1540710961:-360},
"America/Mexico City":{1237871762:-360,1238919362:-300,1256454962:-360,1270368962:-300,1288509362:-360,1301818562:-300,1319958962:-360,1333268162:-300,1351408562:-360,1365322562:-300,1382858162:-360,1396772162:-300,1414307762:-360,1428221762:-300,1445757362:-360,1459671362:-300,1477811762:-360,1491120962:-300,1509261362:-360,1522570562:-300,1540710962:-360},
"America/Miquelon":{1237871762:-120,1257048962:-180,1268543762:-120,1289103362:-180,1299993362:-120,1320552962:-180,1331442962:-120,1352002562:-180,1362892562:-120,1383452162:-180,1394342162:-120,1414901762:-180,1425791762:-120,1446351362:-180,1457846162:-120,1478405762:-180,1489295762:-120,1509855362:-180,1520745362:-120,1541304962:-180,1552194962:-120},
"America/Moncton":{1237871763:-180,1257052563:-240,1268547363:-180,1289106963:-240,1299996963:-180,1320556563:-240,1331446563:-180,1352006163:-240,1362896163:-180,1383455763:-240,1394345763:-180,1414905363:-240,1425795363:-180,1446354963:-240,1457849763:-180,1478409363:-240,1489299363:-180,1509858963:-240,1520748963:-180,1541308563:-240,1552198563:-180},
"America/Monterrey":{1237871764:-360,1238919364:-300,1256454964:-360,1270368964:-300,1288509364:-360,1301818564:-300,1319958964:-360,1333268164:-300,1351408564:-360,1365322564:-300,1382858164:-360,1396772164:-300,1414307764:-360,1428221764:-300,1445757364:-360,1459671364:-300,1477811764:-360,1491120964:-300,1509261364:-360,1522570564:-300,1540710964:-360},
"America/Montevideo":{1237871765:-180,1254633365:-120,1268540165:-180,1286082965:-120,1299989765:-180,1317532565:-120,1331439365:-180,1349586965:-120,1362888965:-180,1381036565:-120,1394338565:-180,1412486165:-120,1425788165:-180,1443935765:-120,1457842565:-180,1475385365:-120,1489292165:-180,1506834965:-120,1520741765:-180,1538889365:-120,1552191365:-180},
"America/Montreal":{1237871765:-240,1257056165:-300,1268550965:-240,1289110565:-300,1300000565:-240,1320560165:-300,1331450165:-240,1352009765:-300,1362899765:-240,1383459365:-300,1394349365:-240,1414908965:-300,1425798965:-240,1446358565:-300,1457853365:-240,1478412965:-300,1489302965:-240,1509862565:-300,1520752565:-240,1541312165:-300,1552202165:-240},
"America/Montserrat":{1237871766:-240},
"America/Nassau":{1237871767:-240,1257056167:-300,1268550967:-240,1289110567:-300,1300000567:-240,1320560167:-300,1331450167:-240,1352009767:-300,1362899767:-240,1383459367:-300,1394349367:-240,1414908967:-300,1425798967:-240,1446358567:-300,1457853367:-240,1478412967:-300,1489302967:-240,1509862567:-300,1520752567:-240,1541312167:-300,1552202167:-240},
"America/New York":{1237871768:-240,1257056168:-300,1268550968:-240,1289110568:-300,1300000568:-240,1320560168:-300,1331450168:-240,1352009768:-300,1362899768:-240,1383459368:-300,1394349368:-240,1414908968:-300,1425798968:-240,1446358568:-300,1457853368:-240,1478412968:-300,1489302968:-240,1509862568:-300,1520752568:-240,1541312168:-300,1552202168:-240},
"America/Nipigon":{1237871768:-240,1257056168:-300,1268550968:-240,1289110568:-300,1300000568:-240,1320560168:-300,1331450168:-240,1352009768:-300,1362899768:-240,1383459368:-300,1394349368:-240,1414908968:-300,1425798968:-240,1446358568:-300,1457853368:-240,1478412968:-300,1489302968:-240,1509862568:-300,1520752568:-240,1541312168:-300,1552202168:-240},
"America/Nome":{1237871769:-480,1257070569:-540,1268565369:-480,1289124969:-540,1300014969:-480,1320574569:-540,1331464569:-480,1352024169:-540,1362914169:-480,1383473769:-540,1394363769:-480,1414923369:-540,1425813369:-480,1446372969:-540,1457867769:-480,1478427369:-540,1489317369:-480,1509876969:-540,1520766969:-480,1541326569:-540,1552216569:-480},
"America/Noronha":{1237871770:-120},
"America/North Dakota/Center":{1237871771:-300,1257059771:-360,1268554571:-300,1289114171:-360,1300004171:-300,1320563771:-360,1331453771:-300,1352013371:-360,1362903371:-300,1383462971:-360,1394352971:-300,1414912571:-360,1425802571:-300,1446362171:-360,1457856971:-300,1478416571:-360,1489306571:-300,1509866171:-360,1520756171:-300,1541315771:-360,1552205771:-300},
"America/North Dakota/New Salem":{1237871771:-300,1257059771:-360,1268554571:-300,1289114171:-360,1300004171:-300,1320563771:-360,1331453771:-300,1352013371:-360,1362903371:-300,1383462971:-360,1394352971:-300,1414912571:-360,1425802571:-300,1446362171:-360,1457856971:-300,1478416571:-360,1489306571:-300,1509866171:-360,1520756171:-300,1541315771:-360,1552205771:-300},
"America/Panama":{1237871772:-300},
"America/Pangnirtung":{1237871773:-240,1257056173:-300,1268550973:-240,1289110573:-300,1300000573:-240,1320560173:-300,1331450173:-240,1352009773:-300,1362899773:-240,1383459373:-300,1394349373:-240,1414908973:-300,1425798973:-240,1446358573:-300,1457853373:-240,1478412973:-300,1489302973:-240,1509862573:-300,1520752573:-240,1541312173:-300,1552202173:-240},
"America/Paramaribo":{1237871774:-180},
"America/Phoenix":{1237871774:-420},
"America/Port of Spain":{1237871775:-240},
"America/Port-au-Prince":{1237871776:-300},
"America/Porto Velho":{1237871776:-240},
"America/Puerto Rico":{1237871777:-240},
"America/Rainy River":{1237871778:-300,1257059778:-360,1268554578:-300,1289114178:-360,1300004178:-300,1320563778:-360,1331453778:-300,1352013378:-360,1362903378:-300,1383462978:-360,1394352978:-300,1414912578:-360,1425802578:-300,1446362178:-360,1457856978:-300,1478416578:-360,1489306578:-300,1509866178:-360,1520756178:-300,1541315778:-360,1552205778:-300},
"America/Rankin Inlet":{1237871779:-300,1257059779:-360,1268554579:-300,1289114179:-360,1300004179:-300,1320563779:-360,1331453779:-300,1352013379:-360,1362903379:-300,1383462979:-360,1394352979:-300,1414912579:-360,1425802579:-300,1446362179:-360,1457856979:-300,1478416579:-360,1489306579:-300,1509866179:-360,1520756179:-300,1541315779:-360,1552205779:-300},
"America/Recife":{1237871779:-180},
"America/Regina":{1237871780:-360},
"America/Resolute":{1237871781:-300},
"America/Rio Branco":{1237871782:-240},
"America/Santarem":{1237871782:-180},
"America/Santiago":{1237871783:-240,1255234583:-180,1268536583:-240,1286684183:-180,1299986183:-240,1318133783:-180,1331435783:-240,1350188183:-180,1362885383:-240,1381637783:-180,1394334983:-240,1413087383:-180,1426389383:-240,1444536983:-180,1457838983:-240,1475986583:-180,1489288583:-240,1508040983:-180,1520738183:-240,1539490583:-180,1552187783:-240},
"America/Santo Domingo":{1237871784:-240},
"America/Sao Paulo":{1237871785:-180,1255835785:-120,1266718585:-180,1287285385:-120,1298168185:-180,1318734985:-120,1330222585:-180,1350789385:-120,1361067385:-180,1382238985:-120,1392516985:-180,1413688585:-120,1424571385:-180,1445138185:-120,1456020985:-180,1476587785:-120,1487470585:-180,1508037385:-120,1518920185:-180,1540091785:-120,1550369785:-180},
"America/Scoresbysund":{1237871785:-60,1238289385:0,1256433385:-60,1269738985:0,1288487785:-60,1301188585:0,1319937385:-60,1332638185:0,1351386985:-60,1364692585:0,1382836585:-60,1396142185:0,1414286185:-60,1427591785:0,1445735785:-60,1459041385:0,1477790185:-60,1490490985:0,1509239785:-60,1521940585:0,1540689385:-60},
"America/St Johns":{1237871786:-150,1257045386:-210,1268540186:-150,1289099786:-210,1299989786:-150,1320549386:-210,1331439386:-150,1351998986:-210,1362888986:-150,1383448586:-210,1394338586:-150,1414898186:-210,1425788186:-150,1446347786:-210,1457842586:-150,1478402186:-210,1489292186:-150,1509851786:-210,1520741786:-150,1541301386:-210,1552191386:-150},
"America/St Kitts":{1237871787:-240},
"America/St Lucia":{1237871788:-240},
"America/St Thomas":{1237871788:-240},
"America/St Vincent":{1237871789:-240},
"America/Swift Current":{1237871790:-360},
"America/Tegucigalpa":{1237871790:-360},
"America/Thule":{1237871791:-180,1257052591:-240,1268547391:-180,1289106991:-240,1299996991:-180,1320556591:-240,1331446591:-180,1352006191:-240,1362896191:-180,1383455791:-240,1394345791:-180,1414905391:-240,1425795391:-180,1446354991:-240,1457849791:-180,1478409391:-240,1489299391:-180,1509858991:-240,1520748991:-180,1541308591:-240,1552198591:-180},
"America/Thunder Bay":{1237871792:-240,1257056192:-300,1268550992:-240,1289110592:-300,1300000592:-240,1320560192:-300,1331450192:-240,1352009792:-300,1362899792:-240,1383459392:-300,1394349392:-240,1414908992:-300,1425798992:-240,1446358592:-300,1457853392:-240,1478412992:-300,1489302992:-240,1509862592:-300,1520752592:-240,1541312192:-300,1552202192:-240},
"America/Tijuana":{1237871793:-480,1238926593:-420,1256462193:-480,1270376193:-420,1288516593:-480,1301825793:-420,1319966193:-480,1333275393:-420,1351415793:-480,1365329793:-420,1382865393:-480,1396779393:-420,1414314993:-480,1428228993:-420,1445764593:-480,1459678593:-420,1477818993:-480,1491128193:-420,1509268593:-480,1522577793:-420,1540718193:-480},
"America/Toronto":{1237871793:-240,1257056193:-300,1268550993:-240,1289110593:-300,1300000593:-240,1320560193:-300,1331450193:-240,1352009793:-300,1362899793:-240,1383459393:-300,1394349393:-240,1414908993:-300,1425798993:-240,1446358593:-300,1457853393:-240,1478412993:-300,1489302993:-240,1509862593:-300,1520752593:-240,1541312193:-300,1552202193:-240},
"America/Tortola":{1237871794:-240},
"America/Vancouver":{1237871795:-420,1257066995:-480,1268561795:-420,1289121395:-480,1300011395:-420,1320570995:-480,1331460995:-420,1352020595:-480,1362910595:-420,1383470195:-480,1394360195:-420,1414919795:-480,1425809795:-420,1446369395:-480,1457864195:-420,1478423795:-480,1489313795:-420,1509873395:-480,1520763395:-420,1541322995:-480,1552212995:-420},
"America/Whitehorse":{1237871796:-420,1257066996:-480,1268561796:-420,1289121396:-480,1300011396:-420,1320570996:-480,1331460996:-420,1352020596:-480,1362910596:-420,1383470196:-480,1394360196:-420,1414919796:-480,1425809796:-420,1446369396:-480,1457864196:-420,1478423796:-480,1489313796:-420,1509873396:-480,1520763396:-420,1541322996:-480,1552212996:-420},
"America/Winnipeg":{1237871796:-300,1257059796:-360,1268554596:-300,1289114196:-360,1300004196:-300,1320563796:-360,1331453796:-300,1352013396:-360,1362903396:-300,1383462996:-360,1394352996:-300,1414912596:-360,1425802596:-300,1446362196:-360,1457856996:-300,1478416596:-360,1489306596:-300,1509866196:-360,1520756196:-300,1541315796:-360,1552205796:-300},
"America/Yakutat":{1237871797:-480,1257070597:-540,1268565397:-480,1289124997:-540,1300014997:-480,1320574597:-540,1331464597:-480,1352024197:-540,1362914197:-480,1383473797:-540,1394363797:-480,1414923397:-540,1425813397:-480,1446372997:-540,1457867797:-480,1478427397:-540,1489317397:-480,1509876997:-540,1520766997:-480,1541326597:-540,1552216597:-480},
"America/Yellowknife":{1237871798:-360,1257063398:-420,1268558198:-360,1289117798:-420,1300007798:-360,1320567398:-420,1331457398:-360,1352016998:-420,1362906998:-360,1383466598:-420,1394356598:-360,1414916198:-420,1425806198:-360,1446365798:-420,1457860598:-360,1478420198:-420,1489310198:-360,1509869798:-420,1520759798:-360,1541319398:-420,1552209398:-360},
"Antarctica/Casey":{1237871799:480},
"Antarctica/Davis":{1237871799:420},
"Antarctica/DumontDUrville":{1237871800:600},
"Antarctica/Mawson":{1237871801:360},
"Antarctica/McMurdo":{1237871802:780,1238854602:720,1253974602:780,1270304202:720,1285424202:780,1301753802:720,1316873802:780,1333203402:720,1348928202:780,1365257802:720,1380377802:780,1396707402:720,1411827402:780,1428157002:720,1443277002:780,1459606602:720,1474726602:780,1491056202:720,1506176202:780,1522505802:720,1538230602:780},
"Antarctica/Palmer":{1237871802:-240,1255234602:-180,1268536602:-240,1286684202:-180,1299986202:-240,1318133802:-180,1331435802:-240,1350188202:-180,1362885402:-240,1381637802:-180,1394335002:-240,1413087402:-180,1426389402:-240,1444537002:-180,1457839002:-240,1475986602:-180,1489288602:-240,1508041002:-180,1520738202:-240,1539490602:-180,1552187802:-240},
"Antarctica/Rothera":{1237871803:-180},
"Antarctica/Syowa":{1237871804:180},
"Antarctica/Vostok":{1237871805:360},
"Asia/Aden":{1237871805:180},
"Asia/Almaty":{1237871806:360},
"Asia/Amman":{1237871807:120,1238019407:180,1256854607:120,1269469007:180,1288304207:120,1301523407:180,1319753807:120,1332973007:180,1351203407:120,1364422607:180,1382653007:120,1395872207:180,1414707407:120,1427321807:180,1446157007:120,1459376207:180,1477606607:120,1490825807:180,1509056207:120,1522275407:180,1540505807:120},
"Asia/Anadyr":{1237871807:720,1238249807:780,1256393807:720,1269699407:780,1288448207:720,1301149007:780,1319897807:720,1332598607:780,1351347407:720,1364653007:780,1382797007:720,1396102607:780,1414246607:720,1427552207:780,1445696207:720,1459001807:780,1477750607:720,1490451407:780,1509200207:720,1521901007:780,1540649807:720},
"Asia/Aqtau":{1237871808:300},
"Asia/Aqtobe":{1237871809:300},
"Asia/Ashgabat":{1237871810:300},
"Asia/Baghdad":{1237871810:180},
"Asia/Bahrain":{1237871811:180},
"Asia/Baku":{1237871812:240,1238285812:300,1256429812:240,1269735412:300,1288484212:240,1301185012:300,1319933812:240,1332634612:300,1351383412:240,1364689012:300,1382833012:240,1396138612:300,1414282612:240,1427588212:300,1445732212:240,1459037812:300,1477786612:240,1490487412:300,1509236212:240,1521937012:300,1540685812:240},
"Asia/Bangkok":{1237871813:420},
"Asia/Beirut":{1237871813:120,1238278613:180,1256419013:120,1269728213:180,1288473413:120,1301177813:180,1319923013:120,1332627413:180,1351372613:120,1364681813:180,1382822213:120,1396131413:180,1414271813:120,1427581013:180,1445721413:120,1459030613:180,1477775813:120,1490480213:180,1509225413:120,1521929813:180,1540675013:120},
"Asia/Bishkek":{1237871814:360},
"Asia/Brunei":{1237871815:480},
"Asia/Choibalsan":{1237871815:480},
"Asia/Chongqing":{1237871816:480},
"Asia/Colombo":{1237871817:330},
"Asia/Damascus":{1237871818:120,1238710618:180,1257023818:120,1270160218:180,1288559818:120,1301609818:180,1320095818:120,1333664218:180,1351718218:120,1365113818:180,1383254218:120,1396563418:180,1414790218:120,1428013018:180,1446326218:120,1459462618:180,1477948618:120,1491517018:180,1509484618:120,1522966618:180,1541020618:120},
"Asia/Dhaka":{1237871818:360},
"Asia/Dili":{1237871819:540},
"Asia/Dubai":{1237871820:240},
"Asia/Dushanbe":{1237871821:300},
"Asia/Gaza":{1237871821:120,1238537821:180,1251328621:120,1270073821:180,1282778221:120,1301609821:180,1314227821:120,1333232221:180,1346282221:120,1364768221:180,1377731821:120,1396304221:180,1409181421:120,1427840221:180,1440631021:120,1459462621:180,1472080621:120,1490998621:180,1504135021:120,1522534621:180,1535584621:120},
"Asia/Harbin":{1237871822:480},
"Asia/Ho Chi Minh":{1237871823:420},
"Asia/Hong Kong":{1237871823:480},
"Asia/Hovd":{1237871824:420},
"Asia/Irkutsk":{1237871825:480,1238264225:540,1256408225:480,1269713825:540,1288462625:480,1301163425:540,1319912225:480,1332613025:540,1351361825:480,1364667425:540,1382811425:480,1396117025:540,1414261025:480,1427566625:540,1445710625:480,1459016225:540,1477765025:480,1490465825:540,1509214625:480,1521915425:540,1540664225:480},
"Asia/Jakarta":{1237871826:420},
"Asia/Jayapura":{1237871826:540},
"Asia/Jerusalem":{1237871827:120,1238113027:180,1254007027:120,1269562627:180,1284247027:120,1301617027:180,1317511027:120,1333066627:180,1348355827:120,1364516227:180,1378595827:120,1395965827:180,1411859827:120,1427415427:180,1442704627:120,1459469827:180,1475968627:120,1490919427:180,1506208627:120,1522369027:180,1537053427:120},
"Asia/Kabul":{1237871828:270},
"Asia/Kamchatka":{1237871829:720,1238249829:780,1256393829:720,1269699429:780,1288448229:720,1301149029:780,1319897829:720,1332598629:780,1351347429:720,1364653029:780,1382797029:720,1396102629:780,1414246629:720,1427552229:780,1445696229:720,1459001829:780,1477750629:720,1490451429:780,1509200229:720,1521901029:780,1540649829:720},
"Asia/Karachi":{1237871829:300},
"Asia/Kashgar":{1237871830:480},
"Asia/Kathmandu":{1237871831:345},
"Asia/Kolkata":{1237871832:330},
"Asia/Krasnoyarsk":{1237871832:420,1238267832:480,1256411832:420,1269717432:480,1288466232:420,1301167032:480,1319915832:420,1332616632:480,1351365432:420,1364671032:480,1382815032:420,1396120632:480,1414264632:420,1427570232:480,1445714232:420,1459019832:480,1477768632:420,1490469432:480,1509218232:420,1521919032:480,1540667832:420},
"Asia/Kuala Lumpur":{1237871833:480},
"Asia/Kuching":{1237871834:480},
"Asia/Kuwait":{1237871834:180},
"Asia/Macau":{1237871835:480},
"Asia/Magadan":{1237871836:660,1238253436:720,1256397436:660,1269703036:720,1288451836:660,1301152636:720,1319901436:660,1332602236:720,1351351036:660,1364656636:720,1382800636:660,1396106236:720,1414250236:660,1427555836:720,1445699836:660,1459005436:720,1477754236:660,1490455036:720,1509203836:660,1521904636:720,1540653436:660},
"Asia/Makassar":{1237871837:480},
"Asia/Manila":{1237871837:480},
"Asia/Muscat":{1237871838:240},
"Asia/New Delhi":{1237871839:330},
"Asia/Nicosia":{1237871840:120,1238289440:180,1256433440:120,1269739040:180,1288487840:120,1301188640:180,1319937440:120,1332638240:180,1351387040:120,1364692640:180,1382836640:120,1396142240:180,1414286240:120,1427591840:180,1445735840:120,1459041440:180,1477790240:120,1490491040:180,1509239840:120,1521940640:180,1540689440:120},
"Asia/Novosibirsk":{1237871840:360,1238271440:420,1256415440:360,1269721040:420,1288469840:360,1301170640:420,1319919440:360,1332620240:420,1351369040:360,1364674640:420,1382818640:360,1396124240:420,1414268240:360,1427573840:420,1445717840:360,1459023440:420,1477772240:360,1490473040:420,1509221840:360,1521922640:420,1540671440:360},
"Asia/Omsk":{1237871841:360,1238271441:420,1256415441:360,1269721041:420,1288469841:360,1301170641:420,1319919441:360,1332620241:420,1351369041:360,1364674641:420,1382818641:360,1396124241:420,1414268241:360,1427573841:420,1445717841:360,1459023441:420,1477772241:360,1490473041:420,1509221841:360,1521922641:420,1540671441:360},
"Asia/Oral":{1237871842:300},
"Asia/Phnom Penh":{1237871843:420},
"Asia/Pontianak":{1237871843:420},
"Asia/Pyongyang":{1237871844:540},
"Asia/Qatar":{1237871845:180},
"Asia/Qyzylorda":{1237871845:360},
"Asia/Rangoon":{1237871846:390},
"Asia/Riyadh":{1237871847:180},
"Asia/Sakhalin":{1237871848:600,1238257048:660,1256401048:600,1269706648:660,1288455448:600,1301156248:660,1319905048:600,1332605848:660,1351354648:600,1364660248:660,1382804248:600,1396109848:660,1414253848:600,1427559448:660,1445703448:600,1459009048:660,1477757848:600,1490458648:660,1509207448:600,1521908248:660,1540657048:600},
"Asia/Samarkand":{1237871848:300},
"Asia/Seoul":{1237871849:540},
"Asia/Shanghai":{1237871850:480},
"Asia/Singapore":{1237871850:480},
"Asia/Taipei":{1237871851:480},
"Asia/Tashkent":{1237871852:300},
"Asia/Tbilisi":{1237871853:240},
"Asia/Tehran":{1237871853:270,1253564253:210,1269206253:270,1285100253:210,1300742253:270,1316636253:210,1332278253:270,1348172253:210,1363900653:270,1379794653:210,1395436653:270,1411330653:210,1426972653:270,1442866653:210,1458508653:270,1474402653:210,1490131053:270,1506025053:210,1521667053:270,1537561053:210,1553203053:270},
"Asia/Thimphu":{1237871854:360},
"Asia/Tokyo":{1237871855:540},
"Asia/Ulaanbaatar":{1237871856:480},
"Asia/Urumqi":{1237871856:480},
"Asia/Vientiane":{1237871857:420},
"Asia/Vladivostok":{1237871858:600,1238257058:660,1256401058:600,1269706658:660,1288455458:600,1301156258:660,1319905058:600,1332605858:660,1351354658:600,1364660258:660,1382804258:600,1396109858:660,1414253858:600,1427559458:660,1445703458:600,1459009058:660,1477757858:600,1490458658:660,1509207458:600,1521908258:660,1540657058:600},
"Asia/Yakutsk":{1237871859:540,1238260659:600,1256404659:540,1269710259:600,1288459059:540,1301159859:600,1319908659:540,1332609459:600,1351358259:540,1364663859:600,1382807859:540,1396113459:600,1414257459:540,1427563059:600,1445707059:540,1459012659:600,1477761459:540,1490462259:600,1509211059:540,1521911859:600,1540660659:540},
"Asia/Yekaterinburg":{1237871859:300,1238275059:360,1256419059:300,1269724659:360,1288473459:300,1301174259:360,1319923059:300,1332623859:360,1351372659:300,1364678259:360,1382822259:300,1396127859:360,1414271859:300,1427577459:360,1445721459:300,1459027059:360,1477775859:300,1490476659:360,1509225459:300,1521926259:360,1540675059:300},
"Asia/Yerevan":{1237871860:240,1238278660:300,1256422660:240,1269728260:300,1288477060:240,1301177860:300,1319926660:240,1332627460:300,1351376260:240,1364681860:300,1382825860:240,1396131460:300,1414275460:240,1427581060:300,1445725060:240,1459030660:300,1477779460:240,1490480260:300,1509229060:240,1521929860:300,1540678660:240},
"Atlantic/Azores":{1237871861:-60,1238289461:0,1256433461:-60,1269739061:0,1288487861:-60,1301188661:0,1319937461:-60,1332638261:0,1351387061:-60,1364692661:0,1382836661:-60,1396142261:0,1414286261:-60,1427591861:0,1445735861:-60,1459041461:0,1477790261:-60,1490491061:0,1509239861:-60,1521940661:0,1540689461:-60},
"Atlantic/Bermuda":{1237871862:-180,1257052662:-240,1268547462:-180,1289107062:-240,1299997062:-180,1320556662:-240,1331446662:-180,1352006262:-240,1362896262:-180,1383455862:-240,1394345862:-180,1414905462:-240,1425795462:-180,1446355062:-240,1457849862:-180,1478409462:-240,1489299462:-180,1509859062:-240,1520749062:-180,1541308662:-240,1552198662:-180},
"Atlantic/Canary":{1237871862:0,1238289462:60,1256433462:0,1269739062:60,1288487862:0,1301188662:60,1319937462:0,1332638262:60,1351387062:0,1364692662:60,1382836662:0,1396142262:60,1414286262:0,1427591862:60,1445735862:0,1459041462:60,1477790262:0,1490491062:60,1509239862:0,1521940662:60,1540689462:0},
"Atlantic/Cape Verde":{1237871863:-60},
"Atlantic/Faroe":{1237871864:0,1238289464:60,1256433464:0,1269739064:60,1288487864:0,1301188664:60,1319937464:0,1332638264:60,1351387064:0,1364692664:60,1382836664:0,1396142264:60,1414286264:0,1427591864:60,1445735864:0,1459041464:60,1477790264:0,1490491064:60,1509239864:0,1521940664:60,1540689464:0},
"Atlantic/Madeira":{1237871865:0,1238289465:60,1256433465:0,1269739065:60,1288487865:0,1301188665:60,1319937465:0,1332638265:60,1351387065:0,1364692665:60,1382836665:0,1396142265:60,1414286265:0,1427591865:60,1445735865:0,1459041465:60,1477790265:0,1490491065:60,1509239865:0,1521940665:60,1540689465:0},
"Atlantic/Reykjavik":{1237871865:0},
"Atlantic/South Georgia":{1237871866:-120},
"Atlantic/St Helena":{1237871866:0},
"Atlantic/Stanley":{1237871867:-180,1240118267:-240,1252217867:-180,1271567867:-240,1283667467:-180,1303017467:-240,1315117067:-180,1334467067:-240,1346566667:-180,1366521467:-240,1378016267:-180,1397971067:-240,1410070667:-180,1429420667:-240,1441520267:-180,1460870267:-240,1472969867:-180,1492319867:-240,1504419467:-180,1523769467:-240,1535869067:-180},
"Australia/Adelaide":{1237871868:630,1238865468:570,1254590268:630,1270315068:570,1286039868:630,1301764668:570,1317489468:630,1333214268:570,1349543868:630,1365268668:570,1380993468:630,1396718268:570,1412443068:630,1428167868:570,1443892668:630,1459617468:570,1475342268:630,1491067068:570,1506791868:630,1522516668:570,1538846268:630},
"Australia/Brisbane":{1237871869:600},
"Australia/Broken Hill":{1237871869:630,1238865469:570,1254590269:630,1270315069:570,1286039869:630,1301764669:570,1317489469:630,1333214269:570,1349543869:630,1365268669:570,1380993469:630,1396718269:570,1412443069:630,1428167869:570,1443892669:630,1459617469:570,1475342269:630,1491067069:570,1506791869:630,1522516669:570,1538846269:630},
"Australia/Currie":{1237871870:660,1238861870:600,1254586670:660,1270311470:600,1286036270:660,1301761070:600,1317485870:660,1333210670:600,1349540270:660,1365265070:600,1380989870:660,1396714670:600,1412439470:660,1428164270:600,1443889070:660,1459613870:600,1475338670:660,1491063470:600,1506788270:660,1522513070:600,1538842670:660},
"Australia/Darwin":{1237871871:570},
"Australia/Eucla":{1237871872:585,1238260672:525},
"Australia/Hobart":{1237871872:660,1238861872:600,1254586672:660,1270311472:600,1286036272:660,1301761072:600,1317485872:660,1333210672:600,1349540272:660,1365265072:600,1380989872:660,1396714672:600,1412439472:660,1428164272:600,1443889072:660,1459613872:600,1475338672:660,1491063472:600,1506788272:660,1522513072:600,1538842672:660},
"Australia/Lindeman":{1237871873:600},
"Australia/Lord Howe":{1237871874:660,1238858274:630,1254586674:660,1270307874:630,1286036274:660,1301757474:630,1317485874:660,1333207074:630,1349540274:660,1365261474:630,1380989874:660,1396711074:630,1412439474:660,1428160674:630,1443889074:660,1459610274:630,1475338674:660,1491059874:630,1506788274:660,1522509474:630,1538842674:660},
"Australia/Melbourne":{1237871875:660,1238861875:600,1254586675:660,1270311475:600,1286036275:660,1301761075:600,1317485875:660,1333210675:600,1349540275:660,1365265075:600,1380989875:660,1396714675:600,1412439475:660,1428164275:600,1443889075:660,1459613875:600,1475338675:660,1491063475:600,1506788275:660,1522513075:600,1538842675:660},
"Australia/Perth":{1237871875:540,1238264275:480},
"Australia/Sydney":{1237871876:660,1238861876:600,1254586676:660,1270311476:600,1286036276:660,1301761076:600,1317485876:660,1333210676:600,1349540276:660,1365265076:600,1380989876:660,1396714676:600,1412439476:660,1428164276:600,1443889076:660,1459613876:600,1475338676:660,1491063476:600,1506788276:660,1522513076:600,1538842676:660},
"Europe/Amsterdam":{1237871877:60,1238289477:120,1256433477:60,1269739077:120,1288487877:60,1301188677:120,1319937477:60,1332638277:120,1351387077:60,1364692677:120,1382836677:60,1396142277:120,1414286277:60,1427591877:120,1445735877:60,1459041477:120,1477790277:60,1490491077:120,1509239877:60,1521940677:120,1540689477:60},
"Europe/Andorra":{1237871878:60,1238289478:120,1256433478:60,1269739078:120,1288487878:60,1301188678:120,1319937478:60,1332638278:120,1351387078:60,1364692678:120,1382836678:60,1396142278:120,1414286278:60,1427591878:120,1445735878:60,1459041478:120,1477790278:60,1490491078:120,1509239878:60,1521940678:120,1540689478:60},
"Europe/Athens":{1237871878:120,1238289478:180,1256433478:120,1269739078:180,1288487878:120,1301188678:180,1319937478:120,1332638278:180,1351387078:120,1364692678:180,1382836678:120,1396142278:180,1414286278:120,1427591878:180,1445735878:120,1459041478:180,1477790278:120,1490491078:180,1509239878:120,1521940678:180,1540689478:120},
"Europe/Belgrade":{1237871879:60,1238289479:120,1256433479:60,1269739079:120,1288487879:60,1301188679:120,1319937479:60,1332638279:120,1351387079:60,1364692679:120,1382836679:60,1396142279:120,1414286279:60,1427591879:120,1445735879:60,1459041479:120,1477790279:60,1490491079:120,1509239879:60,1521940679:120,1540689479:60},
"Europe/Berlin":{1237871880:60,1238289480:120,1256433480:60,1269739080:120,1288487880:60,1301188680:120,1319937480:60,1332638280:120,1351387080:60,1364692680:120,1382836680:60,1396142280:120,1414286280:60,1427591880:120,1445735880:60,1459041480:120,1477790280:60,1490491080:120,1509239880:60,1521940680:120,1540689480:60},
"Europe/Brussels":{1237871881:60,1238289481:120,1256433481:60,1269739081:120,1288487881:60,1301188681:120,1319937481:60,1332638281:120,1351387081:60,1364692681:120,1382836681:60,1396142281:120,1414286281:60,1427591881:120,1445735881:60,1459041481:120,1477790281:60,1490491081:120,1509239881:60,1521940681:120,1540689481:60},
"Europe/Bucharest":{1237871881:120,1238289481:180,1256433481:120,1269739081:180,1288487881:120,1301188681:180,1319937481:120,1332638281:180,1351387081:120,1364692681:180,1382836681:120,1396142281:180,1414286281:120,1427591881:180,1445735881:120,1459041481:180,1477790281:120,1490491081:180,1509239881:120,1521940681:180,1540689481:120},
"Europe/Budapest":{1237871882:60,1238289482:120,1256433482:60,1269739082:120,1288487882:60,1301188682:120,1319937482:60,1332638282:120,1351387082:60,1364692682:120,1382836682:60,1396142282:120,1414286282:60,1427591882:120,1445735882:60,1459041482:120,1477790282:60,1490491082:120,1509239882:60,1521940682:120,1540689482:60},
"Europe/Chisinau":{1237871883:120,1238289483:180,1256433483:120,1269739083:180,1288487883:120,1301188683:180,1319937483:120,1332638283:180,1351387083:120,1364692683:180,1382836683:120,1396142283:180,1414286283:120,1427591883:180,1445735883:120,1459041483:180,1477790283:120,1490491083:180,1509239883:120,1521940683:180,1540689483:120},
"Europe/Copenhagen":{1237871884:60,1238289484:120,1256433484:60,1269739084:120,1288487884:60,1301188684:120,1319937484:60,1332638284:120,1351387084:60,1364692684:120,1382836684:60,1396142284:120,1414286284:60,1427591884:120,1445735884:60,1459041484:120,1477790284:60,1490491084:120,1509239884:60,1521940684:120,1540689484:60},
"Europe/Dublin":{1237871884:0,1238289484:60,1256433484:0,1269739084:60,1288487884:0,1301188684:60,1319937484:0,1332638284:60,1351387084:0,1364692684:60,1382836684:0,1396142284:60,1414286284:0,1427591884:60,1445735884:0,1459041484:60,1477790284:0,1490491084:60,1509239884:0,1521940684:60,1540689484:0},
"Europe/Gibraltar":{1237871885:60,1238289485:120,1256433485:60,1269739085:120,1288487885:60,1301188685:120,1319937485:60,1332638285:120,1351387085:60,1364692685:120,1382836685:60,1396142285:120,1414286285:60,1427591885:120,1445735885:60,1459041485:120,1477790285:60,1490491085:120,1509239885:60,1521940685:120,1540689485:60},
"Europe/Helsinki":{1237871886:120,1238289486:180,1256433486:120,1269739086:180,1288487886:120,1301188686:180,1319937486:120,1332638286:180,1351387086:120,1364692686:180,1382836686:120,1396142286:180,1414286286:120,1427591886:180,1445735886:120,1459041486:180,1477790286:120,1490491086:180,1509239886:120,1521940686:180,1540689486:120},
"Europe/Istanbul":{1237871887:120,1238289487:180,1256433487:120,1269739087:180,1288487887:120,1301188687:180,1319937487:120,1332638287:180,1351387087:120,1364692687:180,1382836687:120,1396142287:180,1414286287:120,1427591887:180,1445735887:120,1459041487:180,1477790287:120,1490491087:180,1509239887:120,1521940687:180,1540689487:120},
"Europe/Kaliningrad":{1237871887:120,1238285887:180,1256429887:120,1269735487:180,1288484287:120,1301185087:180,1319933887:120,1332634687:180,1351383487:120,1364689087:180,1382833087:120,1396138687:180,1414282687:120,1427588287:180,1445732287:120,1459037887:180,1477786687:120,1490487487:180,1509236287:120,1521937087:180,1540685887:120},
"Europe/Kiev":{1237871888:120,1238289488:180,1256433488:120,1269739088:180,1288487888:120,1301188688:180,1319937488:120,1332638288:180,1351387088:120,1364692688:180,1382836688:120,1396142288:180,1414286288:120,1427591888:180,1445735888:120,1459041488:180,1477790288:120,1490491088:180,1509239888:120,1521940688:180,1540689488:120},
"Europe/Lisbon":{1237871889:0,1238289489:60,1256433489:0,1269739089:60,1288487889:0,1301188689:60,1319937489:0,1332638289:60,1351387089:0,1364692689:60,1382836689:0,1396142289:60,1414286289:0,1427591889:60,1445735889:0,1459041489:60,1477790289:0,1490491089:60,1509239889:0,1521940689:60,1540689489:0},
"Europe/London":{1237871890:0,1238289490:60,1256433490:0,1269739090:60,1288487890:0,1301188690:60,1319937490:0,1332638290:60,1351387090:0,1364692690:60,1382836690:0,1396142290:60,1414286290:0,1427591890:60,1445735890:0,1459041490:60,1477790290:0,1490491090:60,1509239890:0,1521940690:60,1540689490:0},
"Europe/Luxembourg":{1237871891:60,1238289491:120,1256433491:60,1269739091:120,1288487891:60,1301188691:120,1319937491:60,1332638291:120,1351387091:60,1364692691:120,1382836691:60,1396142291:120,1414286291:60,1427591891:120,1445735891:60,1459041491:120,1477790291:60,1490491091:120,1509239891:60,1521940691:120,1540689491:60},
"Europe/Madrid":{1237871891:60,1238289491:120,1256433491:60,1269739091:120,1288487891:60,1301188691:120,1319937491:60,1332638291:120,1351387091:60,1364692691:120,1382836691:60,1396142291:120,1414286291:60,1427591891:120,1445735891:60,1459041491:120,1477790291:60,1490491091:120,1509239891:60,1521940691:120,1540689491:60},
"Europe/Malta":{1237871892:60,1238289492:120,1256433492:60,1269739092:120,1288487892:60,1301188692:120,1319937492:60,1332638292:120,1351387092:60,1364692692:120,1382836692:60,1396142292:120,1414286292:60,1427591892:120,1445735892:60,1459041492:120,1477790292:60,1490491092:120,1509239892:60,1521940692:120,1540689492:60},
"Europe/Minsk":{1237871893:120,1238285893:180,1256429893:120,1269735493:180,1288484293:120,1301185093:180,1319933893:120,1332634693:180,1351383493:120,1364689093:180,1382833093:120,1396138693:180,1414282693:120,1427588293:180,1445732293:120,1459037893:180,1477786693:120,1490487493:180,1509236293:120,1521937093:180,1540685893:120},
"Europe/Monaco":{1237871894:60,1238289494:120,1256433494:60,1269739094:120,1288487894:60,1301188694:120,1319937494:60,1332638294:120,1351387094:60,1364692694:120,1382836694:60,1396142294:120,1414286294:60,1427591894:120,1445735894:60,1459041494:120,1477790294:60,1490491094:120,1509239894:60,1521940694:120,1540689494:60},
"Europe/Moscow":{1237871894:180,1238282294:240,1256426294:180,1269731894:240,1288480694:180,1301181494:240,1319930294:180,1332631094:240,1351379894:180,1364685494:240,1382829494:180,1396135094:240,1414279094:180,1427584694:240,1445728694:180,1459034294:240,1477783094:180,1490483894:240,1509232694:180,1521933494:240,1540682294:180},
"Europe/Oslo":{1237871895:60,1238289495:120,1256433495:60,1269739095:120,1288487895:60,1301188695:120,1319937495:60,1332638295:120,1351387095:60,1364692695:120,1382836695:60,1396142295:120,1414286295:60,1427591895:120,1445735895:60,1459041495:120,1477790295:60,1490491095:120,1509239895:60,1521940695:120,1540689495:60},
"Europe/Paris":{1237871896:60,1238289496:120,1256433496:60,1269739096:120,1288487896:60,1301188696:120,1319937496:60,1332638296:120,1351387096:60,1364692696:120,1382836696:60,1396142296:120,1414286296:60,1427591896:120,1445735896:60,1459041496:120,1477790296:60,1490491096:120,1509239896:60,1521940696:120,1540689496:60},
"Europe/Prague":{1237871897:60,1238289497:120,1256433497:60,1269739097:120,1288487897:60,1301188697:120,1319937497:60,1332638297:120,1351387097:60,1364692697:120,1382836697:60,1396142297:120,1414286297:60,1427591897:120,1445735897:60,1459041497:120,1477790297:60,1490491097:120,1509239897:60,1521940697:120,1540689497:60},
"Europe/Riga":{1237871897:120,1238289497:180,1256433497:120,1269739097:180,1288487897:120,1301188697:180,1319937497:120,1332638297:180,1351387097:120,1364692697:180,1382836697:120,1396142297:180,1414286297:120,1427591897:180,1445735897:120,1459041497:180,1477790297:120,1490491097:180,1509239897:120,1521940697:180,1540689497:120},
"Europe/Rome":{1237871898:60,1238289498:120,1256433498:60,1269739098:120,1288487898:60,1301188698:120,1319937498:60,1332638298:120,1351387098:60,1364692698:120,1382836698:60,1396142298:120,1414286298:60,1427591898:120,1445735898:60,1459041498:120,1477790298:60,1490491098:120,1509239898:60,1521940698:120,1540689498:60},
"Europe/Samara":{1237871899:240,1238278699:300,1256422699:240,1269728299:300,1288477099:240,1301177899:300,1319926699:240,1332627499:300,1351376299:240,1364681899:300,1382825899:240,1396131499:300,1414275499:240,1427581099:300,1445725099:240,1459030699:300,1477779499:240,1490480299:300,1509229099:240,1521929899:300,1540678699:240},
"Europe/Simferopol":{1237871900:120,1238289500:180,1256433500:120,1269739100:180,1288487900:120,1301188700:180,1319937500:120,1332638300:180,1351387100:120,1364692700:180,1382836700:120,1396142300:180,1414286300:120,1427591900:180,1445735900:120,1459041500:180,1477790300:120,1490491100:180,1509239900:120,1521940700:180,1540689500:120},
"Europe/Sofia":{1237871900:120,1238289500:180,1256433500:120,1269739100:180,1288487900:120,1301188700:180,1319937500:120,1332638300:180,1351387100:120,1364692700:180,1382836700:120,1396142300:180,1414286300:120,1427591900:180,1445735900:120,1459041500:180,1477790300:120,1490491100:180,1509239900:120,1521940700:180,1540689500:120},
"Europe/Stockholm":{1237871901:60,1238289501:120,1256433501:60,1269739101:120,1288487901:60,1301188701:120,1319937501:60,1332638301:120,1351387101:60,1364692701:120,1382836701:60,1396142301:120,1414286301:60,1427591901:120,1445735901:60,1459041501:120,1477790301:60,1490491101:120,1509239901:60,1521940701:120,1540689501:60},
"Europe/Tallinn":{1237871902:120,1238289502:180,1256433502:120,1269739102:180,1288487902:120,1301188702:180,1319937502:120,1332638302:180,1351387102:120,1364692702:180,1382836702:120,1396142302:180,1414286302:120,1427591902:180,1445735902:120,1459041502:180,1477790302:120,1490491102:180,1509239902:120,1521940702:180,1540689502:120},
"Europe/Tirane":{1237871903:60,1238289503:120,1256433503:60,1269739103:120,1288487903:60,1301188703:120,1319937503:60,1332638303:120,1351387103:60,1364692703:120,1382836703:60,1396142303:120,1414286303:60,1427591903:120,1445735903:60,1459041503:120,1477790303:60,1490491103:120,1509239903:60,1521940703:120,1540689503:60},
"Europe/Uzhgorod":{1237871903:120,1238289503:180,1256433503:120,1269739103:180,1288487903:120,1301188703:180,1319937503:120,1332638303:180,1351387103:120,1364692703:180,1382836703:120,1396142303:180,1414286303:120,1427591903:180,1445735903:120,1459041503:180,1477790303:120,1490491103:180,1509239903:120,1521940703:180,1540689503:120},
"Europe/Vaduz":{1237871904:60,1238289504:120,1256433504:60,1269739104:120,1288487904:60,1301188704:120,1319937504:60,1332638304:120,1351387104:60,1364692704:120,1382836704:60,1396142304:120,1414286304:60,1427591904:120,1445735904:60,1459041504:120,1477790304:60,1490491104:120,1509239904:60,1521940704:120,1540689504:60},
"Europe/Vienna":{1237871905:60,1238289505:120,1256433505:60,1269739105:120,1288487905:60,1301188705:120,1319937505:60,1332638305:120,1351387105:60,1364692705:120,1382836705:60,1396142305:120,1414286305:60,1427591905:120,1445735905:60,1459041505:120,1477790305:60,1490491105:120,1509239905:60,1521940705:120,1540689505:60},
"Europe/Vilnius":{1237871906:120,1238289506:180,1256433506:120,1269739106:180,1288487906:120,1301188706:180,1319937506:120,1332638306:180,1351387106:120,1364692706:180,1382836706:120,1396142306:180,1414286306:120,1427591906:180,1445735906:120,1459041506:180,1477790306:120,1490491106:180,1509239906:120,1521940706:180,1540689506:120},
"Europe/Volgograd":{1237871906:180,1238282306:240,1256426306:180,1269731906:240,1288480706:180,1301181506:240,1319930306:180,1332631106:240,1351379906:180,1364685506:240,1382829506:180,1396135106:240,1414279106:180,1427584706:240,1445728706:180,1459034306:240,1477783106:180,1490483906:240,1509232706:180,1521933506:240,1540682306:180},
"Europe/Warsaw":{1237871907:60,1238289507:120,1256433507:60,1269739107:120,1288487907:60,1301188707:120,1319937507:60,1332638307:120,1351387107:60,1364692707:120,1382836707:60,1396142307:120,1414286307:60,1427591907:120,1445735907:60,1459041507:120,1477790307:60,1490491107:120,1509239907:60,1521940707:120,1540689507:60},
"Europe/Zaporozhye":{1237871908:120,1238289508:180,1256433508:120,1269739108:180,1288487908:120,1301188708:180,1319937508:120,1332638308:180,1351387108:120,1364692708:180,1382836708:120,1396142308:180,1414286308:120,1427591908:180,1445735908:120,1459041508:180,1477790308:120,1490491108:180,1509239908:120,1521940708:180,1540689508:120},
"Europe/Zurich":{1237871909:60,1238289509:120,1256433509:60,1269739109:120,1288487909:60,1301188709:120,1319937509:60,1332638309:120,1351387109:60,1364692709:120,1382836709:60,1396142309:120,1414286309:60,1427591909:120,1445735909:60,1459041509:120,1477790309:60,1490491109:120,1509239909:60,1521940709:120,1540689509:60},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-09":{0:-540},
"GMT-08":{0:-480},
"GMT-07":{0:-420},
"GMT-06":{0:-360},
"GMT-05":{0:-300},
"GMT-04":{0:-240},
"GMT-03":{0:-180},
"GMT-02":{0:-120},
"GMT-01":{0:-60},
"GMT+00":{0:0},
"GMT+01":{0:60},
"GMT+02":{0:120},
"GMT+03":{0:180},
"GMT+04":{0:240},
"GMT+05":{0:300},
"GMT+06":{0:360},
"GMT+07":{0:420},
"GMT+08":{0:480},
"GMT+09":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660},
"GMT+12":{0:720},
"Indian Ocean/Antananarivo":{1237871909:180},
"Indian Ocean/Chagos":{1237871910:360},
"Indian Ocean/Christmas":{1237871911:420},
"Indian Ocean/Cocos":{1237871911:390},
"Indian Ocean/Comoro":{1237871912:180},
"Indian Ocean/Kerguelen":{1237871912:300},
"Indian Ocean/Mahe":{1237871913:240},
"Indian Ocean/Maldives":{1237871914:300},
"Indian Ocean/Mauritius":{1237871914:300,1238278714:240,1256422714:300,1269728314:240,1288477114:300,1301177914:240,1319926714:300,1332627514:240,1351376314:300,1364681914:240,1382825914:300,1396131514:240,1414275514:300,1427581114:240,1445725114:300,1459030714:240,1477779514:300,1490480314:240,1509229114:300,1521929914:240,1540678714:300},
"Indian Ocean/Mayotte":{1237871915:180},
"Indian Ocean/Reunion":{1237871916:240},
"Pacific/Apia":{1237871917:-660},
"Pacific/Auckland":{1237871917:780,1238854717:720,1253974717:780,1270304317:720,1285424317:780,1301753917:720,1316873917:780,1333203517:720,1348928317:780,1365257917:720,1380377917:780,1396707517:720,1411827517:780,1428157117:720,1443277117:780,1459606717:720,1474726717:780,1491056317:720,1506176317:780,1522505917:720,1538230717:780},
"Pacific/Chatham":{1237871918:825,1238854718:765,1253974718:825,1270304318:765,1285424318:825,1301753918:765,1316873918:825,1333203518:765,1348928318:825,1365257918:765,1380377918:825,1396707518:765,1411827518:825,1428157118:765,1443277118:825,1459606718:765,1474726718:825,1491056318:765,1506176318:825,1522505918:765,1538230718:825},
"Pacific/Easter":{1237871919:-360,1255234719:-300,1268536719:-360,1286684319:-300,1299986319:-360,1318133919:-300,1331435919:-360,1350188319:-300,1362885519:-360,1381637919:-300,1394335119:-360,1413087519:-300,1426389519:-360,1444537119:-300,1457839119:-360,1475986719:-300,1489288719:-360,1508041119:-300,1520738319:-360,1539490719:-300,1552187919:-360},
"Pacific/Efate":{1237871920:660},
"Pacific/Enderbury":{1237871920:780},
"Pacific/Fakaofo":{1237871921:-600},
"Pacific/Fiji":{1237871921:720},
"Pacific/Funafuti":{1237871922:720},
"Pacific/Galapagos":{1237871923:-360},
"Pacific/Gambier":{1237871923:-540},
"Pacific/Guadalcanal":{1237871924:660},
"Pacific/Guam":{1237871925:600},
"Pacific/Honolulu":{1237871925:-600},
"Pacific/Johnston":{1237871926:-600},
"Pacific/Kiritimati":{1237871927:840},
"Pacific/Kosrae":{1237871927:660},
"Pacific/Kwajalein":{1237871928:720},
"Pacific/Majuro":{1237871929:720},
"Pacific/Marquesas":{1237871929:-570},
"Pacific/Midway":{1237871930:-660},
"Pacific/Nauru":{1237871931:720},
"Pacific/Niue":{1237871932:-660},
"Pacific/Norfolk":{1237871932:690},
"Pacific/Noumea":{1237871933:660},
"Pacific/Pago Pago":{1237871934:-660},
"Pacific/Palau":{1237871934:540},
"Pacific/Pitcairn":{1237871935:-480},
"Pacific/Ponape":{1237871936:660},
"Pacific/Port Moresby":{1237871936:600},
"Pacific/Rarotonga":{1237871936:-600},
"Pacific/Saipan":{1237871937:600},
"Pacific/Tahiti":{1237871938:-600},
"Pacific/Tarawa":{1237871939:720},
"Pacific/Tongatapu":{1237871939:780},
"Pacific/Truk":{1237871940:600},
"Pacific/Wake":{1237871940:720},
"Pacific/Wallis":{1237871940:720},
"UTC":{1237871941:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "A newer version of Presto's Clock is available. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  't_languagename':    'English'
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = G.mainTimeFormat ? formatDate( G.mainTimeFormat, now ) : '';

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;
  okToUpdate = true;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  showIfUpdateAvailable();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}

function getHttpAsText( url ) {
  try {
    var req = new ActiveXObject( "Microsoft.XMLHTTP" );
    req.open( 'GET', url, false );
    req.send();
    if ( req.status == 200 ) {
      return req.responseText;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

function isUpdateAvailable() {
  var newestText = getHttpAsText( 'http://prestonhunt.com/m/2009/prestosidebarclock.version?cacheBuster=' + Math.random() );
  if ( newestText === false ) return false;
  var currentText = 'xxVER';

  var newestVersion = parseFloat( newestText );
  var currentVersion = parseFloat( currentText );

  return newestVersion > currentVersion;
}

function showIfUpdateAvailable() {
  if ( isUpdateAvailable() ) {
    document.getElementById( 't_update' ).style.display = 'block';
  }
}
