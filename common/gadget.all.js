// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1245251648:0},
"Africa/Accra":{1245251649:0},
"Africa/Addis Ababa":{1245251649:180},
"Africa/Algiers":{1245251650:60},
"Africa/Asmara":{1245251651:180},
"Africa/Bamako":{1245251651:0},
"Africa/Bangui":{1245251652:60},
"Africa/Banjul":{1245251653:0},
"Africa/Bissau":{1245251654:0},
"Africa/Blantyre":{1245251654:120},
"Africa/Brazzaville":{1245251655:60},
"Africa/Bujumbura":{1245251656:120},
"Africa/Cairo":{1245251656:180,1253826856:120,1272579256:180,1285881256:120,1304028856:180,1317330856:120,1335478456:180,1348780456:120,1366928056:180,1380230056:120,1398377656:180,1411679656:120,1429827256:180,1443129256:120,1461881656:180,1475183656:120,1493331256:180,1506633256:120,1524780856:180,1538082856:120,1556230456:180},
"Africa/Casablanca":{1245251657:60,1250810057:0},
"Africa/Ceuta":{1245251658:120,1256433258:60,1269738858:120,1288487658:60,1301188458:120,1319937258:60,1332638058:120,1351386858:60,1364692458:120,1382836458:60,1396142058:120,1414286058:60,1427591658:120,1445735658:60,1459041258:120,1477790058:60,1490490858:120,1509239658:60,1521940458:120,1540689258:60,1553994858:120},
"Africa/Conakry":{1245251658:0},
"Africa/Dakar":{1245251659:0},
"Africa/Dar es Salaam":{1245251660:180},
"Africa/Djibouti":{1245251660:180},
"Africa/Douala":{1245251661:60},
"Africa/El Aaiun":{1245251662:0},
"Africa/Freetown":{1245251663:0},
"Africa/Gaborone":{1245251663:120},
"Africa/Harare":{1245251664:120},
"Africa/Johannesburg":{1245251665:120},
"Africa/Kampala":{1245251665:180},
"Africa/Khartoum":{1245251666:180},
"Africa/Kigali":{1245251667:120},
"Africa/Kinshasa":{1245251668:60},
"Africa/Lagos":{1245251668:60},
"Africa/Libreville":{1245251669:60},
"Africa/Lome":{1245251669:0},
"Africa/Luanda":{1245251670:60},
"Africa/Lubumbashi":{1245251671:120},
"Africa/Lusaka":{1245251671:120},
"Africa/Malabo":{1245251672:60},
"Africa/Maputo":{1245251672:120},
"Africa/Maseru":{1245251673:120},
"Africa/Mbabane":{1245251674:120},
"Africa/Mogadishu":{1245251674:180},
"Africa/Monrovia":{1245251675:0},
"Africa/Nairobi":{1245251676:180},
"Africa/Ndjamena":{1245251677:60},
"Africa/Niamey":{1245251677:60},
"Africa/Nouakchott":{1245251678:0},
"Africa/Ouagadougou":{1245251679:0},
"Africa/Porto-Novo":{1245251679:60},
"Africa/Sao Tome":{1245251680:0},
"Africa/Tripoli":{1245251681:120},
"Africa/Tunis":{1245251682:60,1269738882:120,1288487682:60,1301188482:120,1319937282:60,1332638082:120,1351386882:60,1364692482:120,1382836482:60,1396142082:120,1414286082:60,1427591682:120,1445735682:60,1459041282:120,1477790082:60,1490490882:120,1509239682:60,1521940482:120,1540689282:60,1553994882:120},
"Africa/Windhoek":{1245251682:60,1252199682:120,1270340082:60,1283649282:120,1301789682:60,1315098882:120,1333239282:60,1346548482:120,1365293682:60,1377998082:120,1396743282:60,1410052482:120,1428192882:60,1441502082:120,1459642482:60,1472951682:120,1491092082:60,1504401282:120,1522541682:60,1535850882:120,1554596082:60},
"America/Adak":{1245251683:-540,1257074083:-600,1268568883:-540,1289128483:-600,1300018483:-540,1320578083:-600,1331468083:-540,1352027683:-600,1362917683:-540,1383477283:-600,1394367283:-540,1414926883:-600,1425816883:-540,1446376483:-600,1457871283:-540,1478430883:-600,1489320883:-540,1509880483:-600,1520770483:-540,1541330083:-600,1552220083:-540},
"America/Anchorage":{1245251684:-480,1257070484:-540,1268565284:-480,1289124884:-540,1300014884:-480,1320574484:-540,1331464484:-480,1352024084:-540,1362914084:-480,1383473684:-540,1394363684:-480,1414923284:-540,1425813284:-480,1446372884:-540,1457867684:-480,1478427284:-540,1489317284:-480,1509876884:-540,1520766884:-480,1541326484:-540,1552216484:-480},
"America/Anguilla":{1245251685:-240},
"America/Antigua":{1245251685:-240},
"America/Araguaina":{1245251686:-180},
"America/Argentina/Buenos Aires":{1245251687:-180,1255835687:-120,1269137687:-180,1287285287:-120,1300587287:-180,1318734887:-120,1332036887:-180,1350789287:-120,1363486487:-180,1382238887:-120,1394936087:-180,1413688487:-120,1426385687:-180,1445138087:-120,1458440087:-180,1476587687:-120,1489889687:-180,1508037287:-120,1521339287:-180,1540091687:-120,1552788887:-180},
"America/Argentina/Catamarca":{1245251687:-180},
"America/Argentina/Cordoba":{1245251688:-180,1255835688:-120,1269137688:-180,1287285288:-120,1300587288:-180,1318734888:-120,1332036888:-180,1350789288:-120,1363486488:-180,1382238888:-120,1394936088:-180,1413688488:-120,1426385688:-180,1445138088:-120,1458440088:-180,1476587688:-120,1489889688:-180,1508037288:-120,1521339288:-180,1540091688:-120,1552788888:-180},
"America/Argentina/Jujuy":{1245251689:-180},
"America/Argentina/La Rioja":{1245251690:-180},
"America/Argentina/Mendoza":{1245251690:-180},
"America/Argentina/Rio Gallegos":{1245251691:-180},
"America/Argentina/Salta":{1245251692:-180},
"America/Argentina/San Juan":{1245251693:-180},
"America/Argentina/San Luis":{1245251693:-240,1255839293:-180,1269141293:-240,1287288893:-180,1300590893:-240,1318738493:-180,1332040493:-240,1350792893:-180,1363490093:-240,1382242493:-180,1394939693:-240,1413692093:-180,1426389293:-240,1445141693:-180,1458443693:-240,1476591293:-180,1489893293:-240,1508040893:-180,1521342893:-240,1540095293:-180,1552792493:-240},
"America/Argentina/Tucuman":{1245251694:-180,1255835694:-120,1269137694:-180,1287285294:-120,1300587294:-180,1318734894:-120,1332036894:-180,1350789294:-120,1363486494:-180,1382238894:-120,1394936094:-180,1413688494:-120,1426385694:-180,1445138094:-120,1458440094:-180,1476587694:-120,1489889694:-180,1508037294:-120,1521339294:-180,1540091694:-120,1552788894:-180},
"America/Argentina/Ushuaia":{1245251695:-180},
"America/Aruba":{1245251696:-240},
"America/Asuncion":{1245251696:-240,1255839296:-180,1268536496:-240,1287288896:-180,1299986096:-240,1318738496:-180,1331435696:-240,1350792896:-180,1362885296:-240,1382242496:-180,1394334896:-240,1413692096:-180,1425784496:-240,1445141696:-180,1457838896:-240,1476591296:-180,1489288496:-240,1508040896:-180,1520738096:-240,1540095296:-180,1552187696:-240},
"America/Atikokan":{1245251697:-300},
"America/Bahia":{1245251698:-180},
"America/Barbados":{1245251698:-240},
"America/Belem":{1245251699:-180},
"America/Belize":{1245251700:-360},
"America/Blanc-Sablon":{1245251701:-240},
"America/Boa Vista":{1245251701:-240},
"America/Bogota":{1245251702:-300},
"America/Boise":{1245251703:-360,1257063303:-420,1268558103:-360,1289117703:-420,1300007703:-360,1320567303:-420,1331457303:-360,1352016903:-420,1362906903:-360,1383466503:-420,1394356503:-360,1414916103:-420,1425806103:-360,1446365703:-420,1457860503:-360,1478420103:-420,1489310103:-360,1509869703:-420,1520759703:-360,1541319303:-420,1552209303:-360},
"America/Cambridge Bay":{1245251704:-360,1257063304:-420,1268558104:-360,1289117704:-420,1300007704:-360,1320567304:-420,1331457304:-360,1352016904:-420,1362906904:-360,1383466504:-420,1394356504:-360,1414916104:-420,1425806104:-360,1446365704:-420,1457860504:-360,1478420104:-420,1489310104:-360,1509869704:-420,1520759704:-360,1541319304:-420,1552209304:-360},
"America/Campo Grande":{1245251704:-240,1255839304:-180,1266722104:-240,1287288904:-180,1298171704:-240,1318738504:-180,1330226104:-240,1350792904:-180,1361070904:-240,1382242504:-180,1392520504:-240,1413692104:-180,1424574904:-240,1445141704:-180,1456024504:-240,1476591304:-180,1487474104:-240,1508040904:-180,1518923704:-240,1540095304:-180,1550373304:-240},
"America/Cancun":{1245251705:-300,1256454905:-360,1270368905:-300,1288509305:-360,1301818505:-300,1319958905:-360,1333268105:-300,1351408505:-360,1365322505:-300,1382858105:-360,1396772105:-300,1414307705:-360,1428221705:-300,1445757305:-360,1459671305:-300,1477811705:-360,1491120905:-300,1509261305:-360,1522570505:-300,1540710905:-360,1554624905:-300},
"America/Caracas":{1245251706:-270},
"America/Cayenne":{1245251706:-180},
"America/Cayman":{1245251707:-300},
"America/Chicago":{1245251708:-300,1257059708:-360,1268554508:-300,1289114108:-360,1300004108:-300,1320563708:-360,1331453708:-300,1352013308:-360,1362903308:-300,1383462908:-360,1394352908:-300,1414912508:-360,1425802508:-300,1446362108:-360,1457856908:-300,1478416508:-360,1489306508:-300,1509866108:-360,1520756108:-300,1541315708:-360,1552205708:-300},
"America/Chihuahua":{1245251709:-360,1256458509:-420,1270372509:-360,1288512909:-420,1301822109:-360,1319962509:-420,1333271709:-360,1351412109:-420,1365326109:-360,1382861709:-420,1396775709:-360,1414311309:-420,1428225309:-360,1445760909:-420,1459674909:-360,1477815309:-420,1491124509:-360,1509264909:-420,1522574109:-360,1540714509:-420,1554628509:-360},
"America/Costa Rica":{1245251709:-360},
"America/Cuiaba":{1245251710:-240,1255839310:-180,1266722110:-240,1287288910:-180,1298171710:-240,1318738510:-180,1330226110:-240,1350792910:-180,1361070910:-240,1382242510:-180,1392520510:-240,1413692110:-180,1424574910:-240,1445141710:-180,1456024510:-240,1476591310:-180,1487474110:-240,1508040910:-180,1518923710:-240,1540095310:-180,1550373310:-240},
"America/Curacao":{1245251711:-240},
"America/Danmarkshavn":{1245251712:0},
"America/Dawson":{1245251712:-420,1257066912:-480,1268561712:-420,1289121312:-480,1300011312:-420,1320570912:-480,1331460912:-420,1352020512:-480,1362910512:-420,1383470112:-480,1394360112:-420,1414919712:-480,1425809712:-420,1446369312:-480,1457864112:-420,1478423712:-480,1489313712:-420,1509873312:-480,1520763312:-420,1541322912:-480,1552212912:-420},
"America/Dawson Creek":{1245251713:-420},
"America/Denver":{1245251714:-360,1257063314:-420,1268558114:-360,1289117714:-420,1300007714:-360,1320567314:-420,1331457314:-360,1352016914:-420,1362906914:-360,1383466514:-420,1394356514:-360,1414916114:-420,1425806114:-360,1446365714:-420,1457860514:-360,1478420114:-420,1489310114:-360,1509869714:-420,1520759714:-360,1541319314:-420,1552209314:-360},
"America/Detroit":{1245251715:-240,1257056115:-300,1268550915:-240,1289110515:-300,1300000515:-240,1320560115:-300,1331450115:-240,1352009715:-300,1362899715:-240,1383459315:-300,1394349315:-240,1414908915:-300,1425798915:-240,1446358515:-300,1457853315:-240,1478412915:-300,1489302915:-240,1509862515:-300,1520752515:-240,1541312115:-300,1552202115:-240},
"America/Dominica":{1245251715:-240},
"America/Edmonton":{1245251716:-360,1257063316:-420,1268558116:-360,1289117716:-420,1300007716:-360,1320567316:-420,1331457316:-360,1352016916:-420,1362906916:-360,1383466516:-420,1394356516:-360,1414916116:-420,1425806116:-360,1446365716:-420,1457860516:-360,1478420116:-420,1489310116:-360,1509869716:-420,1520759716:-360,1541319316:-420,1552209316:-360},
"America/Eirunepe":{1245251717:-240},
"America/El Salvador":{1245251717:-360},
"America/Fortaleza":{1245251718:-180},
"America/Glace Bay":{1245251719:-180,1257052519:-240,1268547319:-180,1289106919:-240,1299996919:-180,1320556519:-240,1331446519:-180,1352006119:-240,1362896119:-180,1383455719:-240,1394345719:-180,1414905319:-240,1425795319:-180,1446354919:-240,1457849719:-180,1478409319:-240,1489299319:-180,1509858919:-240,1520748919:-180,1541308519:-240,1552198519:-180},
"America/Godthab":{1245251720:-120,1256433320:-180,1269738920:-120,1288487720:-180,1301188520:-120,1319937320:-180,1332638120:-120,1351386920:-180,1364692520:-120,1382836520:-180,1396142120:-120,1414286120:-180,1427591720:-120,1445735720:-180,1459041320:-120,1477790120:-180,1490490920:-120,1509239720:-180,1521940520:-120,1540689320:-180,1553994920:-120},
"America/Goose Bay":{1245251720:-180,1257045320:-240,1268540120:-180,1289099720:-240,1299989720:-180,1320549320:-240,1331439320:-180,1351998920:-240,1362888920:-180,1383448520:-240,1394338520:-180,1414898120:-240,1425788120:-180,1446347720:-240,1457842520:-180,1478402120:-240,1489292120:-180,1509851720:-240,1520741720:-180,1541301320:-240,1552191320:-180},
"America/Grand Turk":{1245251721:-240,1257056121:-300,1268550921:-240,1289110521:-300,1300000521:-240,1320560121:-300,1331450121:-240,1352009721:-300,1362899721:-240,1383459321:-300,1394349321:-240,1414908921:-300,1425798921:-240,1446358521:-300,1457853321:-240,1478412921:-300,1489302921:-240,1509862521:-300,1520752521:-240,1541312121:-300,1552202121:-240},
"America/Grenada":{1245251722:-240},
"America/Guadeloupe":{1245251723:-240},
"America/Guatemala":{1245251723:-360},
"America/Guayaquil":{1245251724:-300},
"America/Guyana":{1245251725:-240},
"America/Halifax":{1245251725:-180,1257052525:-240,1268547325:-180,1289106925:-240,1299996925:-180,1320556525:-240,1331446525:-180,1352006125:-240,1362896125:-180,1383455725:-240,1394345725:-180,1414905325:-240,1425795325:-180,1446354925:-240,1457849725:-180,1478409325:-240,1489299325:-180,1509858925:-240,1520748925:-180,1541308525:-240,1552198525:-180},
"America/Havana":{1245251726:-240,1256447726:-300,1268543726:-240,1288502126:-300,1299993326:-240,1319951726:-300,1331442926:-240,1351401326:-300,1362892526:-240,1382850926:-300,1394342126:-240,1414300526:-300,1425791726:-240,1445750126:-300,1457846126:-240,1477804526:-300,1489295726:-240,1509254126:-300,1520745326:-240,1540703726:-300,1552194926:-240},
"America/Hermosillo":{1245251727:-420},
"America/Indiana/Indianapolis":{1245251728:-240,1257056128:-300,1268550928:-240,1289110528:-300,1300000528:-240,1320560128:-300,1331450128:-240,1352009728:-300,1362899728:-240,1383459328:-300,1394349328:-240,1414908928:-300,1425798928:-240,1446358528:-300,1457853328:-240,1478412928:-300,1489302928:-240,1509862528:-300,1520752528:-240,1541312128:-300,1552202128:-240},
"America/Indiana/Knox":{1245251728:-300,1257059728:-360,1268554528:-300,1289114128:-360,1300004128:-300,1320563728:-360,1331453728:-300,1352013328:-360,1362903328:-300,1383462928:-360,1394352928:-300,1414912528:-360,1425802528:-300,1446362128:-360,1457856928:-300,1478416528:-360,1489306528:-300,1509866128:-360,1520756128:-300,1541315728:-360,1552205728:-300},
"America/Indiana/Marengo":{1245251729:-240,1257056129:-300,1268550929:-240,1289110529:-300,1300000529:-240,1320560129:-300,1331450129:-240,1352009729:-300,1362899729:-240,1383459329:-300,1394349329:-240,1414908929:-300,1425798929:-240,1446358529:-300,1457853329:-240,1478412929:-300,1489302929:-240,1509862529:-300,1520752529:-240,1541312129:-300,1552202129:-240},
"America/Indiana/Petersburg":{1245251730:-240,1257056130:-300,1268550930:-240,1289110530:-300,1300000530:-240,1320560130:-300,1331450130:-240,1352009730:-300,1362899730:-240,1383459330:-300,1394349330:-240,1414908930:-300,1425798930:-240,1446358530:-300,1457853330:-240,1478412930:-300,1489302930:-240,1509862530:-300,1520752530:-240,1541312130:-300,1552202130:-240},
"America/Indiana/Tell City":{1245251731:-300,1257059731:-360,1268554531:-300,1289114131:-360,1300004131:-300,1320563731:-360,1331453731:-300,1352013331:-360,1362903331:-300,1383462931:-360,1394352931:-300,1414912531:-360,1425802531:-300,1446362131:-360,1457856931:-300,1478416531:-360,1489306531:-300,1509866131:-360,1520756131:-300,1541315731:-360,1552205731:-300},
"America/Indiana/Vevay":{1245251731:-240,1257056131:-300,1268550931:-240,1289110531:-300,1300000531:-240,1320560131:-300,1331450131:-240,1352009731:-300,1362899731:-240,1383459331:-300,1394349331:-240,1414908931:-300,1425798931:-240,1446358531:-300,1457853331:-240,1478412931:-300,1489302931:-240,1509862531:-300,1520752531:-240,1541312131:-300,1552202131:-240},
"America/Indiana/Vincennes":{1245251732:-240,1257056132:-300,1268550932:-240,1289110532:-300,1300000532:-240,1320560132:-300,1331450132:-240,1352009732:-300,1362899732:-240,1383459332:-300,1394349332:-240,1414908932:-300,1425798932:-240,1446358532:-300,1457853332:-240,1478412932:-300,1489302932:-240,1509862532:-300,1520752532:-240,1541312132:-300,1552202132:-240},
"America/Indiana/Winamac":{1245251733:-240,1257056133:-300,1268550933:-240,1289110533:-300,1300000533:-240,1320560133:-300,1331450133:-240,1352009733:-300,1362899733:-240,1383459333:-300,1394349333:-240,1414908933:-300,1425798933:-240,1446358533:-300,1457853333:-240,1478412933:-300,1489302933:-240,1509862533:-300,1520752533:-240,1541312133:-300,1552202133:-240},
"America/Inuvik":{1245251734:-360,1257063334:-420,1268558134:-360,1289117734:-420,1300007734:-360,1320567334:-420,1331457334:-360,1352016934:-420,1362906934:-360,1383466534:-420,1394356534:-360,1414916134:-420,1425806134:-360,1446365734:-420,1457860534:-360,1478420134:-420,1489310134:-360,1509869734:-420,1520759734:-360,1541319334:-420,1552209334:-360},
"America/Iqaluit":{1245251734:-240,1257056134:-300,1268550934:-240,1289110534:-300,1300000534:-240,1320560134:-300,1331450134:-240,1352009734:-300,1362899734:-240,1383459334:-300,1394349334:-240,1414908934:-300,1425798934:-240,1446358534:-300,1457853334:-240,1478412934:-300,1489302934:-240,1509862534:-300,1520752534:-240,1541312134:-300,1552202134:-240},
"America/Jamaica":{1245251735:-300},
"America/Juneau":{1245251736:-480,1257070536:-540,1268565336:-480,1289124936:-540,1300014936:-480,1320574536:-540,1331464536:-480,1352024136:-540,1362914136:-480,1383473736:-540,1394363736:-480,1414923336:-540,1425813336:-480,1446372936:-540,1457867736:-480,1478427336:-540,1489317336:-480,1509876936:-540,1520766936:-480,1541326536:-540,1552216536:-480},
"America/Kentucky/Louisville":{1245251737:-240,1257056137:-300,1268550937:-240,1289110537:-300,1300000537:-240,1320560137:-300,1331450137:-240,1352009737:-300,1362899737:-240,1383459337:-300,1394349337:-240,1414908937:-300,1425798937:-240,1446358537:-300,1457853337:-240,1478412937:-300,1489302937:-240,1509862537:-300,1520752537:-240,1541312137:-300,1552202137:-240},
"America/Kentucky/Monticello":{1245251737:-240,1257056137:-300,1268550937:-240,1289110537:-300,1300000537:-240,1320560137:-300,1331450137:-240,1352009737:-300,1362899737:-240,1383459337:-300,1394349337:-240,1414908937:-300,1425798937:-240,1446358537:-300,1457853337:-240,1478412937:-300,1489302937:-240,1509862537:-300,1520752537:-240,1541312137:-300,1552202137:-240},
"America/La Paz":{1245251738:-240},
"America/Lima":{1245251739:-300},
"America/Los Angeles":{1245251740:-420,1257066940:-480,1268561740:-420,1289121340:-480,1300011340:-420,1320570940:-480,1331460940:-420,1352020540:-480,1362910540:-420,1383470140:-480,1394360140:-420,1414919740:-480,1425809740:-420,1446369340:-480,1457864140:-420,1478423740:-480,1489313740:-420,1509873340:-480,1520763340:-420,1541322940:-480,1552212940:-420},
"America/Maceio":{1245251740:-180},
"America/Managua":{1245251741:-360},
"America/Manaus":{1245251742:-240},
"America/Martinique":{1245251743:-240},
"America/Mazatlan":{1245251743:-360,1256458543:-420,1270372543:-360,1288512943:-420,1301822143:-360,1319962543:-420,1333271743:-360,1351412143:-420,1365326143:-360,1382861743:-420,1396775743:-360,1414311343:-420,1428225343:-360,1445760943:-420,1459674943:-360,1477815343:-420,1491124543:-360,1509264943:-420,1522574143:-360,1540714543:-420,1554628543:-360},
"America/Menominee":{1245251744:-300,1257059744:-360,1268554544:-300,1289114144:-360,1300004144:-300,1320563744:-360,1331453744:-300,1352013344:-360,1362903344:-300,1383462944:-360,1394352944:-300,1414912544:-360,1425802544:-300,1446362144:-360,1457856944:-300,1478416544:-360,1489306544:-300,1509866144:-360,1520756144:-300,1541315744:-360,1552205744:-300},
"America/Merida":{1245251745:-300,1256454945:-360,1270368945:-300,1288509345:-360,1301818545:-300,1319958945:-360,1333268145:-300,1351408545:-360,1365322545:-300,1382858145:-360,1396772145:-300,1414307745:-360,1428221745:-300,1445757345:-360,1459671345:-300,1477811745:-360,1491120945:-300,1509261345:-360,1522570545:-300,1540710945:-360,1554624945:-300},
"America/Mexico City":{1245251745:-300,1256454945:-360,1270368945:-300,1288509345:-360,1301818545:-300,1319958945:-360,1333268145:-300,1351408545:-360,1365322545:-300,1382858145:-360,1396772145:-300,1414307745:-360,1428221745:-300,1445757345:-360,1459671345:-300,1477811745:-360,1491120945:-300,1509261345:-360,1522570545:-300,1540710945:-360,1554624945:-300},
"America/Miquelon":{1245251746:-120,1257048946:-180,1268543746:-120,1289103346:-180,1299993346:-120,1320552946:-180,1331442946:-120,1352002546:-180,1362892546:-120,1383452146:-180,1394342146:-120,1414901746:-180,1425791746:-120,1446351346:-180,1457846146:-120,1478405746:-180,1489295746:-120,1509855346:-180,1520745346:-120,1541304946:-180,1552194946:-120},
"America/Moncton":{1245251747:-180,1257052547:-240,1268547347:-180,1289106947:-240,1299996947:-180,1320556547:-240,1331446547:-180,1352006147:-240,1362896147:-180,1383455747:-240,1394345747:-180,1414905347:-240,1425795347:-180,1446354947:-240,1457849747:-180,1478409347:-240,1489299347:-180,1509858947:-240,1520748947:-180,1541308547:-240,1552198547:-180},
"America/Monterrey":{1245251748:-300,1256454948:-360,1270368948:-300,1288509348:-360,1301818548:-300,1319958948:-360,1333268148:-300,1351408548:-360,1365322548:-300,1382858148:-360,1396772148:-300,1414307748:-360,1428221748:-300,1445757348:-360,1459671348:-300,1477811748:-360,1491120948:-300,1509261348:-360,1522570548:-300,1540710948:-360,1554624948:-300},
"America/Montevideo":{1245251748:-180,1254633348:-120,1268540148:-180,1286082948:-120,1299989748:-180,1317532548:-120,1331439348:-180,1349586948:-120,1362888948:-180,1381036548:-120,1394338548:-180,1412486148:-120,1425788148:-180,1443935748:-120,1457842548:-180,1475385348:-120,1489292148:-180,1506834948:-120,1520741748:-180,1538889348:-120,1552191348:-180},
"America/Montreal":{1245251749:-240,1257056149:-300,1268550949:-240,1289110549:-300,1300000549:-240,1320560149:-300,1331450149:-240,1352009749:-300,1362899749:-240,1383459349:-300,1394349349:-240,1414908949:-300,1425798949:-240,1446358549:-300,1457853349:-240,1478412949:-300,1489302949:-240,1509862549:-300,1520752549:-240,1541312149:-300,1552202149:-240},
"America/Montserrat":{1245251750:-240},
"America/Nassau":{1245251751:-240,1257056151:-300,1268550951:-240,1289110551:-300,1300000551:-240,1320560151:-300,1331450151:-240,1352009751:-300,1362899751:-240,1383459351:-300,1394349351:-240,1414908951:-300,1425798951:-240,1446358551:-300,1457853351:-240,1478412951:-300,1489302951:-240,1509862551:-300,1520752551:-240,1541312151:-300,1552202151:-240},
"America/New York":{1245251751:-240,1257056151:-300,1268550951:-240,1289110551:-300,1300000551:-240,1320560151:-300,1331450151:-240,1352009751:-300,1362899751:-240,1383459351:-300,1394349351:-240,1414908951:-300,1425798951:-240,1446358551:-300,1457853351:-240,1478412951:-300,1489302951:-240,1509862551:-300,1520752551:-240,1541312151:-300,1552202151:-240},
"America/Nipigon":{1245251752:-240,1257056152:-300,1268550952:-240,1289110552:-300,1300000552:-240,1320560152:-300,1331450152:-240,1352009752:-300,1362899752:-240,1383459352:-300,1394349352:-240,1414908952:-300,1425798952:-240,1446358552:-300,1457853352:-240,1478412952:-300,1489302952:-240,1509862552:-300,1520752552:-240,1541312152:-300,1552202152:-240},
"America/Nome":{1245251753:-480,1257070553:-540,1268565353:-480,1289124953:-540,1300014953:-480,1320574553:-540,1331464553:-480,1352024153:-540,1362914153:-480,1383473753:-540,1394363753:-480,1414923353:-540,1425813353:-480,1446372953:-540,1457867753:-480,1478427353:-540,1489317353:-480,1509876953:-540,1520766953:-480,1541326553:-540,1552216553:-480},
"America/Noronha":{1245251754:-120},
"America/North Dakota/Center":{1245251754:-300,1257059754:-360,1268554554:-300,1289114154:-360,1300004154:-300,1320563754:-360,1331453754:-300,1352013354:-360,1362903354:-300,1383462954:-360,1394352954:-300,1414912554:-360,1425802554:-300,1446362154:-360,1457856954:-300,1478416554:-360,1489306554:-300,1509866154:-360,1520756154:-300,1541315754:-360,1552205754:-300},
"America/North Dakota/New Salem":{1245251755:-300,1257059755:-360,1268554555:-300,1289114155:-360,1300004155:-300,1320563755:-360,1331453755:-300,1352013355:-360,1362903355:-300,1383462955:-360,1394352955:-300,1414912555:-360,1425802555:-300,1446362155:-360,1457856955:-300,1478416555:-360,1489306555:-300,1509866155:-360,1520756155:-300,1541315755:-360,1552205755:-300},
"America/Panama":{1245251756:-300},
"America/Pangnirtung":{1245251757:-240,1257056157:-300,1268550957:-240,1289110557:-300,1300000557:-240,1320560157:-300,1331450157:-240,1352009757:-300,1362899757:-240,1383459357:-300,1394349357:-240,1414908957:-300,1425798957:-240,1446358557:-300,1457853357:-240,1478412957:-300,1489302957:-240,1509862557:-300,1520752557:-240,1541312157:-300,1552202157:-240},
"America/Paramaribo":{1245251757:-180},
"America/Phoenix":{1245251758:-420},
"America/Port of Spain":{1245251759:-240},
"America/Port-au-Prince":{1245251760:-300},
"America/Porto Velho":{1245251760:-240},
"America/Puerto Rico":{1245251761:-240},
"America/Rainy River":{1245251762:-300,1257059762:-360,1268554562:-300,1289114162:-360,1300004162:-300,1320563762:-360,1331453762:-300,1352013362:-360,1362903362:-300,1383462962:-360,1394352962:-300,1414912562:-360,1425802562:-300,1446362162:-360,1457856962:-300,1478416562:-360,1489306562:-300,1509866162:-360,1520756162:-300,1541315762:-360,1552205762:-300},
"America/Rankin Inlet":{1245251762:-300,1257059762:-360,1268554562:-300,1289114162:-360,1300004162:-300,1320563762:-360,1331453762:-300,1352013362:-360,1362903362:-300,1383462962:-360,1394352962:-300,1414912562:-360,1425802562:-300,1446362162:-360,1457856962:-300,1478416562:-360,1489306562:-300,1509866162:-360,1520756162:-300,1541315762:-360,1552205762:-300},
"America/Recife":{1245251763:-180},
"America/Regina":{1245251764:-360},
"America/Resolute":{1245251765:-300},
"America/Rio Branco":{1245251765:-240},
"America/Santarem":{1245251766:-180},
"America/Santiago":{1245251767:-240,1255234567:-180,1268536567:-240,1286684167:-180,1299986167:-240,1318133767:-180,1331435767:-240,1350188167:-180,1362885367:-240,1381637767:-180,1394334967:-240,1413087367:-180,1426389367:-240,1444536967:-180,1457838967:-240,1475986567:-180,1489288567:-240,1508040967:-180,1520738167:-240,1539490567:-180,1552187767:-240},
"America/Santo Domingo":{1245251768:-240},
"America/Sao Paulo":{1245251768:-180,1255835768:-120,1266718568:-180,1287285368:-120,1298168168:-180,1318734968:-120,1330222568:-180,1350789368:-120,1361067368:-180,1382238968:-120,1392516968:-180,1413688568:-120,1424571368:-180,1445138168:-120,1456020968:-180,1476587768:-120,1487470568:-180,1508037368:-120,1518920168:-180,1540091768:-120,1550369768:-180},
"America/Scoresbysund":{1245251769:0,1256433369:-60,1269738969:0,1288487769:-60,1301188569:0,1319937369:-60,1332638169:0,1351386969:-60,1364692569:0,1382836569:-60,1396142169:0,1414286169:-60,1427591769:0,1445735769:-60,1459041369:0,1477790169:-60,1490490969:0,1509239769:-60,1521940569:0,1540689369:-60,1553994969:0},
"America/St Johns":{1245251770:-150,1257045370:-210,1268540170:-150,1289099770:-210,1299989770:-150,1320549370:-210,1331439370:-150,1351998970:-210,1362888970:-150,1383448570:-210,1394338570:-150,1414898170:-210,1425788170:-150,1446347770:-210,1457842570:-150,1478402170:-210,1489292170:-150,1509851770:-210,1520741770:-150,1541301370:-210,1552191370:-150},
"America/St Kitts":{1245251771:-240},
"America/St Lucia":{1245251771:-240},
"America/St Thomas":{1245251772:-240},
"America/St Vincent":{1245251773:-240},
"America/Swift Current":{1245251773:-360},
"America/Tegucigalpa":{1245251774:-360},
"America/Thule":{1245251775:-180,1257052575:-240,1268547375:-180,1289106975:-240,1299996975:-180,1320556575:-240,1331446575:-180,1352006175:-240,1362896175:-180,1383455775:-240,1394345775:-180,1414905375:-240,1425795375:-180,1446354975:-240,1457849775:-180,1478409375:-240,1489299375:-180,1509858975:-240,1520748975:-180,1541308575:-240,1552198575:-180},
"America/Thunder Bay":{1245251776:-240,1257056176:-300,1268550976:-240,1289110576:-300,1300000576:-240,1320560176:-300,1331450176:-240,1352009776:-300,1362899776:-240,1383459376:-300,1394349376:-240,1414908976:-300,1425798976:-240,1446358576:-300,1457853376:-240,1478412976:-300,1489302976:-240,1509862576:-300,1520752576:-240,1541312176:-300,1552202176:-240},
"America/Tijuana":{1245251776:-420,1256462176:-480,1270376176:-420,1288516576:-480,1301825776:-420,1319966176:-480,1333275376:-420,1351415776:-480,1365329776:-420,1382865376:-480,1396779376:-420,1414314976:-480,1428228976:-420,1445764576:-480,1459678576:-420,1477818976:-480,1491128176:-420,1509268576:-480,1522577776:-420,1540718176:-480,1554632176:-420},
"America/Toronto":{1245251777:-240,1257056177:-300,1268550977:-240,1289110577:-300,1300000577:-240,1320560177:-300,1331450177:-240,1352009777:-300,1362899777:-240,1383459377:-300,1394349377:-240,1414908977:-300,1425798977:-240,1446358577:-300,1457853377:-240,1478412977:-300,1489302977:-240,1509862577:-300,1520752577:-240,1541312177:-300,1552202177:-240},
"America/Tortola":{1245251778:-240},
"America/Vancouver":{1245251779:-420,1257066979:-480,1268561779:-420,1289121379:-480,1300011379:-420,1320570979:-480,1331460979:-420,1352020579:-480,1362910579:-420,1383470179:-480,1394360179:-420,1414919779:-480,1425809779:-420,1446369379:-480,1457864179:-420,1478423779:-480,1489313779:-420,1509873379:-480,1520763379:-420,1541322979:-480,1552212979:-420},
"America/Whitehorse":{1245251779:-420,1257066979:-480,1268561779:-420,1289121379:-480,1300011379:-420,1320570979:-480,1331460979:-420,1352020579:-480,1362910579:-420,1383470179:-480,1394360179:-420,1414919779:-480,1425809779:-420,1446369379:-480,1457864179:-420,1478423779:-480,1489313779:-420,1509873379:-480,1520763379:-420,1541322979:-480,1552212979:-420},
"America/Winnipeg":{1245251780:-300,1257059780:-360,1268554580:-300,1289114180:-360,1300004180:-300,1320563780:-360,1331453780:-300,1352013380:-360,1362903380:-300,1383462980:-360,1394352980:-300,1414912580:-360,1425802580:-300,1446362180:-360,1457856980:-300,1478416580:-360,1489306580:-300,1509866180:-360,1520756180:-300,1541315780:-360,1552205780:-300},
"America/Yakutat":{1245251781:-480,1257070581:-540,1268565381:-480,1289124981:-540,1300014981:-480,1320574581:-540,1331464581:-480,1352024181:-540,1362914181:-480,1383473781:-540,1394363781:-480,1414923381:-540,1425813381:-480,1446372981:-540,1457867781:-480,1478427381:-540,1489317381:-480,1509876981:-540,1520766981:-480,1541326581:-540,1552216581:-480},
"America/Yellowknife":{1245251782:-360,1257063382:-420,1268558182:-360,1289117782:-420,1300007782:-360,1320567382:-420,1331457382:-360,1352016982:-420,1362906982:-360,1383466582:-420,1394356582:-360,1414916182:-420,1425806182:-360,1446365782:-420,1457860582:-360,1478420182:-420,1489310182:-360,1509869782:-420,1520759782:-360,1541319382:-420,1552209382:-360},
"Antarctica/Casey":{1245251782:480},
"Antarctica/Davis":{1245251783:420},
"Antarctica/DumontDUrville":{1245251784:600},
"Antarctica/Mawson":{1245251784:360},
"Antarctica/McMurdo":{1245251785:720,1253974585:780,1270304185:720,1285424185:780,1301753785:720,1316873785:780,1333203385:720,1348928185:780,1365257785:720,1380377785:780,1396707385:720,1411827385:780,1428156985:720,1443276985:780,1459606585:720,1474726585:780,1491056185:720,1506176185:780,1522505785:720,1538230585:780,1554560185:720},
"Antarctica/Palmer":{1245251786:-240,1255234586:-180,1268536586:-240,1286684186:-180,1299986186:-240,1318133786:-180,1331435786:-240,1350188186:-180,1362885386:-240,1381637786:-180,1394334986:-240,1413087386:-180,1426389386:-240,1444536986:-180,1457838986:-240,1475986586:-180,1489288586:-240,1508040986:-180,1520738186:-240,1539490586:-180,1552187786:-240},
"Antarctica/Rothera":{1245251787:-180},
"Antarctica/Syowa":{1245251787:180},
"Antarctica/Vostok":{1245251788:360},
"Asia/Aden":{1245251789:180},
"Asia/Almaty":{1245251789:360},
"Asia/Amman":{1245251790:180,1256854590:120,1269555390:180,1288304190:120,1301609790:180,1319753790:120,1333059390:180,1351203390:120,1364508990:180,1382652990:120,1395958590:180,1414707390:120,1427408190:180,1446156990:120,1459462590:180,1477606590:120,1490912190:180,1509056190:120,1522361790:180,1540505790:120,1553811390:180},
"Asia/Anadyr":{1245251791:780,1256393791:720,1269699391:780,1288448191:720,1301148991:780,1319897791:720,1332598591:780,1351347391:720,1364652991:780,1382796991:720,1396102591:780,1414246591:720,1427552191:780,1445696191:720,1459001791:780,1477750591:720,1490451391:780,1509200191:720,1521900991:780,1540649791:720,1553955391:780},
"Asia/Aqtau":{1245251792:300},
"Asia/Aqtobe":{1245251792:300},
"Asia/Ashgabat":{1245251793:300},
"Asia/Baghdad":{1245251794:180},
"Asia/Bahrain":{1245251795:180},
"Asia/Baku":{1245251795:300,1256429795:240,1269735395:300,1288484195:240,1301184995:300,1319933795:240,1332634595:300,1351383395:240,1364688995:300,1382832995:240,1396138595:300,1414282595:240,1427588195:300,1445732195:240,1459037795:300,1477786595:240,1490487395:300,1509236195:240,1521936995:300,1540685795:240,1553991395:300},
"Asia/Bangkok":{1245251796:420},
"Asia/Beirut":{1245251797:180,1256418997:120,1269728197:180,1288473397:120,1301177797:180,1319922997:120,1332627397:180,1351372597:120,1364681797:180,1382822197:120,1396131397:180,1414271797:120,1427580997:180,1445721397:120,1459030597:180,1477775797:120,1490480197:180,1509225397:120,1521929797:180,1540674997:120,1553984197:180},
"Asia/Bishkek":{1245251797:360},
"Asia/Brunei":{1245251798:480},
"Asia/Choibalsan":{1245251799:480},
"Asia/Chongqing":{1245251800:480},
"Asia/Colombo":{1245251800:330},
"Asia/Damascus":{1245251801:180,1257023801:120,1269555401:180,1288559801:120,1301005001:180,1320095801:120,1333059401:180,1351718201:120,1364509001:180,1383254201:120,1395958601:180,1414790201:120,1427408201:180,1446326201:120,1458857801:180,1477948601:120,1490912201:180,1509484601:120,1522361801:180,1541020601:120,1553811401:180},
"Asia/Dhaka":{1245251802:360,1245435402:420},
"Asia/Dili":{1245251803:540},
"Asia/Dubai":{1245251803:240},
"Asia/Dushanbe":{1245251804:300},
"Asia/Gaza":{1245251805:180,1254093405:120,1269555405:180,1285543005:120,1301005005:180,1316992605:120,1333059405:180,1348442205:120,1364509005:180,1380496605:120,1395958605:180,1411946205:120,1427408205:180,1443395805:120,1458857805:180,1474845405:120,1490912205:180,1506295005:120,1522361805:180,1537744605:120,1553811405:180},
"Asia/Harbin":{1245251805:480},
"Asia/Ho Chi Minh":{1245251806:420},
"Asia/Hong Kong":{1245251807:480},
"Asia/Hovd":{1245251808:420},
"Asia/Irkutsk":{1245251808:540,1256408208:480,1269713808:540,1288462608:480,1301163408:540,1319912208:480,1332613008:540,1351361808:480,1364667408:540,1382811408:480,1396117008:540,1414261008:480,1427566608:540,1445710608:480,1459016208:540,1477765008:480,1490465808:540,1509214608:480,1521915408:540,1540664208:480,1553969808:540},
"Asia/Jakarta":{1245251809:420},
"Asia/Jayapura":{1245251810:540},
"Asia/Jerusalem":{1245251811:180,1254007011:120,1269562611:180,1284247011:120,1301617011:180,1317511011:120,1333066611:180,1348355811:120,1364516211:180,1378595811:120,1395965811:180,1411859811:120,1427415411:180,1442704611:120,1459469811:180,1475968611:120,1490919411:180,1506208611:120,1522369011:180,1537053411:120,1553818611:180},
"Asia/Kabul":{1245251811:270},
"Asia/Kamchatka":{1245251812:780,1256393812:720,1269699412:780,1288448212:720,1301149012:780,1319897812:720,1332598612:780,1351347412:720,1364653012:780,1382797012:720,1396102612:780,1414246612:720,1427552212:780,1445696212:720,1459001812:780,1477750612:720,1490451412:780,1509200212:720,1521901012:780,1540649812:720,1553955412:780},
"Asia/Karachi":{1245251813:360,1257013013:300},
"Asia/Kashgar":{1245251813:480},
"Asia/Kathmandu":{1245251814:345},
"Asia/Kolkata":{1245251815:330},
"Asia/Krasnoyarsk":{1245251816:480,1256411816:420,1269717416:480,1288466216:420,1301167016:480,1319915816:420,1332616616:480,1351365416:420,1364671016:480,1382815016:420,1396120616:480,1414264616:420,1427570216:480,1445714216:420,1459019816:480,1477768616:420,1490469416:480,1509218216:420,1521919016:480,1540667816:420,1553973416:480},
"Asia/Kuala Lumpur":{1245251816:480},
"Asia/Kuching":{1245251817:480},
"Asia/Kuwait":{1245251818:180},
"Asia/Macau":{1245251818:480},
"Asia/Magadan":{1245251819:720,1256397419:660,1269703019:720,1288451819:660,1301152619:720,1319901419:660,1332602219:720,1351351019:660,1364656619:720,1382800619:660,1396106219:720,1414250219:660,1427555819:720,1445699819:660,1459005419:720,1477754219:660,1490455019:720,1509203819:660,1521904619:720,1540653419:660,1553959019:720},
"Asia/Makassar":{1245251820:480},
"Asia/Manila":{1245251821:480},
"Asia/Muscat":{1245251821:240},
"Asia/New Delhi":{1245251822:330},
"Asia/Nicosia":{1245251823:180,1256433423:120,1269739023:180,1288487823:120,1301188623:180,1319937423:120,1332638223:180,1351387023:120,1364692623:180,1382836623:120,1396142223:180,1414286223:120,1427591823:180,1445735823:120,1459041423:180,1477790223:120,1490491023:180,1509239823:120,1521940623:180,1540689423:120,1553995023:180},
"Asia/Novosibirsk":{1245251823:420,1256415423:360,1269721023:420,1288469823:360,1301170623:420,1319919423:360,1332620223:420,1351369023:360,1364674623:420,1382818623:360,1396124223:420,1414268223:360,1427573823:420,1445717823:360,1459023423:420,1477772223:360,1490473023:420,1509221823:360,1521922623:420,1540671423:360,1553977023:420},
"Asia/Omsk":{1245251824:420,1256415424:360,1269721024:420,1288469824:360,1301170624:420,1319919424:360,1332620224:420,1351369024:360,1364674624:420,1382818624:360,1396124224:420,1414268224:360,1427573824:420,1445717824:360,1459023424:420,1477772224:360,1490473024:420,1509221824:360,1521922624:420,1540671424:360,1553977024:420},
"Asia/Oral":{1245251825:300},
"Asia/Phnom Penh":{1245251826:420},
"Asia/Pontianak":{1245251826:420},
"Asia/Pyongyang":{1245251827:540},
"Asia/Qatar":{1245251828:180},
"Asia/Qyzylorda":{1245251829:360},
"Asia/Rangoon":{1245251829:390},
"Asia/Riyadh":{1245251830:180},
"Asia/Sakhalin":{1245251831:660,1256401031:600,1269706631:660,1288455431:600,1301156231:660,1319905031:600,1332605831:660,1351354631:600,1364660231:660,1382804231:600,1396109831:660,1414253831:600,1427559431:660,1445703431:600,1459009031:660,1477757831:600,1490458631:660,1509207431:600,1521908231:660,1540657031:600,1553962631:660},
"Asia/Samarkand":{1245251831:300},
"Asia/Seoul":{1245251832:540},
"Asia/Shanghai":{1245251833:480},
"Asia/Singapore":{1245251834:480},
"Asia/Taipei":{1245251834:480},
"Asia/Tashkent":{1245251835:300},
"Asia/Tbilisi":{1245251836:240},
"Asia/Tehran":{1245251836:270,1253564236:210,1269206236:270,1285100236:210,1300742236:270,1316636236:210,1332278236:270,1348172236:210,1363900636:270,1379794636:210,1395436636:270,1411330636:210,1426972636:270,1442866636:210,1458508636:270,1474402636:210,1490131036:270,1506025036:210,1521667036:270,1537561036:210,1553203036:270},
"Asia/Thimphu":{1245251837:360},
"Asia/Tokyo":{1245251838:540},
"Asia/Ulaanbaatar":{1245251839:480},
"Asia/Urumqi":{1245251839:480},
"Asia/Vientiane":{1245251840:420},
"Asia/Vladivostok":{1245251841:660,1256401041:600,1269706641:660,1288455441:600,1301156241:660,1319905041:600,1332605841:660,1351354641:600,1364660241:660,1382804241:600,1396109841:660,1414253841:600,1427559441:660,1445703441:600,1459009041:660,1477757841:600,1490458641:660,1509207441:600,1521908241:660,1540657041:600,1553962641:660},
"Asia/Yakutsk":{1245251842:600,1256404642:540,1269710242:600,1288459042:540,1301159842:600,1319908642:540,1332609442:600,1351358242:540,1364663842:600,1382807842:540,1396113442:600,1414257442:540,1427563042:600,1445707042:540,1459012642:600,1477761442:540,1490462242:600,1509211042:540,1521911842:600,1540660642:540,1553966242:600},
"Asia/Yekaterinburg":{1245251842:360,1256419042:300,1269724642:360,1288473442:300,1301174242:360,1319923042:300,1332623842:360,1351372642:300,1364678242:360,1382822242:300,1396127842:360,1414271842:300,1427577442:360,1445721442:300,1459027042:360,1477775842:300,1490476642:360,1509225442:300,1521926242:360,1540675042:300,1553980642:360},
"Asia/Yerevan":{1245251843:300,1256422643:240,1269728243:300,1288477043:240,1301177843:300,1319926643:240,1332627443:300,1351376243:240,1364681843:300,1382825843:240,1396131443:300,1414275443:240,1427581043:300,1445725043:240,1459030643:300,1477779443:240,1490480243:300,1509229043:240,1521929843:300,1540678643:240,1553984243:300},
"Atlantic/Azores":{1245251844:0,1256433444:-60,1269739044:0,1288487844:-60,1301188644:0,1319937444:-60,1332638244:0,1351387044:-60,1364692644:0,1382836644:-60,1396142244:0,1414286244:-60,1427591844:0,1445735844:-60,1459041444:0,1477790244:-60,1490491044:0,1509239844:-60,1521940644:0,1540689444:-60,1553995044:0},
"Atlantic/Bermuda":{1245251845:-180,1257052645:-240,1268547445:-180,1289107045:-240,1299997045:-180,1320556645:-240,1331446645:-180,1352006245:-240,1362896245:-180,1383455845:-240,1394345845:-180,1414905445:-240,1425795445:-180,1446355045:-240,1457849845:-180,1478409445:-240,1489299445:-180,1509859045:-240,1520749045:-180,1541308645:-240,1552198645:-180},
"Atlantic/Canary":{1245251845:60,1256433445:0,1269739045:60,1288487845:0,1301188645:60,1319937445:0,1332638245:60,1351387045:0,1364692645:60,1382836645:0,1396142245:60,1414286245:0,1427591845:60,1445735845:0,1459041445:60,1477790245:0,1490491045:60,1509239845:0,1521940645:60,1540689445:0,1553995045:60},
"Atlantic/Cape Verde":{1245251846:-60},
"Atlantic/Faroe":{1245251847:60,1256433447:0,1269739047:60,1288487847:0,1301188647:60,1319937447:0,1332638247:60,1351387047:0,1364692647:60,1382836647:0,1396142247:60,1414286247:0,1427591847:60,1445735847:0,1459041447:60,1477790247:0,1490491047:60,1509239847:0,1521940647:60,1540689447:0,1553995047:60},
"Atlantic/Madeira":{1245251847:60,1256433447:0,1269739047:60,1288487847:0,1301188647:60,1319937447:0,1332638247:60,1351387047:0,1364692647:60,1382836647:0,1396142247:60,1414286247:0,1427591847:60,1445735847:0,1459041447:60,1477790247:0,1490491047:60,1509239847:0,1521940647:60,1540689447:0,1553995047:60},
"Atlantic/Reykjavik":{1245251848:0},
"Atlantic/South Georgia":{1245251849:-120},
"Atlantic/St Helena":{1245251849:0},
"Atlantic/Stanley":{1245251850:-240,1252217850:-180,1271567850:-240,1283667450:-180,1303017450:-240,1315117050:-180,1334467050:-240,1346566650:-180,1366521450:-240,1378016250:-180,1397971050:-240,1410070650:-180,1429420650:-240,1441520250:-180,1460870250:-240,1472969850:-180,1492319850:-240,1504419450:-180,1523769450:-240,1535869050:-180,1555823850:-240},
"Australia/Adelaide":{1245251851:570,1254590251:630,1270315051:570,1286039851:630,1301764651:570,1317489451:630,1333214251:570,1349543851:630,1365268651:570,1380993451:630,1396718251:570,1412443051:630,1428167851:570,1443892651:630,1459617451:570,1475342251:630,1491067051:570,1506791851:630,1522516651:570,1538846251:630,1554571051:570},
"Australia/Brisbane":{1245251852:600},
"Australia/Broken Hill":{1245251852:570,1254590252:630,1270315052:570,1286039852:630,1301764652:570,1317489452:630,1333214252:570,1349543852:630,1365268652:570,1380993452:630,1396718252:570,1412443052:630,1428167852:570,1443892652:630,1459617452:570,1475342252:630,1491067052:570,1506791852:630,1522516652:570,1538846252:630,1554571052:570},
"Australia/Currie":{1245251853:600,1254586653:660,1270311453:600,1286036253:660,1301761053:600,1317485853:660,1333210653:600,1349540253:660,1365265053:600,1380989853:660,1396714653:600,1412439453:660,1428164253:600,1443889053:660,1459613853:600,1475338653:660,1491063453:600,1506788253:660,1522513053:600,1538842653:660,1554567453:600},
"Australia/Darwin":{1245251854:570},
"Australia/Eucla":{1245251855:525},
"Australia/Hobart":{1245251855:600,1254586655:660,1270311455:600,1286036255:660,1301761055:600,1317485855:660,1333210655:600,1349540255:660,1365265055:600,1380989855:660,1396714655:600,1412439455:660,1428164255:600,1443889055:660,1459613855:600,1475338655:660,1491063455:600,1506788255:660,1522513055:600,1538842655:660,1554567455:600},
"Australia/Lindeman":{1245251856:600},
"Australia/Lord Howe":{1245251857:630,1254586657:660,1270307857:630,1286036257:660,1301757457:630,1317485857:660,1333207057:630,1349540257:660,1365261457:630,1380989857:660,1396711057:630,1412439457:660,1428160657:630,1443889057:660,1459610257:630,1475338657:660,1491059857:630,1506788257:660,1522509457:630,1538842657:660,1554563857:630},
"Australia/Melbourne":{1245251857:600,1254586657:660,1270311457:600,1286036257:660,1301761057:600,1317485857:660,1333210657:600,1349540257:660,1365265057:600,1380989857:660,1396714657:600,1412439457:660,1428164257:600,1443889057:660,1459613857:600,1475338657:660,1491063457:600,1506788257:660,1522513057:600,1538842657:660,1554567457:600},
"Australia/Perth":{1245251858:480},
"Australia/Sydney":{1245251859:600,1254586659:660,1270311459:600,1286036259:660,1301761059:600,1317485859:660,1333210659:600,1349540259:660,1365265059:600,1380989859:660,1396714659:600,1412439459:660,1428164259:600,1443889059:660,1459613859:600,1475338659:660,1491063459:600,1506788259:660,1522513059:600,1538842659:660,1554567459:600},
"Europe/Amsterdam":{1245251860:120,1256433460:60,1269739060:120,1288487860:60,1301188660:120,1319937460:60,1332638260:120,1351387060:60,1364692660:120,1382836660:60,1396142260:120,1414286260:60,1427591860:120,1445735860:60,1459041460:120,1477790260:60,1490491060:120,1509239860:60,1521940660:120,1540689460:60,1553995060:120},
"Europe/Andorra":{1245251860:120,1256433460:60,1269739060:120,1288487860:60,1301188660:120,1319937460:60,1332638260:120,1351387060:60,1364692660:120,1382836660:60,1396142260:120,1414286260:60,1427591860:120,1445735860:60,1459041460:120,1477790260:60,1490491060:120,1509239860:60,1521940660:120,1540689460:60,1553995060:120},
"Europe/Athens":{1245251861:180,1256433461:120,1269739061:180,1288487861:120,1301188661:180,1319937461:120,1332638261:180,1351387061:120,1364692661:180,1382836661:120,1396142261:180,1414286261:120,1427591861:180,1445735861:120,1459041461:180,1477790261:120,1490491061:180,1509239861:120,1521940661:180,1540689461:120,1553995061:180},
"Europe/Belgrade":{1245251862:120,1256433462:60,1269739062:120,1288487862:60,1301188662:120,1319937462:60,1332638262:120,1351387062:60,1364692662:120,1382836662:60,1396142262:120,1414286262:60,1427591862:120,1445735862:60,1459041462:120,1477790262:60,1490491062:120,1509239862:60,1521940662:120,1540689462:60,1553995062:120},
"Europe/Berlin":{1245251863:120,1256433463:60,1269739063:120,1288487863:60,1301188663:120,1319937463:60,1332638263:120,1351387063:60,1364692663:120,1382836663:60,1396142263:120,1414286263:60,1427591863:120,1445735863:60,1459041463:120,1477790263:60,1490491063:120,1509239863:60,1521940663:120,1540689463:60,1553995063:120},
"Europe/Brussels":{1245251863:120,1256433463:60,1269739063:120,1288487863:60,1301188663:120,1319937463:60,1332638263:120,1351387063:60,1364692663:120,1382836663:60,1396142263:120,1414286263:60,1427591863:120,1445735863:60,1459041463:120,1477790263:60,1490491063:120,1509239863:60,1521940663:120,1540689463:60,1553995063:120},
"Europe/Bucharest":{1245251864:180,1256433464:120,1269739064:180,1288487864:120,1301188664:180,1319937464:120,1332638264:180,1351387064:120,1364692664:180,1382836664:120,1396142264:180,1414286264:120,1427591864:180,1445735864:120,1459041464:180,1477790264:120,1490491064:180,1509239864:120,1521940664:180,1540689464:120,1553995064:180},
"Europe/Budapest":{1245251865:120,1256433465:60,1269739065:120,1288487865:60,1301188665:120,1319937465:60,1332638265:120,1351387065:60,1364692665:120,1382836665:60,1396142265:120,1414286265:60,1427591865:120,1445735865:60,1459041465:120,1477790265:60,1490491065:120,1509239865:60,1521940665:120,1540689465:60,1553995065:120},
"Europe/Chisinau":{1245251866:180,1256433466:120,1269739066:180,1288487866:120,1301188666:180,1319937466:120,1332638266:180,1351387066:120,1364692666:180,1382836666:120,1396142266:180,1414286266:120,1427591866:180,1445735866:120,1459041466:180,1477790266:120,1490491066:180,1509239866:120,1521940666:180,1540689466:120,1553995066:180},
"Europe/Copenhagen":{1245251866:120,1256433466:60,1269739066:120,1288487866:60,1301188666:120,1319937466:60,1332638266:120,1351387066:60,1364692666:120,1382836666:60,1396142266:120,1414286266:60,1427591866:120,1445735866:60,1459041466:120,1477790266:60,1490491066:120,1509239866:60,1521940666:120,1540689466:60,1553995066:120},
"Europe/Dublin":{1245251867:60,1256433467:0,1269739067:60,1288487867:0,1301188667:60,1319937467:0,1332638267:60,1351387067:0,1364692667:60,1382836667:0,1396142267:60,1414286267:0,1427591867:60,1445735867:0,1459041467:60,1477790267:0,1490491067:60,1509239867:0,1521940667:60,1540689467:0,1553995067:60},
"Europe/Gibraltar":{1245251868:120,1256433468:60,1269739068:120,1288487868:60,1301188668:120,1319937468:60,1332638268:120,1351387068:60,1364692668:120,1382836668:60,1396142268:120,1414286268:60,1427591868:120,1445735868:60,1459041468:120,1477790268:60,1490491068:120,1509239868:60,1521940668:120,1540689468:60,1553995068:120},
"Europe/Helsinki":{1245251869:180,1256433469:120,1269739069:180,1288487869:120,1301188669:180,1319937469:120,1332638269:180,1351387069:120,1364692669:180,1382836669:120,1396142269:180,1414286269:120,1427591869:180,1445735869:120,1459041469:180,1477790269:120,1490491069:180,1509239869:120,1521940669:180,1540689469:120,1553995069:180},
"Europe/Istanbul":{1245251869:180,1256433469:120,1269739069:180,1288487869:120,1301188669:180,1319937469:120,1332638269:180,1351387069:120,1364692669:180,1382836669:120,1396142269:180,1414286269:120,1427591869:180,1445735869:120,1459041469:180,1477790269:120,1490491069:180,1509239869:120,1521940669:180,1540689469:120,1553995069:180},
"Europe/Kaliningrad":{1245251870:180,1256429870:120,1269735470:180,1288484270:120,1301185070:180,1319933870:120,1332634670:180,1351383470:120,1364689070:180,1382833070:120,1396138670:180,1414282670:120,1427588270:180,1445732270:120,1459037870:180,1477786670:120,1490487470:180,1509236270:120,1521937070:180,1540685870:120,1553991470:180},
"Europe/Kiev":{1245251871:180,1256433471:120,1269739071:180,1288487871:120,1301188671:180,1319937471:120,1332638271:180,1351387071:120,1364692671:180,1382836671:120,1396142271:180,1414286271:120,1427591871:180,1445735871:120,1459041471:180,1477790271:120,1490491071:180,1509239871:120,1521940671:180,1540689471:120,1553995071:180},
"Europe/Lisbon":{1245251872:60,1256433472:0,1269739072:60,1288487872:0,1301188672:60,1319937472:0,1332638272:60,1351387072:0,1364692672:60,1382836672:0,1396142272:60,1414286272:0,1427591872:60,1445735872:0,1459041472:60,1477790272:0,1490491072:60,1509239872:0,1521940672:60,1540689472:0,1553995072:60},
"Europe/London":{1245251872:60,1256433472:0,1269739072:60,1288487872:0,1301188672:60,1319937472:0,1332638272:60,1351387072:0,1364692672:60,1382836672:0,1396142272:60,1414286272:0,1427591872:60,1445735872:0,1459041472:60,1477790272:0,1490491072:60,1509239872:0,1521940672:60,1540689472:0,1553995072:60},
"Europe/Luxembourg":{1245251873:120,1256433473:60,1269739073:120,1288487873:60,1301188673:120,1319937473:60,1332638273:120,1351387073:60,1364692673:120,1382836673:60,1396142273:120,1414286273:60,1427591873:120,1445735873:60,1459041473:120,1477790273:60,1490491073:120,1509239873:60,1521940673:120,1540689473:60,1553995073:120},
"Europe/Madrid":{1245251874:120,1256433474:60,1269739074:120,1288487874:60,1301188674:120,1319937474:60,1332638274:120,1351387074:60,1364692674:120,1382836674:60,1396142274:120,1414286274:60,1427591874:120,1445735874:60,1459041474:120,1477790274:60,1490491074:120,1509239874:60,1521940674:120,1540689474:60,1553995074:120},
"Europe/Malta":{1245251875:120,1256433475:60,1269739075:120,1288487875:60,1301188675:120,1319937475:60,1332638275:120,1351387075:60,1364692675:120,1382836675:60,1396142275:120,1414286275:60,1427591875:120,1445735875:60,1459041475:120,1477790275:60,1490491075:120,1509239875:60,1521940675:120,1540689475:60,1553995075:120},
"Europe/Minsk":{1245251875:180,1256429875:120,1269735475:180,1288484275:120,1301185075:180,1319933875:120,1332634675:180,1351383475:120,1364689075:180,1382833075:120,1396138675:180,1414282675:120,1427588275:180,1445732275:120,1459037875:180,1477786675:120,1490487475:180,1509236275:120,1521937075:180,1540685875:120,1553991475:180},
"Europe/Monaco":{1245251876:120,1256433476:60,1269739076:120,1288487876:60,1301188676:120,1319937476:60,1332638276:120,1351387076:60,1364692676:120,1382836676:60,1396142276:120,1414286276:60,1427591876:120,1445735876:60,1459041476:120,1477790276:60,1490491076:120,1509239876:60,1521940676:120,1540689476:60,1553995076:120},
"Europe/Moscow":{1245251877:240,1256426277:180,1269731877:240,1288480677:180,1301181477:240,1319930277:180,1332631077:240,1351379877:180,1364685477:240,1382829477:180,1396135077:240,1414279077:180,1427584677:240,1445728677:180,1459034277:240,1477783077:180,1490483877:240,1509232677:180,1521933477:240,1540682277:180,1553987877:240},
"Europe/Oslo":{1245251878:120,1256433478:60,1269739078:120,1288487878:60,1301188678:120,1319937478:60,1332638278:120,1351387078:60,1364692678:120,1382836678:60,1396142278:120,1414286278:60,1427591878:120,1445735878:60,1459041478:120,1477790278:60,1490491078:120,1509239878:60,1521940678:120,1540689478:60,1553995078:120},
"Europe/Paris":{1245251878:120,1256433478:60,1269739078:120,1288487878:60,1301188678:120,1319937478:60,1332638278:120,1351387078:60,1364692678:120,1382836678:60,1396142278:120,1414286278:60,1427591878:120,1445735878:60,1459041478:120,1477790278:60,1490491078:120,1509239878:60,1521940678:120,1540689478:60,1553995078:120},
"Europe/Prague":{1245251879:120,1256433479:60,1269739079:120,1288487879:60,1301188679:120,1319937479:60,1332638279:120,1351387079:60,1364692679:120,1382836679:60,1396142279:120,1414286279:60,1427591879:120,1445735879:60,1459041479:120,1477790279:60,1490491079:120,1509239879:60,1521940679:120,1540689479:60,1553995079:120},
"Europe/Riga":{1245251880:180,1256433480:120,1269739080:180,1288487880:120,1301188680:180,1319937480:120,1332638280:180,1351387080:120,1364692680:180,1382836680:120,1396142280:180,1414286280:120,1427591880:180,1445735880:120,1459041480:180,1477790280:120,1490491080:180,1509239880:120,1521940680:180,1540689480:120,1553995080:180},
"Europe/Rome":{1245251881:120,1256433481:60,1269739081:120,1288487881:60,1301188681:120,1319937481:60,1332638281:120,1351387081:60,1364692681:120,1382836681:60,1396142281:120,1414286281:60,1427591881:120,1445735881:60,1459041481:120,1477790281:60,1490491081:120,1509239881:60,1521940681:120,1540689481:60,1553995081:120},
"Europe/Samara":{1245251881:300,1256422681:240,1269728281:300,1288477081:240,1301177881:300,1319926681:240,1332627481:300,1351376281:240,1364681881:300,1382825881:240,1396131481:300,1414275481:240,1427581081:300,1445725081:240,1459030681:300,1477779481:240,1490480281:300,1509229081:240,1521929881:300,1540678681:240,1553984281:300},
"Europe/Simferopol":{1245251882:180,1256433482:120,1269739082:180,1288487882:120,1301188682:180,1319937482:120,1332638282:180,1351387082:120,1364692682:180,1382836682:120,1396142282:180,1414286282:120,1427591882:180,1445735882:120,1459041482:180,1477790282:120,1490491082:180,1509239882:120,1521940682:180,1540689482:120,1553995082:180},
"Europe/Sofia":{1245251883:180,1256433483:120,1269739083:180,1288487883:120,1301188683:180,1319937483:120,1332638283:180,1351387083:120,1364692683:180,1382836683:120,1396142283:180,1414286283:120,1427591883:180,1445735883:120,1459041483:180,1477790283:120,1490491083:180,1509239883:120,1521940683:180,1540689483:120,1553995083:180},
"Europe/Stockholm":{1245251884:120,1256433484:60,1269739084:120,1288487884:60,1301188684:120,1319937484:60,1332638284:120,1351387084:60,1364692684:120,1382836684:60,1396142284:120,1414286284:60,1427591884:120,1445735884:60,1459041484:120,1477790284:60,1490491084:120,1509239884:60,1521940684:120,1540689484:60,1553995084:120},
"Europe/Tallinn":{1245251884:180,1256433484:120,1269739084:180,1288487884:120,1301188684:180,1319937484:120,1332638284:180,1351387084:120,1364692684:180,1382836684:120,1396142284:180,1414286284:120,1427591884:180,1445735884:120,1459041484:180,1477790284:120,1490491084:180,1509239884:120,1521940684:180,1540689484:120,1553995084:180},
"Europe/Tirane":{1245251885:120,1256433485:60,1269739085:120,1288487885:60,1301188685:120,1319937485:60,1332638285:120,1351387085:60,1364692685:120,1382836685:60,1396142285:120,1414286285:60,1427591885:120,1445735885:60,1459041485:120,1477790285:60,1490491085:120,1509239885:60,1521940685:120,1540689485:60,1553995085:120},
"Europe/Uzhgorod":{1245251886:180,1256433486:120,1269739086:180,1288487886:120,1301188686:180,1319937486:120,1332638286:180,1351387086:120,1364692686:180,1382836686:120,1396142286:180,1414286286:120,1427591886:180,1445735886:120,1459041486:180,1477790286:120,1490491086:180,1509239886:120,1521940686:180,1540689486:120,1553995086:180},
"Europe/Vaduz":{1245251887:120,1256433487:60,1269739087:120,1288487887:60,1301188687:120,1319937487:60,1332638287:120,1351387087:60,1364692687:120,1382836687:60,1396142287:120,1414286287:60,1427591887:120,1445735887:60,1459041487:120,1477790287:60,1490491087:120,1509239887:60,1521940687:120,1540689487:60,1553995087:120},
"Europe/Vienna":{1245251887:120,1256433487:60,1269739087:120,1288487887:60,1301188687:120,1319937487:60,1332638287:120,1351387087:60,1364692687:120,1382836687:60,1396142287:120,1414286287:60,1427591887:120,1445735887:60,1459041487:120,1477790287:60,1490491087:120,1509239887:60,1521940687:120,1540689487:60,1553995087:120},
"Europe/Vilnius":{1245251888:180,1256433488:120,1269739088:180,1288487888:120,1301188688:180,1319937488:120,1332638288:180,1351387088:120,1364692688:180,1382836688:120,1396142288:180,1414286288:120,1427591888:180,1445735888:120,1459041488:180,1477790288:120,1490491088:180,1509239888:120,1521940688:180,1540689488:120,1553995088:180},
"Europe/Volgograd":{1245251889:240,1256426289:180,1269731889:240,1288480689:180,1301181489:240,1319930289:180,1332631089:240,1351379889:180,1364685489:240,1382829489:180,1396135089:240,1414279089:180,1427584689:240,1445728689:180,1459034289:240,1477783089:180,1490483889:240,1509232689:180,1521933489:240,1540682289:180,1553987889:240},
"Europe/Warsaw":{1245251890:120,1256433490:60,1269739090:120,1288487890:60,1301188690:120,1319937490:60,1332638290:120,1351387090:60,1364692690:120,1382836690:60,1396142290:120,1414286290:60,1427591890:120,1445735890:60,1459041490:120,1477790290:60,1490491090:120,1509239890:60,1521940690:120,1540689490:60,1553995090:120},
"Europe/Zaporozhye":{1245251890:180,1256433490:120,1269739090:180,1288487890:120,1301188690:180,1319937490:120,1332638290:180,1351387090:120,1364692690:180,1382836690:120,1396142290:180,1414286290:120,1427591890:180,1445735890:120,1459041490:180,1477790290:120,1490491090:180,1509239890:120,1521940690:180,1540689490:120,1553995090:180},
"Europe/Zurich":{1245251891:120,1256433491:60,1269739091:120,1288487891:60,1301188691:120,1319937491:60,1332638291:120,1351387091:60,1364692691:120,1382836691:60,1396142291:120,1414286291:60,1427591891:120,1445735891:60,1459041491:120,1477790291:60,1490491091:120,1509239891:60,1521940691:120,1540689491:60,1553995091:120},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-09":{0:-540},
"GMT-08":{0:-480},
"GMT-07":{0:-420},
"GMT-06":{0:-360},
"GMT-05":{0:-300},
"GMT-04":{0:-240},
"GMT-03":{0:-180},
"GMT-02":{0:-120},
"GMT-01":{0:-60},
"GMT+00":{0:0},
"GMT+01":{0:60},
"GMT+02":{0:120},
"GMT+03":{0:180},
"GMT+04":{0:240},
"GMT+05":{0:300},
"GMT+06":{0:360},
"GMT+07":{0:420},
"GMT+08":{0:480},
"GMT+09":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660},
"GMT+12":{0:720},
"Indian Ocean/Antananarivo":{1245251892:180},
"Indian Ocean/Chagos":{1245251893:360},
"Indian Ocean/Christmas":{1245251893:420},
"Indian Ocean/Cocos":{1245251894:390},
"Indian Ocean/Comoro":{1245251894:180},
"Indian Ocean/Kerguelen":{1245251895:300},
"Indian Ocean/Mahe":{1245251896:240},
"Indian Ocean/Maldives":{1245251896:300},
"Indian Ocean/Mauritius":{1245251897:240,1256422697:300,1269728297:240,1288477097:300,1301177897:240,1319926697:300,1332627497:240,1351376297:300,1364681897:240,1382825897:300,1396131497:240,1414275497:300,1427581097:240,1445725097:300,1459030697:240,1477779497:300,1490480297:240,1509229097:300,1521929897:240,1540678697:300,1553984297:240},
"Indian Ocean/Mayotte":{1245251898:180},
"Indian Ocean/Reunion":{1245251898:240},
"Pacific/Apia":{1245251899:-660},
"Pacific/Auckland":{1245251900:720,1253974700:780,1270304300:720,1285424300:780,1301753900:720,1316873900:780,1333203500:720,1348928300:780,1365257900:720,1380377900:780,1396707500:720,1411827500:780,1428157100:720,1443277100:780,1459606700:720,1474726700:780,1491056300:720,1506176300:780,1522505900:720,1538230700:780,1554560300:720},
"Pacific/Chatham":{1245251901:765,1253974701:825,1270304301:765,1285424301:825,1301753901:765,1316873901:825,1333203501:765,1348928301:825,1365257901:765,1380377901:825,1396707501:765,1411827501:825,1428157101:765,1443277101:825,1459606701:765,1474726701:825,1491056301:765,1506176301:825,1522505901:765,1538230701:825,1554560301:765},
"Pacific/Easter":{1245251901:-360,1255234701:-300,1268536701:-360,1286684301:-300,1299986301:-360,1318133901:-300,1331435901:-360,1350188301:-300,1362885501:-360,1381637901:-300,1394335101:-360,1413087501:-300,1426389501:-360,1444537101:-300,1457839101:-360,1475986701:-300,1489288701:-360,1508041101:-300,1520738301:-360,1539490701:-300,1552187901:-360},
"Pacific/Efate":{1245251902:660},
"Pacific/Enderbury":{1245251903:780},
"Pacific/Fakaofo":{1245251903:-600},
"Pacific/Fiji":{1245251904:720},
"Pacific/Funafuti":{1245251905:720},
"Pacific/Galapagos":{1245251905:-360},
"Pacific/Gambier":{1245251906:-540},
"Pacific/Guadalcanal":{1245251906:660},
"Pacific/Guam":{1245251907:600},
"Pacific/Honolulu":{1245251908:-600},
"Pacific/Johnston":{1245251909:-600},
"Pacific/Kiritimati":{1245251909:840},
"Pacific/Kosrae":{1245251910:660},
"Pacific/Kwajalein":{1245251910:720},
"Pacific/Majuro":{1245251911:720},
"Pacific/Marquesas":{1245251912:-570},
"Pacific/Midway":{1245251912:-660},
"Pacific/Nauru":{1245251913:720},
"Pacific/Niue":{1245251914:-660},
"Pacific/Norfolk":{1245251915:690},
"Pacific/Noumea":{1245251915:660},
"Pacific/Pago Pago":{1245251916:-660},
"Pacific/Palau":{1245251917:540},
"Pacific/Pitcairn":{1245251917:-480},
"Pacific/Ponape":{1245251918:660},
"Pacific/Port Moresby":{1245251918:600},
"Pacific/Rarotonga":{1245251919:-600},
"Pacific/Saipan":{1245251919:600},
"Pacific/Tahiti":{1245251920:-600},
"Pacific/Tarawa":{1245251921:720},
"Pacific/Tongatapu":{1245251921:780},
"Pacific/Truk":{1245251922:600},
"Pacific/Wake":{1245251922:720},
"Pacific/Wallis":{1245251923:720},
"UTC":{1245251923:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// All email addresses get stripped from this file before publishing

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  // Update these with the correct format for your country
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
  // Don't modify xxVER or xxDATE
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
  // If you want credit for translation, translate "Languagename translation by your name"
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "A newer version of Presto's Clock is available. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Update now!</a>",
  // Replace English with the name of your language in your language
  't_languagename':    'English'
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Bulgarian translation by Artyom Ivanov <artyom.ivanov@abv.bg>

"bg": {
  "daysLong":          ["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],
  "daysShort":         ["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],
  "monthsLong":        ["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],
  "monthsShort":       ["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Ное","Дек"],
  "defaultDateFormat": "D M d",
  "defaultTimeFormat": "H:i:s",
  "t_dateformat":      "Формат на датата:",
  "t_timeformat":      "Формат на часа:",
  "t_timezone":        "Часови пояс:",
  "t_localtime":       "Местно време",
  "t_bottomlabel":     "Текст:",
  "t_optional":        "(допълнително)",
  "t_examples":        "Примери:",
  "t_date":            "Дата:",
  "t_time":            "Час:",
  "t_label":           "Текст:",
  "t_dateexamples":    "D M d = Съб Апр 07<br>n/j l = 4/7 Събота",
  "t_timeexamples":    "g:i a = 5:44 pm<br>H:i = 17:44",
  "t_labelexamples":   "София, GMT+2",
  "t_formathelp":      '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a>',
  "t_formathelplong":  '<a href="http://us.php.net/manual/bg/function.date.php">Справка за формата</a> (не се поддържат: T, e, o, u)',
  "t_version":         "Версия xxVER (xxDATE)",
  "t_about":           "За гаджета",
  "t_translateby":     "Превод на български ArTy  &copy;",
  "t_language":        "Език:",
  "t_charity":         'Presto\'s Clock това е Charityware. Ако приложението Ви е харесало, моля направете дарение за да подпомогнете нуждаещите се по света. Повече <a href="http://prestonhunt.com/story/110">информация за да направите дарение</a> може да намерите на страницата на проекта.',
  "t_fontfamily1":     "Шрифт:",
  "t_fontfamily2":     "Шрифт:",
  "t_fontfamily3":     "Шрифт:",
  "t_fontsize1":       "Размер на шрифта:",
  "t_fontsize2":       "Размер на шрифта:",
  "t_fontsize3":       "Размер на шрифта:",
  "t_fontcolor1":      "Цвят на шрифта:",
  "t_fontcolor2":      "Цвят на шрифта:",
  "t_fontcolor3":      "Цвят на шрифта:",
  "t_date2":           "Дата",
  "t_time2":           "Час",
  "t_label2":          "Текст",
  "t_swap_labels":     "Размени местата на датата и текста",
  "t_tab1":            "Настройки",
  "t_tab2":            "Външност",
  "t_tab3":            "За програмата",
  "t_copyright":       "Copyright 2009 Preston Hunt",
  "t_languagename":    "Български"
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto\'s Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'Einstellungen',
  't_tab2':            'Darstellung',
  't_tab3':            'Über',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Portuguese translation by Mateus Scherer Cardoso <matschcar@terra.com.br>
pt: {
  daysLong:      ["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"],
  daysShort:      ["dom","seg","ter","qua","qui","sex","sáb"],
  monthsLong:     ["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],
  monthsShort:    ["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],
  defaultDateFormat:    "D M d",
  defaultTimeFormat:    "h:i a",
  t_dateformat:         "Formato da data:",
  t_timeformat:         "Formato do horário:",
  t_timezone:           "Fuso horário:",
  t_localtime:          "Horário local",
  t_bottomlabel:        "Linha inferior:",
  t_optional:           "(opcional)",
  t_examples:           "Exemplos:",
  t_date:               "Data:",
  t_time:               "Horário:",
  t_label:              "Linha:",
  t_dateexamples:       "D M d = Sáb Abr 07<br>n/j l = 4/7 Sábado",
  t_timeexamples:       "g:i a = 5:44 pm<br>H:i = 17:44",
  t_labelexamples:      "Portland, Tokyo, GMT+2",
  t_formathelp:         '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a>',
  t_formathelplong:     '<a href="http://us.php.net/manual/en/function.date.php">Ajuda do formato</a> (não suportado: T, e, o, u)',
  t_version:            "Versão xxVER (xxDATE)",
  t_about:              "Sobre este gadget",
  t_translateby:        "",
  t_language:           "Idioma:",
  t_charity:            'Presto\'s Clock é Charityware. Se você gostar, por favor considere uma doação para o menos afortunado do mundo. Veja a página do projeto para <a href="http://prestonhunt.com/story/110">informações de como doar</a>.',
  t_fontfamily1:        "Fonte:",
  t_fontfamily2:        "Fonte:",
  t_fontfamily3:        "Fonte:",
  t_fontsize1:          "Tamanho da fonte:",
  t_fontsize2:          "Tamanho da fonte:",
  t_fontsize3:          "Tamanho da fonte:",
  t_fontcolor1:         "Cor da fonte:",
  t_fontcolor2:         "Cor da fonte:",
  t_fontcolor3:         "Cor da fonte:",
  t_date2:              "Data",
  t_time2:              "Horário",
  t_label2:             "Linha",
  t_swap_labels:        "Trocar a data com a linha inferior",
  t_tab1:               "Geral",
  t_tab2:               "Aparência",
  t_tab3:               "Sobre",
  t_copyright:          "Copyright 2009 Preston Hunt",
  t_update:             'Uma nova versão do Presto\'s Clock está disponível. <a href="http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51">Atualize agora!</a>',
  t_languagename:       "Português"
},


// Преведено на македонски од Виктор Манчев <viktor.mancev@gmail.com>
'mk': {
	'daysLong':    ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"],
	'daysShort':   ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"],
	'monthsLong':  ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"],
	'monthsShort': ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Изглед на датумот:',
	't_timeformat':     'Изглед на часовникот:',
	't_timezone':       'Временска зона:',
	't_localtime':      'Локално време',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнително)',
	't_examples':       'Примери:',
	't_date':           'Датум:',
	't_time':           'Време:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Саб 07 Апр<br>n/j l = 4/7 Сабота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Скопје, UTC+1',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Помош за изгледот</a> (не се поддржани: T, e, o, u)',
	't_version':        'Верзија xxVER (xxDATE)',
	't_about':          'За овој gadget',
	't_translateby':    'Преведено на македонски од Виктор Манчев',
	't_language':       'Јазик:',
	't_charity':        "Presto's Clock претставува Charityware. Ако ви се допаѓа и често го користите, ве молам размислете да донирате на помалку среќните. Посетете ја веб-страницата на проектов <a href=\"http://prestonhunt.com/story/110\">за повеќе информации</a>.",
	't_fontfamily1':     'Фонт:',
	't_fontfamily2':     'Фонт:',
	't_fontfamily3':     'Фонт:',
	't_fontsize1':       'Големина на фонтот:',
	't_fontsize2':       'Големина на фонтот:',
	't_fontsize3':       'Големина на фонтот:',
	't_fontcolor1':      'Боја на фонтот:',
	't_fontcolor2':      'Боја на фонтот:',
	't_fontcolor3':      'Боја на фонтот:',
//	't_background':  		'Позадина',
	't_date2': 				 	 'Датум',
	't_time2': 				 	 'Време',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Промени ги местата на датумот и текстот',
  't_tab1':            'Општо', 
  't_tab2':            'Изглеd',
  't_tab3':            'Информации',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_update':          "Достапна е понова верзија од Presto's Clock. <a href=\"http://gallery.live.com/liveItemDetail.aspx?li=348e5816-f95b-493e-a6df-a03980e34e51\">Превземете ја!</a>",
  't_languagename':    'Mакедонски'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0; // force recalculation of width

  gTime.opacity = G.mainTimeFormat ? 100 : 0;
  gTime.value = formatDate( G.mainTimeFormat, now );
  gTime.height = gTime.width = 0; // force recalculation of width

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;
  okToUpdate = true;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  showIfUpdateAvailable();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}

function getHttpAsText( url ) {
  try {
    var req = new ActiveXObject( "Microsoft.XMLHTTP" );
    req.open( 'GET', url, false );
    req.send();
    if ( req.status == 200 ) {
      return req.responseText;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

function isUpdateAvailable() {
  var newestText = getHttpAsText( 'http://prestonhunt.com/m/2009/prestosidebarclock.version?cacheBuster=' + Math.random() );
  if ( newestText === false ) return false;
  var currentText = 'xxVER';

  var newestVersion = parseFloat( newestText );
  var currentVersion = parseFloat( currentText );

  return newestVersion > currentVersion;
}

function showIfUpdateAvailable() {
  if ( isUpdateAvailable() ) {
    document.getElementById( 't_update' ).style.display = 'block';
  }
}
