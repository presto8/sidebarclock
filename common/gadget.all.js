// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                return new Date (this.Y () - 1, 11, 31).formatDate ("W");
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata2007k = { 
"Africa/Abidjan":{ 1207604087:0 },
"Africa/Accra":{ 1207604087:0 },
"Africa/Addis_Ababa":{ 1207604088:180 },
"Africa/Algiers":{ 1207604089:60 },
"Africa/Asmara":{ 1207604090:180 },
"Africa/Asmera":{ 1207604090:180 },
"Africa/Bamako":{ 1207604091:0 },
"Africa/Bangui":{ 1207604092:60 },
"Africa/Banjul":{ 1207604092:0 },
"Africa/Bissau":{ 1207604093:0 },
"Africa/Blantyre":{ 1207604094:120 },
"Africa/Brazzaville":{ 1207604094:60 },
"Africa/Bujumbura":{ 1207604095:120 },
"Africa/Cairo":{ 1207604096:120 , 1209076496:180 , 1219959296:120 , 1240526096:180 , 1251408896:120 , 1272580496:180 , 1282858496:120 , 1304030096:180 , 1314308096:120 , 1335479696:180 , 1346362496:120 , 1366929296:180 , 1377812096:120 , 1398378896:180 , 1409261696:120 , 1429828496:180 , 1440711296:120 , 1461882896:180 , 1472160896:120 , 1493332496:180 , 1504215296:120 },
"Africa/Casablanca":{ 1207604096:0 },
"Africa/Ceuta":{ 1207604097:120 , 1224984897:60 , 1238290497:120 , 1256434497:60 , 1269740097:120 , 1288488897:60 , 1301189697:120 , 1319938497:60 , 1332639297:120 , 1351388097:60 , 1364693697:120 , 1382837697:60 , 1396143297:120 , 1414287297:60 , 1427592897:120 , 1445736897:60 , 1459042497:120 , 1477791297:60 , 1490492097:120 , 1509240897:60 , 1521941697:120 },
"Africa/Conakry":{ 1207604098:0 },
"Africa/Dakar":{ 1207604099:0 },
"Africa/Dar_es_Salaam":{ 1207604099:180 },
"Africa/Djibouti":{ 1207604100:180 },
"Africa/Douala":{ 1207604101:60 },
"Africa/El_Aaiun":{ 1207604101:0 },
"Africa/Freetown":{ 1207604102:0 },
"Africa/Gaborone":{ 1207604103:120 },
"Africa/Harare":{ 1207604104:120 },
"Africa/Johannesburg":{ 1207604104:120 },
"Africa/Kampala":{ 1207604105:180 },
"Africa/Khartoum":{ 1207604106:180 },
"Africa/Kigali":{ 1207604106:120 },
"Africa/Kinshasa":{ 1207604107:60 },
"Africa/Lagos":{ 1207604107:60 },
"Africa/Libreville":{ 1207604108:60 },
"Africa/Lome":{ 1207604109:0 },
"Africa/Luanda":{ 1207604109:60 },
"Africa/Lubumbashi":{ 1207604110:120 },
"Africa/Lusaka":{ 1207604110:120 },
"Africa/Malabo":{ 1207604111:60 },
"Africa/Maputo":{ 1207604112:120 },
"Africa/Maseru":{ 1207604113:120 },
"Africa/Mbabane":{ 1207604113:120 },
"Africa/Mogadishu":{ 1207604114:180 },
"Africa/Monrovia":{ 1207604115:0 },
"Africa/Nairobi":{ 1207604115:180 },
"Africa/Ndjamena":{ 1207604116:60 },
"Africa/Niamey":{ 1207604117:60 },
"Africa/Nouakchott":{ 1207604117:0 },
"Africa/Ouagadougou":{ 1207604118:0 },
"Africa/Porto-Novo":{ 1207604119:60 },
"Africa/Sao_Tome":{ 1207604120:0 },
"Africa/Timbuktu":{ 1207604120:0 },
"Africa/Tripoli":{ 1207604121:120 },
"Africa/Tunis":{ 1207604122:120 , 1224984922:60 , 1238290522:120 , 1256434522:60 , 1269740122:120 , 1288488922:60 , 1301189722:120 , 1319938522:60 , 1332639322:120 , 1351388122:60 , 1364693722:120 , 1382837722:60 , 1396143322:120 , 1414287322:60 , 1427592922:120 , 1445736922:60 , 1459042522:120 , 1477791322:60 , 1490492122:120 , 1509240922:60 , 1521941722:120 },
"Africa/Windhoek":{ 1207604122:60 , 1220751322:120 , 1238891722:60 , 1252200922:120 , 1270341322:60 , 1283650522:120 , 1301790922:60 , 1315100122:120 , 1333240522:60 , 1346549722:120 , 1365294922:60 , 1377999322:120 , 1396744522:60 , 1410053722:120 , 1428194122:60 , 1441503322:120 , 1459643722:60 , 1472952922:120 , 1491093322:60 , 1504402522:120 , 1522542922:60 },
"America/Adak":{ 1207604123:-540 , 1225625723:-600 , 1236515723:-540 , 1257075323:-600 , 1268570123:-540 , 1289129723:-600 , 1300019723:-540 , 1320579323:-600 , 1331469323:-540 , 1352028923:-600 , 1362918923:-540 , 1383478523:-600 , 1394368523:-540 , 1414928123:-600 , 1425818123:-540 , 1446377723:-600 , 1457872523:-540 , 1478432123:-600 , 1489322123:-540 , 1509881723:-600 , 1520771723:-540 },
"America/Anchorage":{ 1207604124:-480 , 1225622124:-540 , 1236512124:-480 , 1257071724:-540 , 1268566524:-480 , 1289126124:-540 , 1300016124:-480 , 1320575724:-540 , 1331465724:-480 , 1352025324:-540 , 1362915324:-480 , 1383474924:-540 , 1394364924:-480 , 1414924524:-540 , 1425814524:-480 , 1446374124:-540 , 1457868924:-480 , 1478428524:-540 , 1489318524:-480 , 1509878124:-540 , 1520768124:-480 },
"America/Anguilla":{ 1207604125:-240 },
"America/Antigua":{ 1207604125:-240 },
"America/Araguaina":{ 1207604126:-180 },
"America/Aruba":{ 1207604127:-240 },
"America/Asuncion":{ 1207604128:-240 , 1224390928:-180 , 1236483328:-240 , 1255840528:-180 , 1268537728:-240 , 1287290128:-180 , 1299987328:-240 , 1318739728:-180 , 1331436928:-240 , 1350794128:-180 , 1362886528:-240 , 1382243728:-180 , 1394336128:-240 , 1413693328:-180 , 1425785728:-240 , 1445142928:-180 , 1457840128:-240 , 1476592528:-180 , 1489289728:-240 , 1508042128:-180 , 1520739328:-240 },
"America/Atikokan":{ 1207604128:-300 },
"America/Atka":{ 1207604129:-540 , 1225625729:-600 , 1236515729:-540 , 1257075329:-600 , 1268570129:-540 , 1289129729:-600 , 1300019729:-540 , 1320579329:-600 , 1331469329:-540 , 1352028929:-600 , 1362918929:-540 , 1383478529:-600 , 1394368529:-540 , 1414928129:-600 , 1425818129:-540 , 1446377729:-600 , 1457872529:-540 , 1478432129:-600 , 1489322129:-540 , 1509881729:-600 , 1520771729:-540 },
"America/Bahia":{ 1207604130:-180 },
"America/Barbados":{ 1207604131:-240 },
"America/Belem":{ 1207604131:-180 },
"America/Belize":{ 1207604132:-360 },
"America/Blanc-Sablon":{ 1207604133:-240 },
"America/Boa_Vista":{ 1207604134:-240 },
"America/Bogota":{ 1207604134:-300 },
"America/Boise":{ 1207604135:-360 , 1225614935:-420 , 1236504935:-360 , 1257064535:-420 , 1268559335:-360 , 1289118935:-420 , 1300008935:-360 , 1320568535:-420 , 1331458535:-360 , 1352018135:-420 , 1362908135:-360 , 1383467735:-420 , 1394357735:-360 , 1414917335:-420 , 1425807335:-360 , 1446366935:-420 , 1457861735:-360 , 1478421335:-420 , 1489311335:-360 , 1509870935:-420 , 1520760935:-360 },
"America/Buenos_Aires":{ 1207604136:-180 , 1223177736:-120 , 1237084536:-180 , 1254627336:-120 , 1269138936:-180 , 1286076936:-120 , 1300588536:-180 , 1317526536:-120 , 1332038136:-180 , 1349580936:-120 , 1363487736:-180 , 1381030536:-120 , 1394937336:-180 , 1412480136:-120 , 1426386936:-180 , 1443929736:-120 , 1458441336:-180 , 1475379336:-120 , 1489890936:-180 , 1506828936:-120 , 1521340536:-180 },
"America/Cambridge_Bay":{ 1207604136:-360 , 1225614936:-420 , 1236504936:-360 , 1257064536:-420 , 1268559336:-360 , 1289118936:-420 , 1300008936:-360 , 1320568536:-420 , 1331458536:-360 , 1352018136:-420 , 1362908136:-360 , 1383467736:-420 , 1394357736:-360 , 1414917336:-420 , 1425807336:-360 , 1446366936:-420 , 1457861736:-360 , 1478421336:-420 , 1489311336:-360 , 1509870936:-420 , 1520760936:-360 },
"America/Campo_Grande":{ 1207604137:-240 , 1223786137:-180 , 1234668937:-240 , 1255235737:-180 , 1266723337:-240 , 1286685337:-180 , 1298172937:-240 , 1318134937:-180 , 1329622537:-240 , 1350189337:-180 , 1361072137:-240 , 1381638937:-180 , 1392521737:-240 , 1413088537:-180 , 1423971337:-240 , 1444538137:-180 , 1456025737:-240 , 1475987737:-180 , 1487475337:-240 , 1507437337:-180 , 1518924937:-240 },
"America/Cancun":{ 1207604138:-300 , 1225006538:-360 , 1238920538:-300 , 1256456138:-360 , 1270370138:-300 , 1288510538:-360 , 1301819738:-300 , 1319960138:-360 , 1333269338:-300 , 1351409738:-360 , 1365323738:-300 , 1382859338:-360 , 1396773338:-300 , 1414308938:-360 , 1428222938:-300 , 1445758538:-360 , 1459672538:-300 , 1477812938:-360 , 1491122138:-300 , 1509262538:-360 , 1522571738:-300 },
"America/Caracas":{ 1207604139:-270 },
"America/Catamarca":{ 1207604139:-180 , 1223177739:-120 , 1237084539:-180 , 1254627339:-120 , 1269138939:-180 , 1286076939:-120 , 1300588539:-180 , 1317526539:-120 , 1332038139:-180 , 1349580939:-120 , 1363487739:-180 , 1381030539:-120 , 1394937339:-180 , 1412480139:-120 , 1426386939:-180 , 1443929739:-120 , 1458441339:-180 , 1475379339:-120 , 1489890939:-180 , 1506828939:-120 , 1521340539:-180 },
"America/Cayenne":{ 1207604140:-180 },
"America/Cayman":{ 1207604141:-300 },
"America/Chicago":{ 1207604142:-300 , 1225611342:-360 , 1236501342:-300 , 1257060942:-360 , 1268555742:-300 , 1289115342:-360 , 1300005342:-300 , 1320564942:-360 , 1331454942:-300 , 1352014542:-360 , 1362904542:-300 , 1383464142:-360 , 1394354142:-300 , 1414913742:-360 , 1425803742:-300 , 1446363342:-360 , 1457858142:-300 , 1478417742:-360 , 1489307742:-300 , 1509867342:-360 , 1520757342:-300 },
"America/Chihuahua":{ 1207604142:-360 , 1225010142:-420 , 1238924142:-360 , 1256459742:-420 , 1270373742:-360 , 1288514142:-420 , 1301823342:-360 , 1319963742:-420 , 1333272942:-360 , 1351413342:-420 , 1365327342:-360 , 1382862942:-420 , 1396776942:-360 , 1414312542:-420 , 1428226542:-360 , 1445762142:-420 , 1459676142:-360 , 1477816542:-420 , 1491125742:-360 , 1509266142:-420 , 1522575342:-360 },
"America/Coral_Harbour":{ 1207604143:-300 },
"America/Cordoba":{ 1207604144:-180 , 1223177744:-120 , 1237084544:-180 , 1254627344:-120 , 1269138944:-180 , 1286076944:-120 , 1300588544:-180 , 1317526544:-120 , 1332038144:-180 , 1349580944:-120 , 1363487744:-180 , 1381030544:-120 , 1394937344:-180 , 1412480144:-120 , 1426386944:-180 , 1443929744:-120 , 1458441344:-180 , 1475379344:-120 , 1489890944:-180 , 1506828944:-120 , 1521340544:-180 },
"America/Costa_Rica":{ 1207604145:-360 },
"America/Cuiaba":{ 1207604145:-240 , 1223786145:-180 , 1234668945:-240 , 1255235745:-180 , 1266723345:-240 , 1286685345:-180 , 1298172945:-240 , 1318134945:-180 , 1329622545:-240 , 1350189345:-180 , 1361072145:-240 , 1381638945:-180 , 1392521745:-240 , 1413088545:-180 , 1423971345:-240 , 1444538145:-180 , 1456025745:-240 , 1475987745:-180 , 1487475345:-240 , 1507437345:-180 , 1518924945:-240 },
"America/Curacao":{ 1207604146:-240 },
"America/Danmarkshavn":{ 1207604147:0 },
"America/Dawson":{ 1207604148:-420 , 1225618548:-480 , 1236508548:-420 , 1257068148:-480 , 1268562948:-420 , 1289122548:-480 , 1300012548:-420 , 1320572148:-480 , 1331462148:-420 , 1352021748:-480 , 1362911748:-420 , 1383471348:-480 , 1394361348:-420 , 1414920948:-480 , 1425810948:-420 , 1446370548:-480 , 1457865348:-420 , 1478424948:-480 , 1489314948:-420 , 1509874548:-480 , 1520764548:-420 },
"America/Dawson_Creek":{ 1207604148:-420 },
"America/Denver":{ 1207604149:-360 , 1225614949:-420 , 1236504949:-360 , 1257064549:-420 , 1268559349:-360 , 1289118949:-420 , 1300008949:-360 , 1320568549:-420 , 1331458549:-360 , 1352018149:-420 , 1362908149:-360 , 1383467749:-420 , 1394357749:-360 , 1414917349:-420 , 1425807349:-360 , 1446366949:-420 , 1457861749:-360 , 1478421349:-420 , 1489311349:-360 , 1509870949:-420 , 1520760949:-360 },
"America/Detroit":{ 1207604150:-240 , 1225607750:-300 , 1236497750:-240 , 1257057350:-300 , 1268552150:-240 , 1289111750:-300 , 1300001750:-240 , 1320561350:-300 , 1331451350:-240 , 1352010950:-300 , 1362900950:-240 , 1383460550:-300 , 1394350550:-240 , 1414910150:-300 , 1425800150:-240 , 1446359750:-300 , 1457854550:-240 , 1478414150:-300 , 1489304150:-240 , 1509863750:-300 , 1520753750:-240 },
"America/Dominica":{ 1207604151:-240 },
"America/Edmonton":{ 1207604151:-360 , 1225614951:-420 , 1236504951:-360 , 1257064551:-420 , 1268559351:-360 , 1289118951:-420 , 1300008951:-360 , 1320568551:-420 , 1331458551:-360 , 1352018151:-420 , 1362908151:-360 , 1383467751:-420 , 1394357751:-360 , 1414917351:-420 , 1425807351:-360 , 1446366951:-420 , 1457861751:-360 , 1478421351:-420 , 1489311351:-360 , 1509870951:-420 , 1520760951:-360 },
"America/Eirunepe":{ 1207604152:-300 },
"America/El_Salvador":{ 1207604153:-360 },
"America/Ensenada":{ 1207604153:-420 , 1225013753:-480 , 1238927753:-420 , 1256463353:-480 , 1270377353:-420 , 1288517753:-480 , 1301826953:-420 , 1319967353:-480 , 1333276553:-420 , 1351416953:-480 , 1365330953:-420 , 1382866553:-480 , 1396780553:-420 , 1414316153:-480 , 1428230153:-420 , 1445765753:-480 , 1459679753:-420 , 1477820153:-480 , 1491129353:-420 , 1509269753:-480 , 1522578953:-420 },
"America/Fort_Wayne":{ 1207604154:-240 , 1225607754:-300 , 1236497754:-240 , 1257057354:-300 , 1268552154:-240 , 1289111754:-300 , 1300001754:-240 , 1320561354:-300 , 1331451354:-240 , 1352010954:-300 , 1362900954:-240 , 1383460554:-300 , 1394350554:-240 , 1414910154:-300 , 1425800154:-240 , 1446359754:-300 , 1457854554:-240 , 1478414154:-300 , 1489304154:-240 , 1509863754:-300 , 1520753754:-240 },
"America/Fortaleza":{ 1207604155:-180 },
"America/Glace_Bay":{ 1207604156:-180 , 1225604156:-240 , 1236494156:-180 , 1257053756:-240 , 1268548556:-180 , 1289108156:-240 , 1299998156:-180 , 1320557756:-240 , 1331447756:-180 , 1352007356:-240 , 1362897356:-180 , 1383456956:-240 , 1394346956:-180 , 1414906556:-240 , 1425796556:-180 , 1446356156:-240 , 1457850956:-180 , 1478410556:-240 , 1489300556:-180 , 1509860156:-240 , 1520750156:-180 },
"America/Godthab":{ 1207604157:-120 , 1224984957:-180 , 1238290557:-120 , 1256434557:-180 , 1269740157:-120 , 1288488957:-180 , 1301189757:-120 , 1319938557:-180 , 1332639357:-120 , 1351388157:-180 , 1364693757:-120 , 1382837757:-180 , 1396143357:-120 , 1414287357:-180 , 1427592957:-120 , 1445736957:-180 , 1459042557:-120 , 1477791357:-180 , 1490492157:-120 , 1509240957:-180 , 1521941757:-120 },
"America/Goose_Bay":{ 1207604157:-180 , 1225596957:-240 , 1236486957:-180 , 1257046557:-240 , 1268541357:-180 , 1289100957:-240 , 1299990957:-180 , 1320550557:-240 , 1331440557:-180 , 1352000157:-240 , 1362890157:-180 , 1383449757:-240 , 1394339757:-180 , 1414899357:-240 , 1425789357:-180 , 1446348957:-240 , 1457843757:-180 , 1478403357:-240 , 1489293357:-180 , 1509852957:-240 , 1520742957:-180 },
"America/Grand_Turk":{ 1207604158:-240 , 1225607758:-300 , 1236497758:-240 , 1257057358:-300 , 1268552158:-240 , 1289111758:-300 , 1300001758:-240 , 1320561358:-300 , 1331451358:-240 , 1352010958:-300 , 1362900958:-240 , 1383460558:-300 , 1394350558:-240 , 1414910158:-300 , 1425800158:-240 , 1446359758:-300 , 1457854558:-240 , 1478414158:-300 , 1489304158:-240 , 1509863758:-300 , 1520753758:-240 },
"America/Grenada":{ 1207604159:-240 },
"America/Guadeloupe":{ 1207604159:-240 },
"America/Guatemala":{ 1207604160:-360 },
"America/Guayaquil":{ 1207604161:-300 },
"America/Guyana":{ 1207604162:-240 },
"America/Halifax":{ 1207604162:-180 , 1225604162:-240 , 1236494162:-180 , 1257053762:-240 , 1268548562:-180 , 1289108162:-240 , 1299998162:-180 , 1320557762:-240 , 1331447762:-180 , 1352007362:-240 , 1362897362:-180 , 1383456962:-240 , 1394346962:-180 , 1414906562:-240 , 1425796562:-180 , 1446356162:-240 , 1457850962:-180 , 1478410562:-240 , 1489300562:-180 , 1509860162:-240 , 1520750162:-180 },
"America/Havana":{ 1207604163:-240 , 1224999363:-300 , 1236490563:-240 , 1256448963:-300 , 1268544963:-240 , 1288503363:-300 , 1299994563:-240 , 1319952963:-300 , 1331444163:-240 , 1351402563:-300 , 1362893763:-240 , 1382852163:-300 , 1394343363:-240 , 1414301763:-300 , 1425792963:-240 , 1445751363:-300 , 1457847363:-240 , 1477805763:-300 , 1489296963:-240 , 1509255363:-300 , 1520746563:-240 },
"America/Hermosillo":{ 1207604164:-420 },
"America/Indianapolis":{ 1207604165:-240 , 1225607765:-300 , 1236497765:-240 , 1257057365:-300 , 1268552165:-240 , 1289111765:-300 , 1300001765:-240 , 1320561365:-300 , 1331451365:-240 , 1352010965:-300 , 1362900965:-240 , 1383460565:-300 , 1394350565:-240 , 1414910165:-300 , 1425800165:-240 , 1446359765:-300 , 1457854565:-240 , 1478414165:-300 , 1489304165:-240 , 1509863765:-300 , 1520753765:-240 },
"America/Inuvik":{ 1207604165:-360 , 1225614965:-420 , 1236504965:-360 , 1257064565:-420 , 1268559365:-360 , 1289118965:-420 , 1300008965:-360 , 1320568565:-420 , 1331458565:-360 , 1352018165:-420 , 1362908165:-360 , 1383467765:-420 , 1394357765:-360 , 1414917365:-420 , 1425807365:-360 , 1446366965:-420 , 1457861765:-360 , 1478421365:-420 , 1489311365:-360 , 1509870965:-420 , 1520760965:-360 },
"America/Iqaluit":{ 1207604166:-240 , 1225607766:-300 , 1236497766:-240 , 1257057366:-300 , 1268552166:-240 , 1289111766:-300 , 1300001766:-240 , 1320561366:-300 , 1331451366:-240 , 1352010966:-300 , 1362900966:-240 , 1383460566:-300 , 1394350566:-240 , 1414910166:-300 , 1425800166:-240 , 1446359766:-300 , 1457854566:-240 , 1478414166:-300 , 1489304166:-240 , 1509863766:-300 , 1520753766:-240 },
"America/Jamaica":{ 1207604167:-300 },
"America/Jujuy":{ 1207604168:-180 , 1223177768:-120 , 1237084568:-180 , 1254627368:-120 , 1269138968:-180 , 1286076968:-120 , 1300588568:-180 , 1317526568:-120 , 1332038168:-180 , 1349580968:-120 , 1363487768:-180 , 1381030568:-120 , 1394937368:-180 , 1412480168:-120 , 1426386968:-180 , 1443929768:-120 , 1458441368:-180 , 1475379368:-120 , 1489890968:-180 , 1506828968:-120 , 1521340568:-180 },
"America/Juneau":{ 1207604168:-480 , 1225622168:-540 , 1236512168:-480 , 1257071768:-540 , 1268566568:-480 , 1289126168:-540 , 1300016168:-480 , 1320575768:-540 , 1331465768:-480 , 1352025368:-540 , 1362915368:-480 , 1383474968:-540 , 1394364968:-480 , 1414924568:-540 , 1425814568:-480 , 1446374168:-540 , 1457868968:-480 , 1478428568:-540 , 1489318568:-480 , 1509878168:-540 , 1520768168:-480 },
"America/Knox_IN":{ 1207604169:-300 , 1225611369:-360 , 1236501369:-300 , 1257060969:-360 , 1268555769:-300 , 1289115369:-360 , 1300005369:-300 , 1320564969:-360 , 1331454969:-300 , 1352014569:-360 , 1362904569:-300 , 1383464169:-360 , 1394354169:-300 , 1414913769:-360 , 1425803769:-300 , 1446363369:-360 , 1457858169:-300 , 1478417769:-360 , 1489307769:-300 , 1509867369:-360 , 1520757369:-300 },
"America/La_Paz":{ 1207604170:-240 },
"America/Lima":{ 1207604171:-300 },
"America/Los_Angeles":{ 1207604171:-420 , 1225618571:-480 , 1236508571:-420 , 1257068171:-480 , 1268562971:-420 , 1289122571:-480 , 1300012571:-420 , 1320572171:-480 , 1331462171:-420 , 1352021771:-480 , 1362911771:-420 , 1383471371:-480 , 1394361371:-420 , 1414920971:-480 , 1425810971:-420 , 1446370571:-480 , 1457865371:-420 , 1478424971:-480 , 1489314971:-420 , 1509874571:-480 , 1520764571:-420 },
"America/Louisville":{ 1207604172:-240 , 1225607772:-300 , 1236497772:-240 , 1257057372:-300 , 1268552172:-240 , 1289111772:-300 , 1300001772:-240 , 1320561372:-300 , 1331451372:-240 , 1352010972:-300 , 1362900972:-240 , 1383460572:-300 , 1394350572:-240 , 1414910172:-300 , 1425800172:-240 , 1446359772:-300 , 1457854572:-240 , 1478414172:-300 , 1489304172:-240 , 1509863772:-300 , 1520753772:-240 },
"America/Maceio":{ 1207604173:-180 },
"America/Managua":{ 1207604174:-360 },
"America/Manaus":{ 1207604174:-240 },
"America/Marigot":{ 1207604175:-240 },
"America/Martinique":{ 1207604176:-240 },
"America/Mazatlan":{ 1207604176:-360 , 1225010176:-420 , 1238924176:-360 , 1256459776:-420 , 1270373776:-360 , 1288514176:-420 , 1301823376:-360 , 1319963776:-420 , 1333272976:-360 , 1351413376:-420 , 1365327376:-360 , 1382862976:-420 , 1396776976:-360 , 1414312576:-420 , 1428226576:-360 , 1445762176:-420 , 1459676176:-360 , 1477816576:-420 , 1491125776:-360 , 1509266176:-420 , 1522575376:-360 },
"America/Mendoza":{ 1207604177:-180 , 1223177777:-120 , 1237084577:-180 , 1254627377:-120 , 1269138977:-180 , 1286076977:-120 , 1300588577:-180 , 1317526577:-120 , 1332038177:-180 , 1349580977:-120 , 1363487777:-180 , 1381030577:-120 , 1394937377:-180 , 1412480177:-120 , 1426386977:-180 , 1443929777:-120 , 1458441377:-180 , 1475379377:-120 , 1489890977:-180 , 1506828977:-120 , 1521340577:-180 },
"America/Menominee":{ 1207604178:-300 , 1225611378:-360 , 1236501378:-300 , 1257060978:-360 , 1268555778:-300 , 1289115378:-360 , 1300005378:-300 , 1320564978:-360 , 1331454978:-300 , 1352014578:-360 , 1362904578:-300 , 1383464178:-360 , 1394354178:-300 , 1414913778:-360 , 1425803778:-300 , 1446363378:-360 , 1457858178:-300 , 1478417778:-360 , 1489307778:-300 , 1509867378:-360 , 1520757378:-300 },
"America/Merida":{ 1207604179:-300 , 1225006579:-360 , 1238920579:-300 , 1256456179:-360 , 1270370179:-300 , 1288510579:-360 , 1301819779:-300 , 1319960179:-360 , 1333269379:-300 , 1351409779:-360 , 1365323779:-300 , 1382859379:-360 , 1396773379:-300 , 1414308979:-360 , 1428222979:-300 , 1445758579:-360 , 1459672579:-300 , 1477812979:-360 , 1491122179:-300 , 1509262579:-360 , 1522571779:-300 },
"America/Mexico_City":{ 1207604179:-300 , 1225006579:-360 , 1238920579:-300 , 1256456179:-360 , 1270370179:-300 , 1288510579:-360 , 1301819779:-300 , 1319960179:-360 , 1333269379:-300 , 1351409779:-360 , 1365323779:-300 , 1382859379:-360 , 1396773379:-300 , 1414308979:-360 , 1428222979:-300 , 1445758579:-360 , 1459672579:-300 , 1477812979:-360 , 1491122179:-300 , 1509262579:-360 , 1522571779:-300 },
"America/Miquelon":{ 1207604180:-120 , 1225600580:-180 , 1236490580:-120 , 1257050180:-180 , 1268544980:-120 , 1289104580:-180 , 1299994580:-120 , 1320554180:-180 , 1331444180:-120 , 1352003780:-180 , 1362893780:-120 , 1383453380:-180 , 1394343380:-120 , 1414902980:-180 , 1425792980:-120 , 1446352580:-180 , 1457847380:-120 , 1478406980:-180 , 1489296980:-120 , 1509856580:-180 , 1520746580:-120 },
"America/Moncton":{ 1207604181:-180 , 1225604181:-240 , 1236494181:-180 , 1257053781:-240 , 1268548581:-180 , 1289108181:-240 , 1299998181:-180 , 1320557781:-240 , 1331447781:-180 , 1352007381:-240 , 1362897381:-180 , 1383456981:-240 , 1394346981:-180 , 1414906581:-240 , 1425796581:-180 , 1446356181:-240 , 1457850981:-180 , 1478410581:-240 , 1489300581:-180 , 1509860181:-240 , 1520750181:-180 },
"America/Monterrey":{ 1207604182:-300 , 1225006582:-360 , 1238920582:-300 , 1256456182:-360 , 1270370182:-300 , 1288510582:-360 , 1301819782:-300 , 1319960182:-360 , 1333269382:-300 , 1351409782:-360 , 1365323782:-300 , 1382859382:-360 , 1396773382:-300 , 1414308982:-360 , 1428222982:-300 , 1445758582:-360 , 1459672582:-300 , 1477812982:-360 , 1491122182:-300 , 1509262582:-360 , 1522571782:-300 },
"America/Montevideo":{ 1207604182:-180 , 1223184982:-120 , 1236486982:-180 , 1254634582:-120 , 1268541382:-180 , 1286084182:-120 , 1299990982:-180 , 1317533782:-120 , 1331440582:-180 , 1349588182:-120 , 1362890182:-180 , 1381037782:-120 , 1394339782:-180 , 1412487382:-120 , 1425789382:-180 , 1443936982:-120 , 1457843782:-180 , 1475386582:-120 , 1489293382:-180 , 1506836182:-120 , 1520742982:-180 },
"America/Montreal":{ 1207604183:-240 , 1225607783:-300 , 1236497783:-240 , 1257057383:-300 , 1268552183:-240 , 1289111783:-300 , 1300001783:-240 , 1320561383:-300 , 1331451383:-240 , 1352010983:-300 , 1362900983:-240 , 1383460583:-300 , 1394350583:-240 , 1414910183:-300 , 1425800183:-240 , 1446359783:-300 , 1457854583:-240 , 1478414183:-300 , 1489304183:-240 , 1509863783:-300 , 1520753783:-240 },
"America/Montserrat":{ 1207604184:-240 },
"America/Nassau":{ 1207604185:-240 , 1225607785:-300 , 1236497785:-240 , 1257057385:-300 , 1268552185:-240 , 1289111785:-300 , 1300001785:-240 , 1320561385:-300 , 1331451385:-240 , 1352010985:-300 , 1362900985:-240 , 1383460585:-300 , 1394350585:-240 , 1414910185:-300 , 1425800185:-240 , 1446359785:-300 , 1457854585:-240 , 1478414185:-300 , 1489304185:-240 , 1509863785:-300 , 1520753785:-240 },
"America/New_York":{ 1207604185:-240 , 1225607785:-300 , 1236497785:-240 , 1257057385:-300 , 1268552185:-240 , 1289111785:-300 , 1300001785:-240 , 1320561385:-300 , 1331451385:-240 , 1352010985:-300 , 1362900985:-240 , 1383460585:-300 , 1394350585:-240 , 1414910185:-300 , 1425800185:-240 , 1446359785:-300 , 1457854585:-240 , 1478414185:-300 , 1489304185:-240 , 1509863785:-300 , 1520753785:-240 },
"America/Nipigon":{ 1207604186:-240 , 1225607786:-300 , 1236497786:-240 , 1257057386:-300 , 1268552186:-240 , 1289111786:-300 , 1300001786:-240 , 1320561386:-300 , 1331451386:-240 , 1352010986:-300 , 1362900986:-240 , 1383460586:-300 , 1394350586:-240 , 1414910186:-300 , 1425800186:-240 , 1446359786:-300 , 1457854586:-240 , 1478414186:-300 , 1489304186:-240 , 1509863786:-300 , 1520753786:-240 },
"America/Nome":{ 1207604187:-480 , 1225622187:-540 , 1236512187:-480 , 1257071787:-540 , 1268566587:-480 , 1289126187:-540 , 1300016187:-480 , 1320575787:-540 , 1331465787:-480 , 1352025387:-540 , 1362915387:-480 , 1383474987:-540 , 1394364987:-480 , 1414924587:-540 , 1425814587:-480 , 1446374187:-540 , 1457868987:-480 , 1478428587:-540 , 1489318587:-480 , 1509878187:-540 , 1520768187:-480 },
"America/Noronha":{ 1207604188:-120 },
"America/Panama":{ 1207604188:-300 },
"America/Pangnirtung":{ 1207604189:-240 , 1225607789:-300 , 1236497789:-240 , 1257057389:-300 , 1268552189:-240 , 1289111789:-300 , 1300001789:-240 , 1320561389:-300 , 1331451389:-240 , 1352010989:-300 , 1362900989:-240 , 1383460589:-300 , 1394350589:-240 , 1414910189:-300 , 1425800189:-240 , 1446359789:-300 , 1457854589:-240 , 1478414189:-300 , 1489304189:-240 , 1509863789:-300 , 1520753789:-240 },
"America/Paramaribo":{ 1207604190:-180 },
"America/Phoenix":{ 1207604191:-420 },
"America/Port-au-Prince":{ 1207604191:-300 },
"America/Port_of_Spain":{ 1207604192:-240 },
"America/Porto_Acre":{ 1207604193:-300 },
"America/Porto_Velho":{ 1207604194:-240 },
"America/Puerto_Rico":{ 1207604194:-240 },
"America/Rainy_River":{ 1207604195:-300 , 1225611395:-360 , 1236501395:-300 , 1257060995:-360 , 1268555795:-300 , 1289115395:-360 , 1300005395:-300 , 1320564995:-360 , 1331454995:-300 , 1352014595:-360 , 1362904595:-300 , 1383464195:-360 , 1394354195:-300 , 1414913795:-360 , 1425803795:-300 , 1446363395:-360 , 1457858195:-300 , 1478417795:-360 , 1489307795:-300 , 1509867395:-360 , 1520757395:-300 },
"America/Rankin_Inlet":{ 1207604196:-300 , 1225611396:-360 , 1236501396:-300 , 1257060996:-360 , 1268555796:-300 , 1289115396:-360 , 1300005396:-300 , 1320564996:-360 , 1331454996:-300 , 1352014596:-360 , 1362904596:-300 , 1383464196:-360 , 1394354196:-300 , 1414913796:-360 , 1425803796:-300 , 1446363396:-360 , 1457858196:-300 , 1478417796:-360 , 1489307796:-300 , 1509867396:-360 , 1520757396:-300 },
"America/Recife":{ 1207604197:-180 },
"America/Regina":{ 1207604197:-360 },
"America/Resolute":{ 1207604198:-300 },
"America/Rio_Branco":{ 1207604199:-300 },
"America/Rosario":{ 1207604199:-180 , 1223177799:-120 , 1237084599:-180 , 1254627399:-120 , 1269138999:-180 , 1286076999:-120 , 1300588599:-180 , 1317526599:-120 , 1332038199:-180 , 1349580999:-120 , 1363487799:-180 , 1381030599:-120 , 1394937399:-180 , 1412480199:-120 , 1426386999:-180 , 1443929799:-120 , 1458441399:-180 , 1475379399:-120 , 1489890999:-180 , 1506828999:-120 , 1521340599:-180 },
"America/Santiago":{ 1207604200:-240 , 1223786200:-180 , 1237088200:-240 , 1255235800:-180 , 1268537800:-240 , 1286685400:-180 , 1299987400:-240 , 1318135000:-180 , 1331437000:-240 , 1350189400:-180 , 1362886600:-240 , 1381639000:-180 , 1394336200:-240 , 1413088600:-180 , 1426390600:-240 , 1444538200:-180 , 1457840200:-240 , 1475987800:-180 , 1489289800:-240 , 1508042200:-180 , 1520739400:-240 },
"America/Santo_Domingo":{ 1207604201:-240 },
"America/Sao_Paulo":{ 1207604202:-180 , 1223782602:-120 , 1234665402:-180 , 1255232202:-120 , 1266719802:-180 , 1286681802:-120 , 1298169402:-180 , 1318131402:-120 , 1329619002:-180 , 1350185802:-120 , 1361068602:-180 , 1381635402:-120 , 1392518202:-180 , 1413085002:-120 , 1423967802:-180 , 1444534602:-120 , 1456022202:-180 , 1475984202:-120 , 1487471802:-180 , 1507433802:-120 , 1518921402:-180 },
"America/Scoresbysund":{ 1207604202:0 , 1224985002:-60 , 1238290602:0 , 1256434602:-60 , 1269740202:0 , 1288489002:-60 , 1301189802:0 , 1319938602:-60 , 1332639402:0 , 1351388202:-60 , 1364693802:0 , 1382837802:-60 , 1396143402:0 , 1414287402:-60 , 1427593002:0 , 1445737002:-60 , 1459042602:0 , 1477791402:-60 , 1490492202:0 , 1509241002:-60 , 1521941802:0 },
"America/Shiprock":{ 1207604203:-360 , 1225615003:-420 , 1236505003:-360 , 1257064603:-420 , 1268559403:-360 , 1289119003:-420 , 1300009003:-360 , 1320568603:-420 , 1331458603:-360 , 1352018203:-420 , 1362908203:-360 , 1383467803:-420 , 1394357803:-360 , 1414917403:-420 , 1425807403:-360 , 1446367003:-420 , 1457861803:-360 , 1478421403:-420 , 1489311403:-360 , 1509871003:-420 , 1520761003:-360 },
"America/St_Barthelemy":{ 1207604204:-240 },
"America/St_Johns":{ 1207604205:-150 , 1225593405:-210 , 1236483405:-150 , 1257043005:-210 , 1268537805:-150 , 1289097405:-210 , 1299987405:-150 , 1320547005:-210 , 1331437005:-150 , 1351996605:-210 , 1362886605:-150 , 1383446205:-210 , 1394336205:-150 , 1414895805:-210 , 1425785805:-150 , 1446345405:-210 , 1457840205:-150 , 1478399805:-210 , 1489289805:-150 , 1509849405:-210 , 1520739405:-150 },
"America/St_Kitts":{ 1207604205:-240 },
"America/St_Lucia":{ 1207604206:-240 },
"America/St_Thomas":{ 1207604207:-240 },
"America/St_Vincent":{ 1207604208:-240 },
"America/Swift_Current":{ 1207604208:-360 },
"America/Tegucigalpa":{ 1207604209:-360 },
"America/Thule":{ 1207604210:-180 , 1225604210:-240 , 1236494210:-180 , 1257053810:-240 , 1268548610:-180 , 1289108210:-240 , 1299998210:-180 , 1320557810:-240 , 1331447810:-180 , 1352007410:-240 , 1362897410:-180 , 1383457010:-240 , 1394347010:-180 , 1414906610:-240 , 1425796610:-180 , 1446356210:-240 , 1457851010:-180 , 1478410610:-240 , 1489300610:-180 , 1509860210:-240 , 1520750210:-180 },
"America/Thunder_Bay":{ 1207604211:-240 , 1225607811:-300 , 1236497811:-240 , 1257057411:-300 , 1268552211:-240 , 1289111811:-300 , 1300001811:-240 , 1320561411:-300 , 1331451411:-240 , 1352011011:-300 , 1362901011:-240 , 1383460611:-300 , 1394350611:-240 , 1414910211:-300 , 1425800211:-240 , 1446359811:-300 , 1457854611:-240 , 1478414211:-300 , 1489304211:-240 , 1509863811:-300 , 1520753811:-240 },
"America/Tijuana":{ 1207604211:-420 , 1225013811:-480 , 1238927811:-420 , 1256463411:-480 , 1270377411:-420 , 1288517811:-480 , 1301827011:-420 , 1319967411:-480 , 1333276611:-420 , 1351417011:-480 , 1365331011:-420 , 1382866611:-480 , 1396780611:-420 , 1414316211:-480 , 1428230211:-420 , 1445765811:-480 , 1459679811:-420 , 1477820211:-480 , 1491129411:-420 , 1509269811:-480 , 1522579011:-420 },
"America/Toronto":{ 1207604212:-240 , 1225607812:-300 , 1236497812:-240 , 1257057412:-300 , 1268552212:-240 , 1289111812:-300 , 1300001812:-240 , 1320561412:-300 , 1331451412:-240 , 1352011012:-300 , 1362901012:-240 , 1383460612:-300 , 1394350612:-240 , 1414910212:-300 , 1425800212:-240 , 1446359812:-300 , 1457854612:-240 , 1478414212:-300 , 1489304212:-240 , 1509863812:-300 , 1520753812:-240 },
"America/Tortola":{ 1207604213:-240 },
"America/Vancouver":{ 1207604214:-420 , 1225618614:-480 , 1236508614:-420 , 1257068214:-480 , 1268563014:-420 , 1289122614:-480 , 1300012614:-420 , 1320572214:-480 , 1331462214:-420 , 1352021814:-480 , 1362911814:-420 , 1383471414:-480 , 1394361414:-420 , 1414921014:-480 , 1425811014:-420 , 1446370614:-480 , 1457865414:-420 , 1478425014:-480 , 1489315014:-420 , 1509874614:-480 , 1520764614:-420 },
"America/Virgin":{ 1207604214:-240 },
"America/Whitehorse":{ 1207604215:-420 , 1225618615:-480 , 1236508615:-420 , 1257068215:-480 , 1268563015:-420 , 1289122615:-480 , 1300012615:-420 , 1320572215:-480 , 1331462215:-420 , 1352021815:-480 , 1362911815:-420 , 1383471415:-480 , 1394361415:-420 , 1414921015:-480 , 1425811015:-420 , 1446370615:-480 , 1457865415:-420 , 1478425015:-480 , 1489315015:-420 , 1509874615:-480 , 1520764615:-420 },
"America/Winnipeg":{ 1207604216:-300 , 1225611416:-360 , 1236501416:-300 , 1257061016:-360 , 1268555816:-300 , 1289115416:-360 , 1300005416:-300 , 1320565016:-360 , 1331455016:-300 , 1352014616:-360 , 1362904616:-300 , 1383464216:-360 , 1394354216:-300 , 1414913816:-360 , 1425803816:-300 , 1446363416:-360 , 1457858216:-300 , 1478417816:-360 , 1489307816:-300 , 1509867416:-360 , 1520757416:-300 },
"America/Yakutat":{ 1207604216:-480 , 1225622216:-540 , 1236512216:-480 , 1257071816:-540 , 1268566616:-480 , 1289126216:-540 , 1300016216:-480 , 1320575816:-540 , 1331465816:-480 , 1352025416:-540 , 1362915416:-480 , 1383475016:-540 , 1394365016:-480 , 1414924616:-540 , 1425814616:-480 , 1446374216:-540 , 1457869016:-480 , 1478428616:-540 , 1489318616:-480 , 1509878216:-540 , 1520768216:-480 },
"America/Yellowknife":{ 1207604217:-360 , 1225615017:-420 , 1236505017:-360 , 1257064617:-420 , 1268559417:-360 , 1289119017:-420 , 1300009017:-360 , 1320568617:-420 , 1331458617:-360 , 1352018217:-420 , 1362908217:-360 , 1383467817:-420 , 1394357817:-360 , 1414917417:-420 , 1425807417:-360 , 1446367017:-420 , 1457861817:-360 , 1478421417:-420 , 1489311417:-360 , 1509871017:-420 , 1520761017:-360 },
"Antarctica/Casey":{ 1207604218:480 },
"Antarctica/Davis":{ 1207604219:420 },
"Antarctica/DumontDUrville":{ 1207604219:600 },
"Antarctica/Mawson":{ 1207604220:360 },
"Antarctica/McMurdo":{ 1207604221:720 , 1222526221:780 , 1238855821:720 , 1253975821:780 , 1270305421:720 , 1285425421:780 , 1301755021:720 , 1316875021:780 , 1333204621:720 , 1348929421:780 , 1365259021:720 , 1380379021:780 , 1396708621:720 , 1411828621:780 , 1428158221:720 , 1443278221:780 , 1459607821:720 , 1474727821:780 , 1491057421:720 , 1506177421:780 , 1522507021:720 },
"Antarctica/Palmer":{ 1207604222:-240 , 1223786222:-180 , 1237088222:-240 , 1255235822:-180 , 1268537822:-240 , 1286685422:-180 , 1299987422:-240 , 1318135022:-180 , 1331437022:-240 , 1350189422:-180 , 1362886622:-240 , 1381639022:-180 , 1394336222:-240 , 1413088622:-180 , 1426390622:-240 , 1444538222:-180 , 1457840222:-240 , 1475987822:-180 , 1489289822:-240 , 1508042222:-180 , 1520739422:-240 },
"Antarctica/Rothera":{ 1207604222:-180 },
"Antarctica/South_Pole":{ 1207604223:720 , 1222526223:780 , 1238855823:720 , 1253975823:780 , 1270305423:720 , 1285425423:780 , 1301755023:720 , 1316875023:780 , 1333204623:720 , 1348929423:780 , 1365259023:720 , 1380379023:780 , 1396708623:720 , 1411828623:780 , 1428158223:720 , 1443278223:780 , 1459607823:720 , 1474727823:780 , 1491057423:720 , 1506177423:780 , 1522507023:720 },
"Antarctica/Syowa":{ 1207604224:180 },
"Antarctica/Vostok":{ 1207604224:360 },
"Arctic/Longyearbyen":{ 1207604225:120 , 1224985025:60 , 1238290625:120 , 1256434625:60 , 1269740225:120 , 1288489025:60 , 1301189825:120 , 1319938625:60 , 1332639425:120 , 1351388225:60 , 1364693825:120 , 1382837825:60 , 1396143425:120 , 1414287425:60 , 1427593025:120 , 1445737025:60 , 1459042625:120 , 1477791425:60 , 1490492225:120 , 1509241025:60 , 1521941825:120 },
"Asia/Aden":{ 1207604226:180 },
"Asia/Almaty":{ 1207604227:360 },
"Asia/Amman":{ 1207604227:180 , 1225406227:120 , 1238020627:180 , 1256855827:120 , 1269470227:180 , 1288305427:120 , 1301524627:180 , 1319755027:120 , 1332974227:180 , 1351204627:120 , 1364423827:180 , 1382654227:120 , 1395873427:180 , 1414708627:120 , 1427323027:180 , 1446158227:120 , 1459377427:180 , 1477607827:120 , 1490827027:180 , 1509057427:120 , 1522276627:180 },
"Asia/Anadyr":{ 1207604228:780 , 1224945428:720 , 1238251028:780 , 1256395028:720 , 1269700628:780 , 1288449428:720 , 1301150228:780 , 1319899028:720 , 1332599828:780 , 1351348628:720 , 1364654228:780 , 1382798228:720 , 1396103828:780 , 1414247828:720 , 1427553428:780 , 1445697428:720 , 1459003028:780 , 1477751828:720 , 1490452628:780 , 1509201428:720 , 1521902228:780 },
"Asia/Aqtau":{ 1207604229:300 },
"Asia/Aqtobe":{ 1207604230:300 },
"Asia/Ashgabat":{ 1207604230:300 },
"Asia/Ashkhabad":{ 1207604231:300 },
"Asia/Baghdad":{ 1207604232:240 , 1222821432:180 , 1238546232:240 , 1254357432:180 , 1270082232:240 , 1285893432:180 , 1301618232:240 , 1317429432:180 , 1333240632:240 , 1349051832:180 , 1364776632:240 , 1380587832:180 , 1396312632:240 , 1412123832:180 , 1427848632:240 , 1443659832:180 , 1459471032:240 , 1475282232:180 , 1491007032:240 , 1506818232:180 , 1522543032:240 },
"Asia/Bahrain":{ 1207604233:180 },
"Asia/Baku":{ 1207604233:300 , 1224981433:240 , 1238287033:300 , 1256431033:240 , 1269736633:300 , 1288485433:240 , 1301186233:300 , 1319935033:240 , 1332635833:300 , 1351384633:240 , 1364690233:300 , 1382834233:240 , 1396139833:300 , 1414283833:240 , 1427589433:300 , 1445733433:240 , 1459039033:300 , 1477787833:240 , 1490488633:300 , 1509237433:240 , 1521938233:300 },
"Asia/Bangkok":{ 1207604234:420 },
"Asia/Beirut":{ 1207604235:180 , 1224970635:120 , 1238279835:180 , 1256420235:120 , 1269729435:180 , 1288474635:120 , 1301179035:180 , 1319924235:120 , 1332628635:180 , 1351373835:120 , 1364683035:180 , 1382823435:120 , 1396132635:180 , 1414273035:120 , 1427582235:180 , 1445722635:120 , 1459031835:180 , 1477777035:120 , 1490481435:180 , 1509226635:120 , 1521931035:180 },
"Asia/Bishkek":{ 1207604236:360 },
"Asia/Brunei":{ 1207604236:480 },
"Asia/Calcutta":{ 1207604237:330 },
"Asia/Choibalsan":{ 1207604238:540 },
"Asia/Chongqing":{ 1207604238:480 },
"Asia/Chungking":{ 1207604239:480 },
"Asia/Colombo":{ 1207604240:330 },
"Asia/Dacca":{ 1207604241:360 },
"Asia/Damascus":{ 1207604241:180 , 1226007441:120 , 1238107041:180 , 1257457041:120 , 1269556641:180 , 1288906641:120 , 1301006241:180 , 1320356241:120 , 1333060641:180 , 1351805841:120 , 1364510241:180 , 1383255441:120 , 1395959841:180 , 1415309841:120 , 1427409441:180 , 1446759441:120 , 1458859041:180 , 1478209041:120 , 1490913441:180 , 1509658641:120 , 1522363041:180 },
"Asia/Dhaka":{ 1207604242:360 },
"Asia/Dili":{ 1207604243:540 },
"Asia/Dubai":{ 1207604243:240 },
"Asia/Dushanbe":{ 1207604244:300 },
"Asia/Gaza":{ 1207604245:180 , 1221089845:120 , 1238539045:180 , 1252539445:120 , 1270075045:180 , 1283989045:120 , 1301611045:180 , 1315438645:120 , 1333233445:180 , 1347493045:120 , 1364769445:180 , 1378942645:120 , 1396305445:180 , 1410392245:120 , 1427841445:180 , 1441841845:120 , 1459463845:180 , 1473291445:120 , 1490999845:180 , 1505345845:120 , 1522535845:180 },
"Asia/Harbin":{ 1207604246:480 },
"Asia/Hong_Kong":{ 1207604246:480 },
"Asia/Hovd":{ 1207604247:420 },
"Asia/Irkutsk":{ 1207604248:540 , 1224959848:480 , 1238265448:540 , 1256409448:480 , 1269715048:540 , 1288463848:480 , 1301164648:540 , 1319913448:480 , 1332614248:540 , 1351363048:480 , 1364668648:540 , 1382812648:480 , 1396118248:540 , 1414262248:480 , 1427567848:540 , 1445711848:480 , 1459017448:540 , 1477766248:480 , 1490467048:540 , 1509215848:480 , 1521916648:540 },
"Asia/Istanbul":{ 1207604249:180 , 1224985049:120 , 1238290649:180 , 1256434649:120 , 1269740249:180 , 1288489049:120 , 1301189849:180 , 1319938649:120 , 1332639449:180 , 1351388249:120 , 1364693849:180 , 1382837849:120 , 1396143449:180 , 1414287449:120 , 1427593049:180 , 1445737049:120 , 1459042649:180 , 1477791449:120 , 1490492249:180 , 1509241049:120 , 1521941849:180 },
"Asia/Jakarta":{ 1207604249:420 },
"Asia/Jayapura":{ 1207604250:540 },
"Asia/Jerusalem":{ 1207604251:180 , 1223163451:120 , 1238114251:180 , 1254008251:120 , 1269563851:180 , 1284248251:120 , 1301618251:180 , 1317512251:120 , 1333067851:180 , 1348357051:120 , 1364517451:180 , 1378597051:120 , 1395967051:180 , 1411861051:120 , 1427416651:180 , 1442705851:120 , 1459471051:180 , 1475969851:120 , 1490920651:180 , 1506209851:120 , 1522370251:180 },
"Asia/Kabul":{ 1207604252:270 },
"Asia/Kamchatka":{ 1207604252:780 , 1224945452:720 , 1238251052:780 , 1256395052:720 , 1269700652:780 , 1288449452:720 , 1301150252:780 , 1319899052:720 , 1332599852:780 , 1351348652:720 , 1364654252:780 , 1382798252:720 , 1396103852:780 , 1414247852:720 , 1427553452:780 , 1445697452:720 , 1459003052:780 , 1477751852:720 , 1490452652:780 , 1509201452:720 , 1521902252:780 },
"Asia/Karachi":{ 1207604253:300 },
"Asia/Kashgar":{ 1207604254:480 },
"Asia/Katmandu":{ 1207604254:345 },
"Asia/Krasnoyarsk":{ 1207604255:480 , 1224963455:420 , 1238269055:480 , 1256413055:420 , 1269718655:480 , 1288467455:420 , 1301168255:480 , 1319917055:420 , 1332617855:480 , 1351366655:420 , 1364672255:480 , 1382816255:420 , 1396121855:480 , 1414265855:420 , 1427571455:480 , 1445715455:420 , 1459021055:480 , 1477769855:420 , 1490470655:480 , 1509219455:420 , 1521920255:480 },
"Asia/Kuala_Lumpur":{ 1207604256:480 },
"Asia/Kuching":{ 1207604257:480 },
"Asia/Kuwait":{ 1207604257:180 },
"Asia/Macao":{ 1207604258:480 },
"Asia/Macau":{ 1207604259:480 },
"Asia/Magadan":{ 1207604260:720 , 1224949060:660 , 1238254660:720 , 1256398660:660 , 1269704260:720 , 1288453060:660 , 1301153860:720 , 1319902660:660 , 1332603460:720 , 1351352260:660 , 1364657860:720 , 1382801860:660 , 1396107460:720 , 1414251460:660 , 1427557060:720 , 1445701060:660 , 1459006660:720 , 1477755460:660 , 1490456260:720 , 1509205060:660 , 1521905860:720 },
"Asia/Makassar":{ 1207604260:480 },
"Asia/Manila":{ 1207604261:480 },
"Asia/Muscat":{ 1207604262:240 },
"Asia/Nicosia":{ 1207604262:180 , 1224985062:120 , 1238290662:180 , 1256434662:120 , 1269740262:180 , 1288489062:120 , 1301189862:180 , 1319938662:120 , 1332639462:180 , 1351388262:120 , 1364693862:180 , 1382837862:120 , 1396143462:180 , 1414287462:120 , 1427593062:180 , 1445737062:120 , 1459042662:180 , 1477791462:120 , 1490492262:180 , 1509241062:120 , 1521941862:180 },
"Asia/Novosibirsk":{ 1207604263:420 , 1224967063:360 , 1238272663:420 , 1256416663:360 , 1269722263:420 , 1288471063:360 , 1301171863:420 , 1319920663:360 , 1332621463:420 , 1351370263:360 , 1364675863:420 , 1382819863:360 , 1396125463:420 , 1414269463:360 , 1427575063:420 , 1445719063:360 , 1459024663:420 , 1477773463:360 , 1490474263:420 , 1509223063:360 , 1521923863:420 },
"Asia/Omsk":{ 1207604264:420 , 1224967064:360 , 1238272664:420 , 1256416664:360 , 1269722264:420 , 1288471064:360 , 1301171864:420 , 1319920664:360 , 1332621464:420 , 1351370264:360 , 1364675864:420 , 1382819864:360 , 1396125464:420 , 1414269464:360 , 1427575064:420 , 1445719064:360 , 1459024664:420 , 1477773464:360 , 1490474264:420 , 1509223064:360 , 1521923864:420 },
"Asia/Oral":{ 1207604265:300 },
"Asia/Phnom_Penh":{ 1207604265:420 },
"Asia/Pontianak":{ 1207604266:420 },
"Asia/Pyongyang":{ 1207604267:540 },
"Asia/Qatar":{ 1207604268:180 },
"Asia/Qyzylorda":{ 1207604268:360 },
"Asia/Rangoon":{ 1207604269:390 },
"Asia/Riyadh":{ 1207604270:180 },
"Asia/Saigon":{ 1207604270:420 },
"Asia/Sakhalin":{ 1207604271:660 , 1224952671:600 , 1238258271:660 , 1256402271:600 , 1269707871:660 , 1288456671:600 , 1301157471:660 , 1319906271:600 , 1332607071:660 , 1351355871:600 , 1364661471:660 , 1382805471:600 , 1396111071:660 , 1414255071:600 , 1427560671:660 , 1445704671:600 , 1459010271:660 , 1477759071:600 , 1490459871:660 , 1509208671:600 , 1521909471:660 },
"Asia/Samarkand":{ 1207604272:300 },
"Asia/Seoul":{ 1207604273:540 },
"Asia/Shanghai":{ 1207604273:480 },
"Asia/Singapore":{ 1207604274:480 },
"Asia/Taipei":{ 1207604275:480 },
"Asia/Tashkent":{ 1207604275:300 },
"Asia/Tbilisi":{ 1207604276:240 },
"Asia/Tehran":{ 1207604277:270 , 1221939477:210 , 1237667877:270 , 1253561877:210 , 1269203877:270 , 1285097877:210 , 1300739877:270 , 1316633877:210 , 1332275877:270 , 1348169877:210 , 1363898277:270 , 1379792277:210 , 1395434277:270 , 1411328277:210 , 1426970277:270 , 1442864277:210 , 1458506277:270 , 1474400277:210 , 1490128677:270 , 1506022677:210 , 1521664677:270 },
"Asia/Tel_Aviv":{ 1207604278:180 , 1223163478:120 , 1238114278:180 , 1254008278:120 , 1269563878:180 , 1284248278:120 , 1301618278:180 , 1317512278:120 , 1333067878:180 , 1348357078:120 , 1364517478:180 , 1378597078:120 , 1395967078:180 , 1411861078:120 , 1427416678:180 , 1442705878:120 , 1459471078:180 , 1475969878:120 , 1490920678:180 , 1506209878:120 , 1522370278:180 },
"Asia/Thimbu":{ 1207604278:360 },
"Asia/Thimphu":{ 1207604279:360 },
"Asia/Tokyo":{ 1207604280:540 },
"Asia/Ujung_Pandang":{ 1207604281:480 },
"Asia/Ulaanbaatar":{ 1207604281:480 },
"Asia/Ulan_Bator":{ 1207604282:480 },
"Asia/Urumqi":{ 1207604283:480 },
"Asia/Vientiane":{ 1207604284:420 },
"Asia/Vladivostok":{ 1207604284:660 , 1224952684:600 , 1238258284:660 , 1256402284:600 , 1269707884:660 , 1288456684:600 , 1301157484:660 , 1319906284:600 , 1332607084:660 , 1351355884:600 , 1364661484:660 , 1382805484:600 , 1396111084:660 , 1414255084:600 , 1427560684:660 , 1445704684:600 , 1459010284:660 , 1477759084:600 , 1490459884:660 , 1509208684:600 , 1521909484:660 },
"Asia/Yakutsk":{ 1207604285:600 , 1224956285:540 , 1238261885:600 , 1256405885:540 , 1269711485:600 , 1288460285:540 , 1301161085:600 , 1319909885:540 , 1332610685:600 , 1351359485:540 , 1364665085:600 , 1382809085:540 , 1396114685:600 , 1414258685:540 , 1427564285:600 , 1445708285:540 , 1459013885:600 , 1477762685:540 , 1490463485:600 , 1509212285:540 , 1521913085:600 },
"Asia/Yekaterinburg":{ 1207604286:360 , 1224970686:300 , 1238276286:360 , 1256420286:300 , 1269725886:360 , 1288474686:300 , 1301175486:360 , 1319924286:300 , 1332625086:360 , 1351373886:300 , 1364679486:360 , 1382823486:300 , 1396129086:360 , 1414273086:300 , 1427578686:360 , 1445722686:300 , 1459028286:360 , 1477777086:300 , 1490477886:360 , 1509226686:300 , 1521927486:360 },
"Asia/Yerevan":{ 1207604286:300 , 1224974286:240 , 1238279886:300 , 1256423886:240 , 1269729486:300 , 1288478286:240 , 1301179086:300 , 1319927886:240 , 1332628686:300 , 1351377486:240 , 1364683086:300 , 1382827086:240 , 1396132686:300 , 1414276686:240 , 1427582286:300 , 1445726286:240 , 1459031886:300 , 1477780686:240 , 1490481486:300 , 1509230286:240 , 1521931086:300 },
"Atlantic/Azores":{ 1207604287:0 , 1224985087:-60 , 1238290687:0 , 1256434687:-60 , 1269740287:0 , 1288489087:-60 , 1301189887:0 , 1319938687:-60 , 1332639487:0 , 1351388287:-60 , 1364693887:0 , 1382837887:-60 , 1396143487:0 , 1414287487:-60 , 1427593087:0 , 1445737087:-60 , 1459042687:0 , 1477791487:-60 , 1490492287:0 , 1509241087:-60 , 1521941887:0 },
"Atlantic/Bermuda":{ 1207604288:-180 , 1225604288:-240 , 1236494288:-180 , 1257053888:-240 , 1268548688:-180 , 1289108288:-240 , 1299998288:-180 , 1320557888:-240 , 1331447888:-180 , 1352007488:-240 , 1362897488:-180 , 1383457088:-240 , 1394347088:-180 , 1414906688:-240 , 1425796688:-180 , 1446356288:-240 , 1457851088:-180 , 1478410688:-240 , 1489300688:-180 , 1509860288:-240 , 1520750288:-180 },
"Atlantic/Canary":{ 1207604289:60 , 1224985089:0 , 1238290689:60 , 1256434689:0 , 1269740289:60 , 1288489089:0 , 1301189889:60 , 1319938689:0 , 1332639489:60 , 1351388289:0 , 1364693889:60 , 1382837889:0 , 1396143489:60 , 1414287489:0 , 1427593089:60 , 1445737089:0 , 1459042689:60 , 1477791489:0 , 1490492289:60 , 1509241089:0 , 1521941889:60 },
"Atlantic/Cape_Verde":{ 1207604290:-60 },
"Atlantic/Faeroe":{ 1207604290:60 , 1224985090:0 , 1238290690:60 , 1256434690:0 , 1269740290:60 , 1288489090:0 , 1301189890:60 , 1319938690:0 , 1332639490:60 , 1351388290:0 , 1364693890:60 , 1382837890:0 , 1396143490:60 , 1414287490:0 , 1427593090:60 , 1445737090:0 , 1459042690:60 , 1477791490:0 , 1490492290:60 , 1509241090:0 , 1521941890:60 },
"Atlantic/Faroe":{ 1207604291:60 , 1224985091:0 , 1238290691:60 , 1256434691:0 , 1269740291:60 , 1288489091:0 , 1301189891:60 , 1319938691:0 , 1332639491:60 , 1351388291:0 , 1364693891:60 , 1382837891:0 , 1396143491:60 , 1414287491:0 , 1427593091:60 , 1445737091:0 , 1459042691:60 , 1477791491:0 , 1490492291:60 , 1509241091:0 , 1521941891:60 },
"Atlantic/Jan_Mayen":{ 1207604292:120 , 1224985092:60 , 1238290692:120 , 1256434692:60 , 1269740292:120 , 1288489092:60 , 1301189892:120 , 1319938692:60 , 1332639492:120 , 1351388292:60 , 1364693892:120 , 1382837892:60 , 1396143492:120 , 1414287492:60 , 1427593092:120 , 1445737092:60 , 1459042692:120 , 1477791492:60 , 1490492292:120 , 1509241092:60 , 1521941892:120 },
"Atlantic/Madeira":{ 1207604293:60 , 1224985093:0 , 1238290693:60 , 1256434693:0 , 1269740293:60 , 1288489093:0 , 1301189893:60 , 1319938693:0 , 1332639493:60 , 1351388293:0 , 1364693893:60 , 1382837893:0 , 1396143493:60 , 1414287493:0 , 1427593093:60 , 1445737093:0 , 1459042693:60 , 1477791493:0 , 1490492293:60 , 1509241093:0 , 1521941893:60 },
"Atlantic/Reykjavik":{ 1207604293:0 },
"Atlantic/South_Georgia":{ 1207604294:-120 },
"Atlantic/St_Helena":{ 1207604294:0 },
"Atlantic/Stanley":{ 1207604295:-180 , 1208669895:-240 , 1220769495:-180 , 1240119495:-240 , 1252219095:-180 , 1271569095:-240 , 1283668695:-180 , 1303018695:-240 , 1315118295:-180 , 1334468295:-240 , 1346567895:-180 , 1366522695:-240 , 1378017495:-180 , 1397972295:-240 , 1410071895:-180 , 1429421895:-240 , 1441521495:-180 , 1460871495:-240 , 1472971095:-180 , 1492321095:-240 , 1504420695:-180 },
"Australia/ACT":{ 1207604296:600 , 1223138296:660 , 1238863096:600 , 1254587896:660 , 1270312696:600 , 1286037496:660 , 1301762296:600 , 1317487096:660 , 1333211896:600 , 1349541496:660 , 1365266296:600 , 1380991096:660 , 1396715896:600 , 1412440696:660 , 1428165496:600 , 1443890296:660 , 1459615096:600 , 1475339896:660 , 1491064696:600 , 1506789496:660 , 1522514296:600 },
"Australia/Adelaide":{ 1207604297:570 , 1223138297:630 , 1238863097:570 , 1254587897:630 , 1270312697:570 , 1286037497:630 , 1301762297:570 , 1317487097:630 , 1333211897:570 , 1349541497:630 , 1365266297:570 , 1380991097:630 , 1396715897:570 , 1412440697:630 , 1428165497:570 , 1443890297:630 , 1459615097:570 , 1475339897:630 , 1491064697:570 , 1506789497:630 , 1522514297:570 },
"Australia/Brisbane":{ 1207604297:600 },
"Australia/Broken_Hill":{ 1207604298:570 , 1223138298:630 , 1238863098:570 , 1254587898:630 , 1270312698:570 , 1286037498:630 , 1301762298:570 , 1317487098:630 , 1333211898:570 , 1349541498:630 , 1365266298:570 , 1380991098:630 , 1396715898:570 , 1412440698:630 , 1428165498:570 , 1443890298:630 , 1459615098:570 , 1475339898:630 , 1491064698:570 , 1506789498:630 , 1522514298:570 },
"Australia/Canberra":{ 1207604299:600 , 1223138299:660 , 1238863099:600 , 1254587899:660 , 1270312699:600 , 1286037499:660 , 1301762299:600 , 1317487099:660 , 1333211899:600 , 1349541499:660 , 1365266299:600 , 1380991099:660 , 1396715899:600 , 1412440699:660 , 1428165499:600 , 1443890299:660 , 1459615099:600 , 1475339899:660 , 1491064699:600 , 1506789499:660 , 1522514299:600 },
"Australia/Currie":{ 1207604300:600 , 1223138300:660 , 1238863100:600 , 1254587900:660 , 1270312700:600 , 1286037500:660 , 1301762300:600 , 1317487100:660 , 1333211900:600 , 1349541500:660 , 1365266300:600 , 1380991100:660 , 1396715900:600 , 1412440700:660 , 1428165500:600 , 1443890300:660 , 1459615100:600 , 1475339900:660 , 1491064700:600 , 1506789500:660 , 1522514300:600 },
"Australia/Darwin":{ 1207604300:570 },
"Australia/Eucla":{ 1207604301:525 , 1224956301:585 , 1238261901:525 },
"Australia/Hobart":{ 1207604302:600 , 1223138302:660 , 1238863102:600 , 1254587902:660 , 1270312702:600 , 1286037502:660 , 1301762302:600 , 1317487102:660 , 1333211902:600 , 1349541502:660 , 1365266302:600 , 1380991102:660 , 1396715902:600 , 1412440702:660 , 1428165502:600 , 1443890302:660 , 1459615102:600 , 1475339902:660 , 1491064702:600 , 1506789502:660 , 1522514302:600 },
"Australia/LHI":{ 1207604303:630 , 1223134703:660 , 1238859503:630 , 1254584303:660 , 1270309103:630 , 1286033903:660 , 1301758703:630 , 1317483503:660 , 1333208303:630 , 1349537903:660 , 1365262703:630 , 1380987503:660 , 1396712303:630 , 1412437103:660 , 1428161903:630 , 1443886703:660 , 1459611503:630 , 1475336303:660 , 1491061103:630 , 1506785903:660 , 1522510703:630 },
"Australia/Lindeman":{ 1207604303:600 },
"Australia/Lord_Howe":{ 1207604304:630 , 1223134704:660 , 1238859504:630 , 1254584304:660 , 1270309104:630 , 1286033904:660 , 1301758704:630 , 1317483504:660 , 1333208304:630 , 1349537904:660 , 1365262704:630 , 1380987504:660 , 1396712304:630 , 1412437104:660 , 1428161904:630 , 1443886704:660 , 1459611504:630 , 1475336304:660 , 1491061104:630 , 1506785904:660 , 1522510704:630 },
"Australia/Melbourne":{ 1207604305:600 , 1223138305:660 , 1238863105:600 , 1254587905:660 , 1270312705:600 , 1286037505:660 , 1301762305:600 , 1317487105:660 , 1333211905:600 , 1349541505:660 , 1365266305:600 , 1380991105:660 , 1396715905:600 , 1412440705:660 , 1428165505:600 , 1443890305:660 , 1459615105:600 , 1475339905:660 , 1491064705:600 , 1506789505:660 , 1522514305:600 },
"Australia/NSW":{ 1207604306:600 , 1223138306:660 , 1238863106:600 , 1254587906:660 , 1270312706:600 , 1286037506:660 , 1301762306:600 , 1317487106:660 , 1333211906:600 , 1349541506:660 , 1365266306:600 , 1380991106:660 , 1396715906:600 , 1412440706:660 , 1428165506:600 , 1443890306:660 , 1459615106:600 , 1475339906:660 , 1491064706:600 , 1506789506:660 , 1522514306:600 },
"Australia/North":{ 1207604306:570 },
"Australia/Perth":{ 1207604307:480 , 1224959907:540 , 1238265507:480 },
"Australia/Queensland":{ 1207604308:600 },
"Australia/South":{ 1207604308:570 , 1223138308:630 , 1238863108:570 , 1254587908:630 , 1270312708:570 , 1286037508:630 , 1301762308:570 , 1317487108:630 , 1333211908:570 , 1349541508:630 , 1365266308:570 , 1380991108:630 , 1396715908:570 , 1412440708:630 , 1428165508:570 , 1443890308:630 , 1459615108:570 , 1475339908:630 , 1491064708:570 , 1506789508:630 , 1522514308:570 },
"Australia/Sydney":{ 1207604309:600 , 1223138309:660 , 1238863109:600 , 1254587909:660 , 1270312709:600 , 1286037509:660 , 1301762309:600 , 1317487109:660 , 1333211909:600 , 1349541509:660 , 1365266309:600 , 1380991109:660 , 1396715909:600 , 1412440709:660 , 1428165509:600 , 1443890309:660 , 1459615109:600 , 1475339909:660 , 1491064709:600 , 1506789509:660 , 1522514309:600 },
"Australia/Tasmania":{ 1207604310:600 , 1223138310:660 , 1238863110:600 , 1254587910:660 , 1270312710:600 , 1286037510:660 , 1301762310:600 , 1317487110:660 , 1333211910:600 , 1349541510:660 , 1365266310:600 , 1380991110:660 , 1396715910:600 , 1412440710:660 , 1428165510:600 , 1443890310:660 , 1459615110:600 , 1475339910:660 , 1491064710:600 , 1506789510:660 , 1522514310:600 },
"Australia/Victoria":{ 1207604311:600 , 1223138311:660 , 1238863111:600 , 1254587911:660 , 1270312711:600 , 1286037511:660 , 1301762311:600 , 1317487111:660 , 1333211911:600 , 1349541511:660 , 1365266311:600 , 1380991111:660 , 1396715911:600 , 1412440711:660 , 1428165511:600 , 1443890311:660 , 1459615111:600 , 1475339911:660 , 1491064711:600 , 1506789511:660 , 1522514311:600 },
"Australia/West":{ 1207604312:480 , 1224959912:540 , 1238265512:480 },
"Australia/Yancowinna":{ 1207604312:570 , 1223138312:630 , 1238863112:570 , 1254587912:630 , 1270312712:570 , 1286037512:630 , 1301762312:570 , 1317487112:630 , 1333211912:570 , 1349541512:630 , 1365266312:570 , 1380991112:630 , 1396715912:570 , 1412440712:630 , 1428165512:570 , 1443890312:630 , 1459615112:570 , 1475339912:630 , 1491064712:570 , 1506789512:630 , 1522514312:570 },
"Brazil/Acre":{ 1207604313:-300 },
"Brazil/DeNoronha":{ 1207604314:-120 },
"Brazil/East":{ 1207604314:-180 , 1223782714:-120 , 1234665514:-180 , 1255232314:-120 , 1266719914:-180 , 1286681914:-120 , 1298169514:-180 , 1318131514:-120 , 1329619114:-180 , 1350185914:-120 , 1361068714:-180 , 1381635514:-120 , 1392518314:-180 , 1413085114:-120 , 1423967914:-180 , 1444534714:-120 , 1456022314:-180 , 1475984314:-120 , 1487471914:-180 , 1507433914:-120 , 1518921514:-180 },
"Brazil/West":{ 1207604315:-240 },
"Canada/Atlantic":{ 1207604316:-180 , 1225604316:-240 , 1236494316:-180 , 1257053916:-240 , 1268548716:-180 , 1289108316:-240 , 1299998316:-180 , 1320557916:-240 , 1331447916:-180 , 1352007516:-240 , 1362897516:-180 , 1383457116:-240 , 1394347116:-180 , 1414906716:-240 , 1425796716:-180 , 1446356316:-240 , 1457851116:-180 , 1478410716:-240 , 1489300716:-180 , 1509860316:-240 , 1520750316:-180 },
"Canada/Central":{ 1207604317:-300 , 1225611517:-360 , 1236501517:-300 , 1257061117:-360 , 1268555917:-300 , 1289115517:-360 , 1300005517:-300 , 1320565117:-360 , 1331455117:-300 , 1352014717:-360 , 1362904717:-300 , 1383464317:-360 , 1394354317:-300 , 1414913917:-360 , 1425803917:-300 , 1446363517:-360 , 1457858317:-300 , 1478417917:-360 , 1489307917:-300 , 1509867517:-360 , 1520757517:-300 },
"Canada/East-Saskatchewan":{ 1207604318:-360 },
"Canada/Eastern":{ 1207604318:-240 , 1225607918:-300 , 1236497918:-240 , 1257057518:-300 , 1268552318:-240 , 1289111918:-300 , 1300001918:-240 , 1320561518:-300 , 1331451518:-240 , 1352011118:-300 , 1362901118:-240 , 1383460718:-300 , 1394350718:-240 , 1414910318:-300 , 1425800318:-240 , 1446359918:-300 , 1457854718:-240 , 1478414318:-300 , 1489304318:-240 , 1509863918:-300 , 1520753918:-240 },
"Canada/Mountain":{ 1207604319:-360 , 1225615119:-420 , 1236505119:-360 , 1257064719:-420 , 1268559519:-360 , 1289119119:-420 , 1300009119:-360 , 1320568719:-420 , 1331458719:-360 , 1352018319:-420 , 1362908319:-360 , 1383467919:-420 , 1394357919:-360 , 1414917519:-420 , 1425807519:-360 , 1446367119:-420 , 1457861919:-360 , 1478421519:-420 , 1489311519:-360 , 1509871119:-420 , 1520761119:-360 },
"Canada/Newfoundland":{ 1207604320:-150 , 1225593520:-210 , 1236483520:-150 , 1257043120:-210 , 1268537920:-150 , 1289097520:-210 , 1299987520:-150 , 1320547120:-210 , 1331437120:-150 , 1351996720:-210 , 1362886720:-150 , 1383446320:-210 , 1394336320:-150 , 1414895920:-210 , 1425785920:-150 , 1446345520:-210 , 1457840320:-150 , 1478399920:-210 , 1489289920:-150 , 1509849520:-210 , 1520739520:-150 },
"Canada/Pacific":{ 1207604321:-420 , 1225618721:-480 , 1236508721:-420 , 1257068321:-480 , 1268563121:-420 , 1289122721:-480 , 1300012721:-420 , 1320572321:-480 , 1331462321:-420 , 1352021921:-480 , 1362911921:-420 , 1383471521:-480 , 1394361521:-420 , 1414921121:-480 , 1425811121:-420 , 1446370721:-480 , 1457865521:-420 , 1478425121:-480 , 1489315121:-420 , 1509874721:-480 , 1520764721:-420 },
"Canada/Saskatchewan":{ 1207604321:-360 },
"Canada/Yukon":{ 1207604322:-420 , 1225618722:-480 , 1236508722:-420 , 1257068322:-480 , 1268563122:-420 , 1289122722:-480 , 1300012722:-420 , 1320572322:-480 , 1331462322:-420 , 1352021922:-480 , 1362911922:-420 , 1383471522:-480 , 1394361522:-420 , 1414921122:-480 , 1425811122:-420 , 1446370722:-480 , 1457865522:-420 , 1478425122:-480 , 1489315122:-420 , 1509874722:-480 , 1520764722:-420 },
"Chile/Continental":{ 1207604323:-240 , 1223786323:-180 , 1237088323:-240 , 1255235923:-180 , 1268537923:-240 , 1286685523:-180 , 1299987523:-240 , 1318135123:-180 , 1331437123:-240 , 1350189523:-180 , 1362886723:-240 , 1381639123:-180 , 1394336323:-240 , 1413088723:-180 , 1426390723:-240 , 1444538323:-180 , 1457840323:-240 , 1475987923:-180 , 1489289923:-240 , 1508042323:-180 , 1520739523:-240 },
"Chile/EasterIsland":{ 1207604324:-360 , 1223786324:-300 , 1237088324:-360 , 1255235924:-300 , 1268537924:-360 , 1286685524:-300 , 1299987524:-360 , 1318135124:-300 , 1331437124:-360 , 1350189524:-300 , 1362886724:-360 , 1381639124:-300 , 1394336324:-360 , 1413088724:-300 , 1426390724:-360 , 1444538324:-300 , 1457840324:-360 , 1475987924:-300 , 1489289924:-360 , 1508042324:-300 , 1520739524:-360 },
"Europe/Amsterdam":{ 1207604324:120 , 1224985124:60 , 1238290724:120 , 1256434724:60 , 1269740324:120 , 1288489124:60 , 1301189924:120 , 1319938724:60 , 1332639524:120 , 1351388324:60 , 1364693924:120 , 1382837924:60 , 1396143524:120 , 1414287524:60 , 1427593124:120 , 1445737124:60 , 1459042724:120 , 1477791524:60 , 1490492324:120 , 1509241124:60 , 1521941924:120 },
"Europe/Andorra":{ 1207604325:120 , 1224985125:60 , 1238290725:120 , 1256434725:60 , 1269740325:120 , 1288489125:60 , 1301189925:120 , 1319938725:60 , 1332639525:120 , 1351388325:60 , 1364693925:120 , 1382837925:60 , 1396143525:120 , 1414287525:60 , 1427593125:120 , 1445737125:60 , 1459042725:120 , 1477791525:60 , 1490492325:120 , 1509241125:60 , 1521941925:120 },
"Europe/Athens":{ 1207604326:180 , 1224985126:120 , 1238290726:180 , 1256434726:120 , 1269740326:180 , 1288489126:120 , 1301189926:180 , 1319938726:120 , 1332639526:180 , 1351388326:120 , 1364693926:180 , 1382837926:120 , 1396143526:180 , 1414287526:120 , 1427593126:180 , 1445737126:120 , 1459042726:180 , 1477791526:120 , 1490492326:180 , 1509241126:120 , 1521941926:180 },
"Europe/Belfast":{ 1207604327:60 , 1224985127:0 , 1238290727:60 , 1256434727:0 , 1269740327:60 , 1288489127:0 , 1301189927:60 , 1319938727:0 , 1332639527:60 , 1351388327:0 , 1364693927:60 , 1382837927:0 , 1396143527:60 , 1414287527:0 , 1427593127:60 , 1445737127:0 , 1459042727:60 , 1477791527:0 , 1490492327:60 , 1509241127:0 , 1521941927:60 },
"Europe/Belgrade":{ 1207604327:120 , 1224985127:60 , 1238290727:120 , 1256434727:60 , 1269740327:120 , 1288489127:60 , 1301189927:120 , 1319938727:60 , 1332639527:120 , 1351388327:60 , 1364693927:120 , 1382837927:60 , 1396143527:120 , 1414287527:60 , 1427593127:120 , 1445737127:60 , 1459042727:120 , 1477791527:60 , 1490492327:120 , 1509241127:60 , 1521941927:120 },
"Europe/Berlin":{ 1207604328:120 , 1224985128:60 , 1238290728:120 , 1256434728:60 , 1269740328:120 , 1288489128:60 , 1301189928:120 , 1319938728:60 , 1332639528:120 , 1351388328:60 , 1364693928:120 , 1382837928:60 , 1396143528:120 , 1414287528:60 , 1427593128:120 , 1445737128:60 , 1459042728:120 , 1477791528:60 , 1490492328:120 , 1509241128:60 , 1521941928:120 },
"Europe/Bratislava":{ 1207604329:120 , 1224985129:60 , 1238290729:120 , 1256434729:60 , 1269740329:120 , 1288489129:60 , 1301189929:120 , 1319938729:60 , 1332639529:120 , 1351388329:60 , 1364693929:120 , 1382837929:60 , 1396143529:120 , 1414287529:60 , 1427593129:120 , 1445737129:60 , 1459042729:120 , 1477791529:60 , 1490492329:120 , 1509241129:60 , 1521941929:120 },
"Europe/Brussels":{ 1207604330:120 , 1224985130:60 , 1238290730:120 , 1256434730:60 , 1269740330:120 , 1288489130:60 , 1301189930:120 , 1319938730:60 , 1332639530:120 , 1351388330:60 , 1364693930:120 , 1382837930:60 , 1396143530:120 , 1414287530:60 , 1427593130:120 , 1445737130:60 , 1459042730:120 , 1477791530:60 , 1490492330:120 , 1509241130:60 , 1521941930:120 },
"Europe/Bucharest":{ 1207604330:180 , 1224985130:120 , 1238290730:180 , 1256434730:120 , 1269740330:180 , 1288489130:120 , 1301189930:180 , 1319938730:120 , 1332639530:180 , 1351388330:120 , 1364693930:180 , 1382837930:120 , 1396143530:180 , 1414287530:120 , 1427593130:180 , 1445737130:120 , 1459042730:180 , 1477791530:120 , 1490492330:180 , 1509241130:120 , 1521941930:180 },
"Europe/Budapest":{ 1207604331:120 , 1224985131:60 , 1238290731:120 , 1256434731:60 , 1269740331:120 , 1288489131:60 , 1301189931:120 , 1319938731:60 , 1332639531:120 , 1351388331:60 , 1364693931:120 , 1382837931:60 , 1396143531:120 , 1414287531:60 , 1427593131:120 , 1445737131:60 , 1459042731:120 , 1477791531:60 , 1490492331:120 , 1509241131:60 , 1521941931:120 },
"Europe/Chisinau":{ 1207604332:180 , 1224985132:120 , 1238290732:180 , 1256434732:120 , 1269740332:180 , 1288489132:120 , 1301189932:180 , 1319938732:120 , 1332639532:180 , 1351388332:120 , 1364693932:180 , 1382837932:120 , 1396143532:180 , 1414287532:120 , 1427593132:180 , 1445737132:120 , 1459042732:180 , 1477791532:120 , 1490492332:180 , 1509241132:120 , 1521941932:180 },
"Europe/Copenhagen":{ 1207604333:120 , 1224985133:60 , 1238290733:120 , 1256434733:60 , 1269740333:120 , 1288489133:60 , 1301189933:120 , 1319938733:60 , 1332639533:120 , 1351388333:60 , 1364693933:120 , 1382837933:60 , 1396143533:120 , 1414287533:60 , 1427593133:120 , 1445737133:60 , 1459042733:120 , 1477791533:60 , 1490492333:120 , 1509241133:60 , 1521941933:120 },
"Europe/Dublin":{ 1207604333:60 , 1224985133:0 , 1238290733:60 , 1256434733:0 , 1269740333:60 , 1288489133:0 , 1301189933:60 , 1319938733:0 , 1332639533:60 , 1351388333:0 , 1364693933:60 , 1382837933:0 , 1396143533:60 , 1414287533:0 , 1427593133:60 , 1445737133:0 , 1459042733:60 , 1477791533:0 , 1490492333:60 , 1509241133:0 , 1521941933:60 },
"Europe/Gibraltar":{ 1207604334:120 , 1224985134:60 , 1238290734:120 , 1256434734:60 , 1269740334:120 , 1288489134:60 , 1301189934:120 , 1319938734:60 , 1332639534:120 , 1351388334:60 , 1364693934:120 , 1382837934:60 , 1396143534:120 , 1414287534:60 , 1427593134:120 , 1445737134:60 , 1459042734:120 , 1477791534:60 , 1490492334:120 , 1509241134:60 , 1521941934:120 },
"Europe/Guernsey":{ 1207604335:60 , 1224985135:0 , 1238290735:60 , 1256434735:0 , 1269740335:60 , 1288489135:0 , 1301189935:60 , 1319938735:0 , 1332639535:60 , 1351388335:0 , 1364693935:60 , 1382837935:0 , 1396143535:60 , 1414287535:0 , 1427593135:60 , 1445737135:0 , 1459042735:60 , 1477791535:0 , 1490492335:60 , 1509241135:0 , 1521941935:60 },
"Europe/Helsinki":{ 1207604336:180 , 1224985136:120 , 1238290736:180 , 1256434736:120 , 1269740336:180 , 1288489136:120 , 1301189936:180 , 1319938736:120 , 1332639536:180 , 1351388336:120 , 1364693936:180 , 1382837936:120 , 1396143536:180 , 1414287536:120 , 1427593136:180 , 1445737136:120 , 1459042736:180 , 1477791536:120 , 1490492336:180 , 1509241136:120 , 1521941936:180 },
"Europe/Isle_of_Man":{ 1207604337:60 , 1224985137:0 , 1238290737:60 , 1256434737:0 , 1269740337:60 , 1288489137:0 , 1301189937:60 , 1319938737:0 , 1332639537:60 , 1351388337:0 , 1364693937:60 , 1382837937:0 , 1396143537:60 , 1414287537:0 , 1427593137:60 , 1445737137:0 , 1459042737:60 , 1477791537:0 , 1490492337:60 , 1509241137:0 , 1521941937:60 },
"Europe/Istanbul":{ 1207604337:180 , 1224985137:120 , 1238290737:180 , 1256434737:120 , 1269740337:180 , 1288489137:120 , 1301189937:180 , 1319938737:120 , 1332639537:180 , 1351388337:120 , 1364693937:180 , 1382837937:120 , 1396143537:180 , 1414287537:120 , 1427593137:180 , 1445737137:120 , 1459042737:180 , 1477791537:120 , 1490492337:180 , 1509241137:120 , 1521941937:180 },
"Europe/Jersey":{ 1207604338:60 , 1224985138:0 , 1238290738:60 , 1256434738:0 , 1269740338:60 , 1288489138:0 , 1301189938:60 , 1319938738:0 , 1332639538:60 , 1351388338:0 , 1364693938:60 , 1382837938:0 , 1396143538:60 , 1414287538:0 , 1427593138:60 , 1445737138:0 , 1459042738:60 , 1477791538:0 , 1490492338:60 , 1509241138:0 , 1521941938:60 },
"Europe/Kaliningrad":{ 1207604339:180 , 1224981539:120 , 1238287139:180 , 1256431139:120 , 1269736739:180 , 1288485539:120 , 1301186339:180 , 1319935139:120 , 1332635939:180 , 1351384739:120 , 1364690339:180 , 1382834339:120 , 1396139939:180 , 1414283939:120 , 1427589539:180 , 1445733539:120 , 1459039139:180 , 1477787939:120 , 1490488739:180 , 1509237539:120 , 1521938339:180 },
"Europe/Kiev":{ 1207604340:180 , 1224985140:120 , 1238290740:180 , 1256434740:120 , 1269740340:180 , 1288489140:120 , 1301189940:180 , 1319938740:120 , 1332639540:180 , 1351388340:120 , 1364693940:180 , 1382837940:120 , 1396143540:180 , 1414287540:120 , 1427593140:180 , 1445737140:120 , 1459042740:180 , 1477791540:120 , 1490492340:180 , 1509241140:120 , 1521941940:180 },
"Europe/Lisbon":{ 1207604340:60 , 1224985140:0 , 1238290740:60 , 1256434740:0 , 1269740340:60 , 1288489140:0 , 1301189940:60 , 1319938740:0 , 1332639540:60 , 1351388340:0 , 1364693940:60 , 1382837940:0 , 1396143540:60 , 1414287540:0 , 1427593140:60 , 1445737140:0 , 1459042740:60 , 1477791540:0 , 1490492340:60 , 1509241140:0 , 1521941940:60 },
"Europe/Ljubljana":{ 1207604341:120 , 1224985141:60 , 1238290741:120 , 1256434741:60 , 1269740341:120 , 1288489141:60 , 1301189941:120 , 1319938741:60 , 1332639541:120 , 1351388341:60 , 1364693941:120 , 1382837941:60 , 1396143541:120 , 1414287541:60 , 1427593141:120 , 1445737141:60 , 1459042741:120 , 1477791541:60 , 1490492341:120 , 1509241141:60 , 1521941941:120 },
"Europe/London":{ 1207604342:60 , 1224985142:0 , 1238290742:60 , 1256434742:0 , 1269740342:60 , 1288489142:0 , 1301189942:60 , 1319938742:0 , 1332639542:60 , 1351388342:0 , 1364693942:60 , 1382837942:0 , 1396143542:60 , 1414287542:0 , 1427593142:60 , 1445737142:0 , 1459042742:60 , 1477791542:0 , 1490492342:60 , 1509241142:0 , 1521941942:60 },
"Europe/Luxembourg":{ 1207604343:120 , 1224985143:60 , 1238290743:120 , 1256434743:60 , 1269740343:120 , 1288489143:60 , 1301189943:120 , 1319938743:60 , 1332639543:120 , 1351388343:60 , 1364693943:120 , 1382837943:60 , 1396143543:120 , 1414287543:60 , 1427593143:120 , 1445737143:60 , 1459042743:120 , 1477791543:60 , 1490492343:120 , 1509241143:60 , 1521941943:120 },
"Europe/Madrid":{ 1207604343:120 , 1224985143:60 , 1238290743:120 , 1256434743:60 , 1269740343:120 , 1288489143:60 , 1301189943:120 , 1319938743:60 , 1332639543:120 , 1351388343:60 , 1364693943:120 , 1382837943:60 , 1396143543:120 , 1414287543:60 , 1427593143:120 , 1445737143:60 , 1459042743:120 , 1477791543:60 , 1490492343:120 , 1509241143:60 , 1521941943:120 },
"Europe/Malta":{ 1207604344:120 , 1224985144:60 , 1238290744:120 , 1256434744:60 , 1269740344:120 , 1288489144:60 , 1301189944:120 , 1319938744:60 , 1332639544:120 , 1351388344:60 , 1364693944:120 , 1382837944:60 , 1396143544:120 , 1414287544:60 , 1427593144:120 , 1445737144:60 , 1459042744:120 , 1477791544:60 , 1490492344:120 , 1509241144:60 , 1521941944:120 },
"Europe/Mariehamn":{ 1207604345:180 , 1224985145:120 , 1238290745:180 , 1256434745:120 , 1269740345:180 , 1288489145:120 , 1301189945:180 , 1319938745:120 , 1332639545:180 , 1351388345:120 , 1364693945:180 , 1382837945:120 , 1396143545:180 , 1414287545:120 , 1427593145:180 , 1445737145:120 , 1459042745:180 , 1477791545:120 , 1490492345:180 , 1509241145:120 , 1521941945:180 },
"Europe/Minsk":{ 1207604346:180 , 1224981546:120 , 1238287146:180 , 1256431146:120 , 1269736746:180 , 1288485546:120 , 1301186346:180 , 1319935146:120 , 1332635946:180 , 1351384746:120 , 1364690346:180 , 1382834346:120 , 1396139946:180 , 1414283946:120 , 1427589546:180 , 1445733546:120 , 1459039146:180 , 1477787946:120 , 1490488746:180 , 1509237546:120 , 1521938346:180 },
"Europe/Monaco":{ 1207604346:120 , 1224985146:60 , 1238290746:120 , 1256434746:60 , 1269740346:120 , 1288489146:60 , 1301189946:120 , 1319938746:60 , 1332639546:120 , 1351388346:60 , 1364693946:120 , 1382837946:60 , 1396143546:120 , 1414287546:60 , 1427593146:120 , 1445737146:60 , 1459042746:120 , 1477791546:60 , 1490492346:120 , 1509241146:60 , 1521941946:120 },
"Europe/Moscow":{ 1207604347:240 , 1224977947:180 , 1238283547:240 , 1256427547:180 , 1269733147:240 , 1288481947:180 , 1301182747:240 , 1319931547:180 , 1332632347:240 , 1351381147:180 , 1364686747:240 , 1382830747:180 , 1396136347:240 , 1414280347:180 , 1427585947:240 , 1445729947:180 , 1459035547:240 , 1477784347:180 , 1490485147:240 , 1509233947:180 , 1521934747:240 },
"Europe/Nicosia":{ 1207604348:180 , 1224985148:120 , 1238290748:180 , 1256434748:120 , 1269740348:180 , 1288489148:120 , 1301189948:180 , 1319938748:120 , 1332639548:180 , 1351388348:120 , 1364693948:180 , 1382837948:120 , 1396143548:180 , 1414287548:120 , 1427593148:180 , 1445737148:120 , 1459042748:180 , 1477791548:120 , 1490492348:180 , 1509241148:120 , 1521941948:180 },
"Europe/Oslo":{ 1207604349:120 , 1224985149:60 , 1238290749:120 , 1256434749:60 , 1269740349:120 , 1288489149:60 , 1301189949:120 , 1319938749:60 , 1332639549:120 , 1351388349:60 , 1364693949:120 , 1382837949:60 , 1396143549:120 , 1414287549:60 , 1427593149:120 , 1445737149:60 , 1459042749:120 , 1477791549:60 , 1490492349:120 , 1509241149:60 , 1521941949:120 },
"Europe/Paris":{ 1207604350:120 , 1224985150:60 , 1238290750:120 , 1256434750:60 , 1269740350:120 , 1288489150:60 , 1301189950:120 , 1319938750:60 , 1332639550:120 , 1351388350:60 , 1364693950:120 , 1382837950:60 , 1396143550:120 , 1414287550:60 , 1427593150:120 , 1445737150:60 , 1459042750:120 , 1477791550:60 , 1490492350:120 , 1509241150:60 , 1521941950:120 },
"Europe/Podgorica":{ 1207604350:120 , 1224985150:60 , 1238290750:120 , 1256434750:60 , 1269740350:120 , 1288489150:60 , 1301189950:120 , 1319938750:60 , 1332639550:120 , 1351388350:60 , 1364693950:120 , 1382837950:60 , 1396143550:120 , 1414287550:60 , 1427593150:120 , 1445737150:60 , 1459042750:120 , 1477791550:60 , 1490492350:120 , 1509241150:60 , 1521941950:120 },
"Europe/Prague":{ 1207604351:120 , 1224985151:60 , 1238290751:120 , 1256434751:60 , 1269740351:120 , 1288489151:60 , 1301189951:120 , 1319938751:60 , 1332639551:120 , 1351388351:60 , 1364693951:120 , 1382837951:60 , 1396143551:120 , 1414287551:60 , 1427593151:120 , 1445737151:60 , 1459042751:120 , 1477791551:60 , 1490492351:120 , 1509241151:60 , 1521941951:120 },
"Europe/Riga":{ 1207604352:180 , 1224985152:120 , 1238290752:180 , 1256434752:120 , 1269740352:180 , 1288489152:120 , 1301189952:180 , 1319938752:120 , 1332639552:180 , 1351388352:120 , 1364693952:180 , 1382837952:120 , 1396143552:180 , 1414287552:120 , 1427593152:180 , 1445737152:120 , 1459042752:180 , 1477791552:120 , 1490492352:180 , 1509241152:120 , 1521941952:180 },
"Europe/Rome":{ 1207604353:120 , 1224985153:60 , 1238290753:120 , 1256434753:60 , 1269740353:120 , 1288489153:60 , 1301189953:120 , 1319938753:60 , 1332639553:120 , 1351388353:60 , 1364693953:120 , 1382837953:60 , 1396143553:120 , 1414287553:60 , 1427593153:120 , 1445737153:60 , 1459042753:120 , 1477791553:60 , 1490492353:120 , 1509241153:60 , 1521941953:120 },
"Europe/Samara":{ 1207604353:300 , 1224974353:240 , 1238279953:300 , 1256423953:240 , 1269729553:300 , 1288478353:240 , 1301179153:300 , 1319927953:240 , 1332628753:300 , 1351377553:240 , 1364683153:300 , 1382827153:240 , 1396132753:300 , 1414276753:240 , 1427582353:300 , 1445726353:240 , 1459031953:300 , 1477780753:240 , 1490481553:300 , 1509230353:240 , 1521931153:300 },
"Europe/San_Marino":{ 1207604354:120 , 1224985154:60 , 1238290754:120 , 1256434754:60 , 1269740354:120 , 1288489154:60 , 1301189954:120 , 1319938754:60 , 1332639554:120 , 1351388354:60 , 1364693954:120 , 1382837954:60 , 1396143554:120 , 1414287554:60 , 1427593154:120 , 1445737154:60 , 1459042754:120 , 1477791554:60 , 1490492354:120 , 1509241154:60 , 1521941954:120 },
"Europe/Sarajevo":{ 1207604355:120 , 1224985155:60 , 1238290755:120 , 1256434755:60 , 1269740355:120 , 1288489155:60 , 1301189955:120 , 1319938755:60 , 1332639555:120 , 1351388355:60 , 1364693955:120 , 1382837955:60 , 1396143555:120 , 1414287555:60 , 1427593155:120 , 1445737155:60 , 1459042755:120 , 1477791555:60 , 1490492355:120 , 1509241155:60 , 1521941955:120 },
"Europe/Simferopol":{ 1207604356:180 , 1224985156:120 , 1238290756:180 , 1256434756:120 , 1269740356:180 , 1288489156:120 , 1301189956:180 , 1319938756:120 , 1332639556:180 , 1351388356:120 , 1364693956:180 , 1382837956:120 , 1396143556:180 , 1414287556:120 , 1427593156:180 , 1445737156:120 , 1459042756:180 , 1477791556:120 , 1490492356:180 , 1509241156:120 , 1521941956:180 },
"Europe/Skopje":{ 1207604356:120 , 1224985156:60 , 1238290756:120 , 1256434756:60 , 1269740356:120 , 1288489156:60 , 1301189956:120 , 1319938756:60 , 1332639556:120 , 1351388356:60 , 1364693956:120 , 1382837956:60 , 1396143556:120 , 1414287556:60 , 1427593156:120 , 1445737156:60 , 1459042756:120 , 1477791556:60 , 1490492356:120 , 1509241156:60 , 1521941956:120 },
"Europe/Sofia":{ 1207604357:180 , 1224985157:120 , 1238290757:180 , 1256434757:120 , 1269740357:180 , 1288489157:120 , 1301189957:180 , 1319938757:120 , 1332639557:180 , 1351388357:120 , 1364693957:180 , 1382837957:120 , 1396143557:180 , 1414287557:120 , 1427593157:180 , 1445737157:120 , 1459042757:180 , 1477791557:120 , 1490492357:180 , 1509241157:120 , 1521941957:180 },
"Europe/Stockholm":{ 1207604358:120 , 1224985158:60 , 1238290758:120 , 1256434758:60 , 1269740358:120 , 1288489158:60 , 1301189958:120 , 1319938758:60 , 1332639558:120 , 1351388358:60 , 1364693958:120 , 1382837958:60 , 1396143558:120 , 1414287558:60 , 1427593158:120 , 1445737158:60 , 1459042758:120 , 1477791558:60 , 1490492358:120 , 1509241158:60 , 1521941958:120 },
"Europe/Tallinn":{ 1207604359:180 , 1224985159:120 , 1238290759:180 , 1256434759:120 , 1269740359:180 , 1288489159:120 , 1301189959:180 , 1319938759:120 , 1332639559:180 , 1351388359:120 , 1364693959:180 , 1382837959:120 , 1396143559:180 , 1414287559:120 , 1427593159:180 , 1445737159:120 , 1459042759:180 , 1477791559:120 , 1490492359:180 , 1509241159:120 , 1521941959:180 },
"Europe/Tirane":{ 1207604359:120 , 1224985159:60 , 1238290759:120 , 1256434759:60 , 1269740359:120 , 1288489159:60 , 1301189959:120 , 1319938759:60 , 1332639559:120 , 1351388359:60 , 1364693959:120 , 1382837959:60 , 1396143559:120 , 1414287559:60 , 1427593159:120 , 1445737159:60 , 1459042759:120 , 1477791559:60 , 1490492359:120 , 1509241159:60 , 1521941959:120 },
"Europe/Tiraspol":{ 1207604360:180 , 1224985160:120 , 1238290760:180 , 1256434760:120 , 1269740360:180 , 1288489160:120 , 1301189960:180 , 1319938760:120 , 1332639560:180 , 1351388360:120 , 1364693960:180 , 1382837960:120 , 1396143560:180 , 1414287560:120 , 1427593160:180 , 1445737160:120 , 1459042760:180 , 1477791560:120 , 1490492360:180 , 1509241160:120 , 1521941960:180 },
"Europe/Uzhgorod":{ 1207604361:180 , 1224985161:120 , 1238290761:180 , 1256434761:120 , 1269740361:180 , 1288489161:120 , 1301189961:180 , 1319938761:120 , 1332639561:180 , 1351388361:120 , 1364693961:180 , 1382837961:120 , 1396143561:180 , 1414287561:120 , 1427593161:180 , 1445737161:120 , 1459042761:180 , 1477791561:120 , 1490492361:180 , 1509241161:120 , 1521941961:180 },
"Europe/Vaduz":{ 1207604362:120 , 1224985162:60 , 1238290762:120 , 1256434762:60 , 1269740362:120 , 1288489162:60 , 1301189962:120 , 1319938762:60 , 1332639562:120 , 1351388362:60 , 1364693962:120 , 1382837962:60 , 1396143562:120 , 1414287562:60 , 1427593162:120 , 1445737162:60 , 1459042762:120 , 1477791562:60 , 1490492362:120 , 1509241162:60 , 1521941962:120 },
"Europe/Vatican":{ 1207604362:120 , 1224985162:60 , 1238290762:120 , 1256434762:60 , 1269740362:120 , 1288489162:60 , 1301189962:120 , 1319938762:60 , 1332639562:120 , 1351388362:60 , 1364693962:120 , 1382837962:60 , 1396143562:120 , 1414287562:60 , 1427593162:120 , 1445737162:60 , 1459042762:120 , 1477791562:60 , 1490492362:120 , 1509241162:60 , 1521941962:120 },
"Europe/Vienna":{ 1207604363:120 , 1224985163:60 , 1238290763:120 , 1256434763:60 , 1269740363:120 , 1288489163:60 , 1301189963:120 , 1319938763:60 , 1332639563:120 , 1351388363:60 , 1364693963:120 , 1382837963:60 , 1396143563:120 , 1414287563:60 , 1427593163:120 , 1445737163:60 , 1459042763:120 , 1477791563:60 , 1490492363:120 , 1509241163:60 , 1521941963:120 },
"Europe/Vilnius":{ 1207604364:180 , 1224985164:120 , 1238290764:180 , 1256434764:120 , 1269740364:180 , 1288489164:120 , 1301189964:180 , 1319938764:120 , 1332639564:180 , 1351388364:120 , 1364693964:180 , 1382837964:120 , 1396143564:180 , 1414287564:120 , 1427593164:180 , 1445737164:120 , 1459042764:180 , 1477791564:120 , 1490492364:180 , 1509241164:120 , 1521941964:180 },
"Europe/Volgograd":{ 1207604365:240 , 1224977965:180 , 1238283565:240 , 1256427565:180 , 1269733165:240 , 1288481965:180 , 1301182765:240 , 1319931565:180 , 1332632365:240 , 1351381165:180 , 1364686765:240 , 1382830765:180 , 1396136365:240 , 1414280365:180 , 1427585965:240 , 1445729965:180 , 1459035565:240 , 1477784365:180 , 1490485165:240 , 1509233965:180 , 1521934765:240 },
"Europe/Warsaw":{ 1207604365:120 , 1224985165:60 , 1238290765:120 , 1256434765:60 , 1269740365:120 , 1288489165:60 , 1301189965:120 , 1319938765:60 , 1332639565:120 , 1351388365:60 , 1364693965:120 , 1382837965:60 , 1396143565:120 , 1414287565:60 , 1427593165:120 , 1445737165:60 , 1459042765:120 , 1477791565:60 , 1490492365:120 , 1509241165:60 , 1521941965:120 },
"Europe/Zagreb":{ 1207604366:120 , 1224985166:60 , 1238290766:120 , 1256434766:60 , 1269740366:120 , 1288489166:60 , 1301189966:120 , 1319938766:60 , 1332639566:120 , 1351388366:60 , 1364693966:120 , 1382837966:60 , 1396143566:120 , 1414287566:60 , 1427593166:120 , 1445737166:60 , 1459042766:120 , 1477791566:60 , 1490492366:120 , 1509241166:60 , 1521941966:120 },
"Europe/Zaporozhye":{ 1207604367:180 , 1224985167:120 , 1238290767:180 , 1256434767:120 , 1269740367:180 , 1288489167:120 , 1301189967:180 , 1319938767:120 , 1332639567:180 , 1351388367:120 , 1364693967:180 , 1382837967:120 , 1396143567:180 , 1414287567:120 , 1427593167:180 , 1445737167:120 , 1459042767:180 , 1477791567:120 , 1490492367:180 , 1509241167:120 , 1521941967:180 },
"Europe/Zurich":{ 1207604368:120 , 1224985168:60 , 1238290768:120 , 1256434768:60 , 1269740368:120 , 1288489168:60 , 1301189968:120 , 1319938768:60 , 1332639568:120 , 1351388368:60 , 1364693968:120 , 1382837968:60 , 1396143568:120 , 1414287568:60 , 1427593168:120 , 1445737168:60 , 1459042768:120 , 1477791568:60 , 1490492368:120 , 1509241168:60 , 1521941968:120 },
"GMT":{ 1207604368:0 },
"Indian/Antananarivo":{ 1207604369:180 },
"Indian/Chagos":{ 1207604370:360 },
"Indian/Christmas":{ 1207604370:420 },
"Indian/Cocos":{ 1207604371:390 },
"Indian/Comoro":{ 1207604371:180 },
"Indian/Kerguelen":{ 1207604372:300 },
"Indian/Mahe":{ 1207604373:240 },
"Indian/Maldives":{ 1207604373:300 },
"Indian/Mauritius":{ 1207604374:240 },
"Indian/Mayotte":{ 1207604375:180 },
"Indian/Reunion":{ 1207604375:240 },
"Mexico/BajaNorte":{ 1207604376:-420 , 1225013976:-480 , 1238927976:-420 , 1256463576:-480 , 1270377576:-420 , 1288517976:-480 , 1301827176:-420 , 1319967576:-480 , 1333276776:-420 , 1351417176:-480 , 1365331176:-420 , 1382866776:-480 , 1396780776:-420 , 1414316376:-480 , 1428230376:-420 , 1445765976:-480 , 1459679976:-420 , 1477820376:-480 , 1491129576:-420 , 1509269976:-480 , 1522579176:-420 },
"Mexico/BajaSur":{ 1207604377:-360 , 1225010377:-420 , 1238924377:-360 , 1256459977:-420 , 1270373977:-360 , 1288514377:-420 , 1301823577:-360 , 1319963977:-420 , 1333273177:-360 , 1351413577:-420 , 1365327577:-360 , 1382863177:-420 , 1396777177:-360 , 1414312777:-420 , 1428226777:-360 , 1445762377:-420 , 1459676377:-360 , 1477816777:-420 , 1491125977:-360 , 1509266377:-420 , 1522575577:-360 },
"Mexico/General":{ 1207604378:-300 , 1225006778:-360 , 1238920778:-300 , 1256456378:-360 , 1270370378:-300 , 1288510778:-360 , 1301819978:-300 , 1319960378:-360 , 1333269578:-300 , 1351409978:-360 , 1365323978:-300 , 1382859578:-360 , 1396773578:-300 , 1414309178:-360 , 1428223178:-300 , 1445758778:-360 , 1459672778:-300 , 1477813178:-360 , 1491122378:-300 , 1509262778:-360 , 1522571978:-300 },
"Pacific/Apia":{ 1207604378:-660 },
"Pacific/Auckland":{ 1207604379:720 , 1222526379:780 , 1238855979:720 , 1253975979:780 , 1270305579:720 , 1285425579:780 , 1301755179:720 , 1316875179:780 , 1333204779:720 , 1348929579:780 , 1365259179:720 , 1380379179:780 , 1396708779:720 , 1411828779:780 , 1428158379:720 , 1443278379:780 , 1459607979:720 , 1474727979:780 , 1491057579:720 , 1506177579:780 , 1522507179:720 },
"Pacific/Chatham":{ 1207604380:765 , 1222526380:825 , 1238855980:765 , 1253975980:825 , 1270305580:765 , 1285425580:825 , 1301755180:765 , 1316875180:825 , 1333204780:765 , 1348929580:825 , 1365259180:765 , 1380379180:825 , 1396708780:765 , 1411828780:825 , 1428158380:765 , 1443278380:825 , 1459607980:765 , 1474727980:825 , 1491057580:765 , 1506177580:825 , 1522507180:765 },
"Pacific/Easter":{ 1207604381:-360 , 1223786381:-300 , 1237088381:-360 , 1255235981:-300 , 1268537981:-360 , 1286685581:-300 , 1299987581:-360 , 1318135181:-300 , 1331437181:-360 , 1350189581:-300 , 1362886781:-360 , 1381639181:-300 , 1394336381:-360 , 1413088781:-300 , 1426390781:-360 , 1444538381:-300 , 1457840381:-360 , 1475987981:-300 , 1489289981:-360 , 1508042381:-300 , 1520739581:-360 },
"Pacific/Efate":{ 1207604381:660 },
"Pacific/Enderbury":{ 1207604382:780 },
"Pacific/Fakaofo":{ 1207604383:-600 },
"Pacific/Fiji":{ 1207604383:720 },
"Pacific/Funafuti":{ 1207604384:720 },
"Pacific/Galapagos":{ 1207604384:-360 },
"Pacific/Gambier":{ 1207604385:-540 },
"Pacific/Guadalcanal":{ 1207604386:660 },
"Pacific/Guam":{ 1207604386:600 },
"Pacific/Honolulu":{ 1207604387:-600 },
"Pacific/Johnston":{ 1207604388:-600 },
"Pacific/Kiritimati":{ 1207604388:840 },
"Pacific/Kosrae":{ 1207604389:660 },
"Pacific/Kwajalein":{ 1207604390:720 },
"Pacific/Majuro":{ 1207604390:720 },
"Pacific/Marquesas":{ 1207604391:-570 },
"Pacific/Midway":{ 1207604392:-660 },
"Pacific/Nauru":{ 1207604392:720 },
"Pacific/Niue":{ 1207604393:-660 },
"Pacific/Norfolk":{ 1207604394:690 },
"Pacific/Noumea":{ 1207604395:660 },
"Pacific/Pago_Pago":{ 1207604395:-660 },
"Pacific/Palau":{ 1207604396:540 },
"Pacific/Pitcairn":{ 1207604396:-480 },
"Pacific/Ponape":{ 1207604397:660 },
"Pacific/Port_Moresby":{ 1207604398:600 },
"Pacific/Rarotonga":{ 1207604398:-600 },
"Pacific/Saipan":{ 1207604399:600 },
"Pacific/Samoa":{ 1207604399:-660 },
"Pacific/Tahiti":{ 1207604400:-600 },
"Pacific/Tarawa":{ 1207604401:720 },
"Pacific/Tongatapu":{ 1207604401:780 },
"Pacific/Truk":{ 1207604402:600 },
"Pacific/Wake":{ 1207604402:720 },
"Pacific/Wallis":{ 1207604403:720 },
"Pacific/Yap":{ 1207604403:600 },
"UTC":{ 1207604404:0 }
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: encoding=utf-8

var translations = {

'en': {
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':    'Date format:',
	't_timeformat':    'Time format:',
	't_timezone':      'Time zone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Bottom label:',
	't_optional':      '(optional)',
	't_examples':      'Examples:',
	't_date':          'Date:',
	't_time':          'Time:',
	't_label':         'Label:',
	't_dateexamples':  'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Portland, Tokyo, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'About this gadget',
	't_translateby':   '',
	't_language':      'Language:'
},

'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:'
},

'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Angivelse:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksemplers:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Language:'
},

'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû","Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:'
},

'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:'
},

'de': {
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':    'Date format:',
	't_timeformat':    'Time format:',
	't_timezone':      'Time zone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Bottom label:',
	't_optional':      '(optional)',
	't_examples':      'Examples:',
	't_date':          'Date:',
	't_time':          'Time:',
	't_label':         'Label:',
	't_dateexamples':  'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Portland, Tokyo, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'About this gadget',
	't_translateby':   '',
	't_language':      'Language:'
},

'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:'
},

'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Label:',
	't_optional':      '(facultatief)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijdsaanduiding:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdaam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'De taal:'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et
 */

var isDirty = true;

var mainDateFormat = null;
var mainTimeFormat = null;
var tzLabel = null;
var tzName = null;
var locale = 'en';
var L = null;

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( locale === '' ) locale = 'en';
	L = translations[locale];
}

function readSettings() {
  System.Gadget.background = "images/background-black.png";

  mainDateFormat = readSetting( "mainDateFormat" );
  mainTimeFormat = readSetting( "mainTimeFormat" );
  tzLabel = readSetting( "tzLabel" );
  tzName = readSetting( "tzName" );
  locale = readSetting( "locale" );

  setLocale();
//	document.tzOffsets = readSetting( "tzOffsets" );
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = readSettings;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  updateGadget();
}

function changeColor( lat, lon, gmt ) {
  return;
/*
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  dateArea.innerHTML = sunrise + " " + sunset;
*/
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata2007k[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  window.bottomArea.innerText = tzLabel;

  if ( tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      tzName = '';
      // no tzdata for this entry, clear it away
    }
  }

  window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
  window.timeArea.innerHTML = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  adjustHeights();
  adjustDateFont();
  adjustTimeToFit();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && tzName.length ) {
    var coords = latlon[ tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2;
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  if ( window.timeArea.className == 'bigTime' ) return 67;
  if ( window.timeArea.className == 'smallTime' ) return 33;
  return 44; // was 45
}

function adjustHeights() {
  var dateLen = window.dateArea.innerText.length;
  var bottomLen = window.bottomArea.innerText.length;

  window.dateArea.style.display = dateLen ? 'block' : 'none';
  window.bottomArea.style.display = bottomLen ? 'block' : 'none';

  if ( dateLen === 0 && bottomLen === 0 ) {
    window.timeArea.className = 'bigTime';
  } else if ( dateLen > 0 && bottomLen > 0 ) {
    window.timeArea.className = 'smallTime';
  } else {
    window.timeArea.className = 'normalTime';
  }
}

function adjustDateFont() {
  var width = window.timeArea.offsetWidth;
  var maxLen = 18;
  var dateLen = window.dateArea.innerText.length;

  window.dateArea.className = (dateLen > maxLen) ? 'smallDate' : 'normalDate';
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = varEl.value;
  System.Gadget.Settings.write( variablename, varVal );
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata2007k;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata2007k[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;

  document.getElementById("mainDateFormat").value = readSetting( "mainDateFormat" );
  document.getElementById("mainTimeFormat").value = readSetting( "mainTimeFormat" );
  document.getElementById("tzLabel").value = readSetting( "tzLabel" );
  locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
	localizeText();
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );

//		var tzName = document.getElementById('tzName').value;
//    var tzOffsets = tzdata2007k[ tzName ];
//		System.Gadget.Settings.write( 'tzOffsets', tzOffsets );
  }

  event.cancel = false;
}

function getSystemFontsList() {
  // http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1959226&SiteID=1
  var HKLM = 2147483650;
  var rPath = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\\";
  var rValue;

  // connect to the registry
  var oSwbem = new ActiveXObject("WbemScripting.SwbemLocator");
  var oSvc = oSwbem.ConnectServer(null, "root\\default");
  var oReg = oSvc.Get("StdRegProv");

  // enumerate the values 
  var oMethod = oReg.Methods_.Item("EnumValues");
  var oInParam = oMethod.InParameters.SpawnInstance_();
  oInParam.hDefKey = HKLM;
  oInParam.sSubKeyName = rPath;
  var oOutParam = oReg.ExecMethod_(oMethod.Name, oInParam);

  // get the values into an array
  var sNames = oOutParam.sNames.toArray();

  return sNames;

/*
  for (var i = 0; i < sNames.length; i++) {
    document.write( sNames[i] );
   // font names are in sNames[i]
  }
*/
}
