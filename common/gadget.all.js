// formatDate :
// a PHP date like function, for formatting date strings
// authored by Svend Tofte <www.svendtofte.com>
// the code is in the public domain
//
// see http://www.svendtofte.com/code/date_format/
// and http://www.php.net/date
//
// thanks to 
//  - Daniel Berlin <mail@daniel-berlin.de>,
//    major overhaul and improvements
//  - Matt Bannon,
//    correcting some stupid bugs in my days-in-the-months list!
//
// input : format string
// time : epoch time (seconds, and optional)
//
// if time is not passed, formatting is based on 
// the current "this" date object's set time.
//
// supported switches are
// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L), 
// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z
// J (uppercase)
// 
// unsupported (as compared to date in PHP 5.1.3)
// T, e, o

/*
 * Moved to gadget.html for ease of localization
    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
                       "Thursday", "Friday", "Saturday"];
    var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
                       "Thu", "Fri", "Sat"];
    var monthsShort = ["Jan", "Feb", "Mar", "Apr",
                       "May", "Jun", "Jul", "Aug", "Sep",
                       "Oct", "Nov", "Dec"];
    var monthsLong =  ["January", "February", "March", "April",
                       "May", "June", "July", "August", "September",
                       "October", "November", "December"];
*/

//Date.prototype.formatDate = function (input,time) {
formatDate = function (input,time) {
    var switches = { // switches object
        
        a : function () {
            // Lowercase Ante meridiem and Post meridiem
            return date.getHours() > 11? "pm" : "am";
        },
        
        A : function () {
            // Uppercase Ante meridiem and Post meridiem
            return (this.a().toUpperCase ());
        },
    
        B : function (){
            // Swatch internet time. code simply grabbed from ppk,
            // since I was feeling lazy:
            // http://www.xs4all.nl/~ppk/js/beat.html
            var off = (date.getTimezoneOffset() + 60)*60;
            var theSeconds = (date.getHours() * 3600) + 
                             (date.getMinutes() * 60) + 
                              date.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        
        c : function () {
            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" + 
                    this.h() + ":" + this.i() + ":" + this.s() + this.P());
        },
        
        d : function () {
            // Day of the month, 2 digits with leading zeros
            var j = String(this.j());
            return (j.length == 1 ? "0"+j : j);
        },
        
        D : function () {
            // A textual representation of a day, three letters
            return L.daysShort[date.getDay()];
        },
        
        F : function () {
            // A full textual representation of a month
            return L.monthsLong[date.getMonth()];
        },
        
        g : function () {
            // 12-hour format of an hour without leading zeros
	    if ( date.getHours() == 0 ) return 12;
            return date.getHours() > 12? date.getHours()-12 : date.getHours();
        },
        
        G : function () {
            // 24-hour format of an hour without leading zeros
            return date.getHours();
        },
        
        h : function () {
            // 12-hour format of an hour with leading zeros
            var g = String(this.g());
            return (g.length == 1 ? "0"+g : g);
        },
        
        H : function () {
            // 24-hour format of an hour with leading zeros
            var G = String(this.G());
            return (G.length == 1 ? "0"+G : G);
        },
        
        i : function () {
            // Minutes with leading zeros
            var min = String (date.getMinutes ());
            return (min.length == 1 ? "0" + min : min);
        },
        
        I : function () {
            // Whether or not the date is in daylight saving time (DST)
            // note that this has no bearing in actual DST mechanics,
            // and is just a pure guess. buyer beware.
            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");
            return (noDST.getTimezoneOffset () == 
                    date.getTimezoneOffset () ? 0 : 1);
        },
        
        j : function () {
            // Day of the month without leading zeros
            return date.getDate();
        },
        
        l : function () {
            // A full textual representation of the day of the week
            return L.daysLong[date.getDay()];
        },
        
        L : function () {
            // leap year or not. 1 if leap year, 0 if not.
            // the logic should match iso's 8601 standard.
            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html
            var Y = this.Y();
            if (         
                (Y % 4 == 0 && Y % 100 != 0) ||
                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)
                ) {
                return 1;
            } else {
                return 0;
            }
        },
        
        m : function () {
            // Numeric representation of a month, with leading zeros
            var n = String(this.n());
            return (n.length == 1 ? "0"+n : n);
        },
        
        M : function () {
            // A short textual representation of a month, three letters
            return L.monthsShort[date.getMonth()];
        },
        
        n : function () {
            // Numeric representation of a month, without leading zeros
            return date.getMonth()+1;
        },
        
        N : function () {
            // ISO-8601 numeric representation of the day of the week
            var w = this.w();
            return (w == 0 ? 7 : w);
        },
        
        O : function () {
            // Difference to Greenwich time (GMT) in hours
            var os = Math.abs(date.getTimezoneOffset());
            var h = String(Math.floor(os/60));
            var m = String(os%60);
            h.length == 1? h = "0"+h:1;
            m.length == 1? m = "0"+m:1;
            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
        },
        
        P : function () {
            // Difference to GMT, with colon between hours and minutes
            var O = this.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },      
        
        r : function () {
            // RFC 822 formatted date
            var r; // result
            //  Thu         ,     21               Dec              2000
            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +
            //    16          :    01          :    07               0200
            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();
            return r;
        },

        s : function () {
            // Seconds, with leading zeros
            var sec = String (date.getSeconds ());
            return (sec.length == 1 ? "0" + sec : sec);
        },        
        
        S : function () {
            // English ordinal suffix for the day of the month, 2 characters
            switch (date.getDate ()) {
                case  1: return ("st"); 
                case  2: return ("nd"); 
                case  3: return ("rd");
                case 21: return ("st"); 
                case 22: return ("nd"); 
                case 23: return ("rd");
                case 31: return ("st");
                default: return ("th");
            }
        },
        
        t : function () {
            // thanks to Matt Bannon for some much needed code-fixes here!
            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
            if (this.L()==1 && this.n()==2) return 29; // ~leap day
            return daysinmonths[this.n()];
        },
        
        U : function () {
            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
            return Math.round(date.getTime()/1000);
        },

        w : function () {
            // Numeric representation of the day of the week
            return date.getDay();
        },
        
        W : function () {
            // Weeknumber, as per ISO specification:
            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        
            var DoW = this.N ();
            var DoY = this.z ();

            // If the day is 3 days before New Year's Eve and is Thursday or earlier,
            // it's week 1 of next year.
            var daysToNY = 364 + this.L () - DoY;
            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {
                return 1;
            }

            // If the day is within 3 days after New Year's Eve and is Friday or later,
            // it belongs to the old year.
            if (DoY <= 2 && DoW >= 5) {
                //return new Date (this.Y () - 1, 11, 31).formatDate ("W");
								return formatDate( 'W', new Date (this.Y () - 1, 11, 31) );
            }
            
            var nyDoW = new Date (this.Y (), 0, 1).getDay ();
            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;

            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier
                return (1 + Math.floor ((DoY + nyDoW) / 7));
            } else {  // First day of the year is a Friday or later
                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));
            }
        },
        
        y : function () {
            // A two-digit representation of a year
            var y = String(this.Y());
            return y.substring(y.length-2,y.length);
        },        
        
        Y : function () {
            // A full numeric representation of a year, 4 digits
    
            // we first check, if getFullYear is supported. if it
            // is, we just use that. ppks code is nice, but wont
            // work with dates outside 1900-2038, or something like that
            if (date.getFullYear) {
                var newDate = new Date("January 1 2001 00:00:00 +0000");
                var x = newDate .getFullYear();
                if (x == 2001) {              
                    // i trust the method now
                    return date.getFullYear();
                }
            }
            // else, do this:
            // codes thanks to ppk:
            // http://www.xs4all.nl/~ppk/js/introdate.html
            var x = date.getYear();
            var y = x % 100;
            y += (y < 38) ? 2000 : 1900;
            return y;
        },

        
        z : function () {
            // The day of the year, zero indexed! 0 through 366
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return Math.floor(diff/1000/60/60/24);
        },

        J : function () {
            // Julian date - day of the year, one indexed! 1 through 367
            var t = new Date("January 1 " + this.Y() + " 00:00:00");
            var diff = date.getTime() - t.getTime();
            return 1 + Math.floor(diff/1000/60/60/24);
        },

        Z : function () {
            // Timezone offset in seconds
            return (date.getTimezoneOffset () * -60);
        }        
    
    }

    function getSwitch(str) {
        if (switches[str] != undefined) {
            return switches[str]();
        } else {
            return str;
        }
    }

    var date;
    if (time) {
        var date = new Date (time);
    } else {
        var date = this;
    }

    var formatString = input.split("");
    var i = 0;
    while (i < formatString.length) {
        if (formatString[i] == "\\") {
            // this is our way of allowing users to escape stuff
            formatString.splice(i,1);
        } else {
            formatString[i] = getSwitch(formatString[i]);
        }
        i++;
    }
    
    return formatString.join("");
}


// Some (not all) predefined format strings from PHP 5.1.1, which 
// offer standard date representations.
// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants
//

// Atom      "2005-08-15T15:52:01+00:00"
Date.DATE_ATOM    = "Y-m-d\\TH:i:sP";
// ISO-8601  "2005-08-15T15:52:01+0000"
Date.DATE_ISO8601 = "Y-m-d\\TH:i:sO";
// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"
Date.DATE_RFC2822 = "D, d M Y H:i:s O";
// W3C       "2005-08-15T15:52:01+00:00"
Date.DATE_W3C     = "Y-m-d\\TH:i:sP";
var tzdata = { 
"Africa/Abidjan":{1235714158:0},
"Africa/Accra":{1235714159:0},
"Africa/Addis Ababa":{1235714159:180},
"Africa/Algiers":{1235714160:60},
"Africa/Asmara":{1235714161:180},
"Africa/Bamako":{1235714162:0},
"Africa/Bangui":{1235714162:60},
"Africa/Banjul":{1235714163:0},
"Africa/Bissau":{1235714164:0},
"Africa/Blantyre":{1235714164:120},
"Africa/Brazzaville":{1235714165:60},
"Africa/Bujumbura":{1235714166:120},
"Africa/Cairo":{1235714166:120,1240527366:180,1251410166:120,1272581766:180,1282859766:120,1304031366:180,1314309366:120,1335480966:180,1346363766:120,1366930566:180,1377813366:120,1398380166:180,1409262966:120,1429829766:180,1440712566:120,1461884166:180,1472162166:120,1493333766:180,1504216566:120,1524783366:180,1535666166:120},
"Africa/Casablanca":{1235714167:0},
"Africa/Ceuta":{1235714168:60,1238291768:120,1256435768:60,1269741368:120,1288490168:60,1301190968:120,1319939768:60,1332640568:120,1351389368:60,1364694968:120,1382838968:60,1396144568:120,1414288568:60,1427594168:120,1445738168:60,1459043768:120,1477792568:60,1490493368:120,1509242168:60,1521942968:120,1540691768:60},
"Africa/Conakry":{1235714169:0},
"Africa/Dakar":{1235714169:0},
"Africa/Dar es Salaam":{1235714170:180},
"Africa/Djibouti":{1235714171:180},
"Africa/Douala":{1235714171:60},
"Africa/El Aaiun":{1235714172:0},
"Africa/Freetown":{1235714173:0},
"Africa/Gaborone":{1235714174:120},
"Africa/Harare":{1235714174:120},
"Africa/Johannesburg":{1235714175:120},
"Africa/Kampala":{1235714176:180},
"Africa/Khartoum":{1235714177:180},
"Africa/Kigali":{1235714177:120},
"Africa/Kinshasa":{1235714178:60},
"Africa/Lagos":{1235714178:60},
"Africa/Libreville":{1235714179:60},
"Africa/Lome":{1235714180:0},
"Africa/Luanda":{1235714180:60},
"Africa/Lubumbashi":{1235714181:120},
"Africa/Lusaka":{1235714181:120},
"Africa/Malabo":{1235714182:60},
"Africa/Maputo":{1235714183:120},
"Africa/Maseru":{1235714184:120},
"Africa/Mbabane":{1235714184:120},
"Africa/Mogadishu":{1235714185:180},
"Africa/Monrovia":{1235714186:0},
"Africa/Nairobi":{1235714186:180},
"Africa/Ndjamena":{1235714187:60},
"Africa/Niamey":{1235714188:60},
"Africa/Nouakchott":{1235714189:0},
"Africa/Ouagadougou":{1235714189:0},
"Africa/Porto-Novo":{1235714190:60},
"Africa/Sao Tome":{1235714191:0},
"Africa/Tripoli":{1235714192:120},
"Africa/Tunis":{1235714192:60,1238291792:120,1256435792:60,1269741392:120,1288490192:60,1301190992:120,1319939792:60,1332640592:120,1351389392:60,1364694992:120,1382838992:60,1396144592:120,1414288592:60,1427594192:120,1445738192:60,1459043792:120,1477792592:60,1490493392:120,1509242192:60,1521942992:120,1540691792:60},
"Africa/Windhoek":{1235714193:120,1238892993:60,1252202193:120,1270342593:60,1283651793:120,1301792193:60,1315101393:120,1333241793:60,1346550993:120,1365296193:60,1378000593:120,1396745793:60,1410054993:120,1428195393:60,1441504593:120,1459644993:60,1472954193:120,1491094593:60,1504403793:120,1522544193:60,1535853393:120},
"America/Adak":{1235714194:-600,1236516994:-540,1257076594:-600,1268571394:-540,1289130994:-600,1300020994:-540,1320580594:-600,1331470594:-540,1352030194:-600,1362920194:-540,1383479794:-600,1394369794:-540,1414929394:-600,1425819394:-540,1446378994:-600,1457873794:-540,1478433394:-600,1489323394:-540,1509882994:-600,1520772994:-540,1541332594:-600},
"America/Anchorage":{1235714195:-540,1236513395:-480,1257072995:-540,1268567795:-480,1289127395:-540,1300017395:-480,1320576995:-540,1331466995:-480,1352026595:-540,1362916595:-480,1383476195:-540,1394366195:-480,1414925795:-540,1425815795:-480,1446375395:-540,1457870195:-480,1478429795:-540,1489319795:-480,1509879395:-540,1520769395:-480,1541328995:-540},
"America/Anguilla":{1235714195:-240},
"America/Antigua":{1235714196:-240},
"America/Araguaina":{1235714197:-180},
"America/Argentina/Buenos Aires":{1235714198:-120,1237085798:-180,1255838198:-120,1269140198:-180,1287287798:-120,1300589798:-180,1318737398:-120,1332039398:-180,1350791798:-120,1363488998:-180,1382241398:-120,1394938598:-180,1413690998:-120,1426388198:-180,1445140598:-120,1458442598:-180,1476590198:-120,1489892198:-180,1508039798:-120,1521341798:-180,1540094198:-120},
"America/Argentina/Catamarca":{1235714198:-180},
"America/Argentina/Cordoba":{1235714199:-120,1237085799:-180,1255838199:-120,1269140199:-180,1287287799:-120,1300589799:-180,1318737399:-120,1332039399:-180,1350791799:-120,1363488999:-180,1382241399:-120,1394938599:-180,1413690999:-120,1426388199:-180,1445140599:-120,1458442599:-180,1476590199:-120,1489892199:-180,1508039799:-120,1521341799:-180,1540094199:-120},
"America/Argentina/Jujuy":{1235714200:-180},
"America/Argentina/La Rioja":{1235714201:-180},
"America/Argentina/Mendoza":{1235714201:-180},
"America/Argentina/Rio Gallegos":{1235714202:-180},
"America/Argentina/Salta":{1235714203:-180},
"America/Argentina/San Juan":{1235714204:-180},
"America/Argentina/San Luis":{1235714204:-180},
"America/Argentina/Tucuman":{1235714205:-120,1237085805:-180,1255838205:-120,1269140205:-180,1287287805:-120,1300589805:-180,1318737405:-120,1332039405:-180,1350791805:-120,1363489005:-180,1382241405:-120,1394938605:-180,1413691005:-120,1426388205:-180,1445140605:-120,1458442605:-180,1476590205:-120,1489892205:-180,1508039805:-120,1521341805:-180,1540094205:-120},
"America/Argentina/Ushuaia":{1235714206:-180},
"America/Aruba":{1235714207:-240},
"America/Asuncion":{1235714207:-180,1236484607:-240,1255841807:-180,1268539007:-240,1287291407:-180,1299988607:-240,1318741007:-180,1331438207:-240,1350795407:-180,1362887807:-240,1382245007:-180,1394337407:-240,1413694607:-180,1425787007:-240,1445144207:-180,1457841407:-240,1476593807:-180,1489291007:-240,1508043407:-180,1520740607:-240,1540097807:-180},
"America/Atikokan":{1235714208:-300},
"America/Bahia":{1235714209:-180},
"America/Barbados":{1235714210:-240},
"America/Belem":{1235714210:-180},
"America/Belize":{1235714211:-360},
"America/Blanc-Sablon":{1235714212:-240},
"America/Boa Vista":{1235714213:-240},
"America/Bogota":{1235714213:-300},
"America/Boise":{1235714214:-420,1236506214:-360,1257065814:-420,1268560614:-360,1289120214:-420,1300010214:-360,1320569814:-420,1331459814:-360,1352019414:-420,1362909414:-360,1383469014:-420,1394359014:-360,1414918614:-420,1425808614:-360,1446368214:-420,1457863014:-360,1478422614:-420,1489312614:-360,1509872214:-420,1520762214:-360,1541321814:-420},
"America/Cambridge Bay":{1235714215:-420,1236506215:-360,1257065815:-420,1268560615:-360,1289120215:-420,1300010215:-360,1320569815:-420,1331459815:-360,1352019415:-420,1362909415:-360,1383469015:-420,1394359015:-360,1414918615:-420,1425808615:-360,1446368215:-420,1457863015:-360,1478422615:-420,1489312615:-360,1509872215:-420,1520762215:-360,1541321815:-420},
"America/Campo Grande":{1235714216:-240,1255841816:-180,1266724616:-240,1287291416:-180,1298174216:-240,1318741016:-180,1330228616:-240,1350795416:-180,1361073416:-240,1382245016:-180,1392523016:-240,1413694616:-180,1424577416:-240,1445144216:-180,1456027016:-240,1476593816:-180,1487476616:-240,1508043416:-180,1518926216:-240,1540097816:-180,1550375816:-240},
"America/Cancun":{1235714216:-360,1238921816:-300,1256457416:-360,1270371416:-300,1288511816:-360,1301821016:-300,1319961416:-360,1333270616:-300,1351411016:-360,1365325016:-300,1382860616:-360,1396774616:-300,1414310216:-360,1428224216:-300,1445759816:-360,1459673816:-300,1477814216:-360,1491123416:-300,1509263816:-360,1522573016:-300,1540713416:-360},
"America/Caracas":{1235714217:-270},
"America/Cayenne":{1235714218:-180},
"America/Cayman":{1235714219:-300},
"America/Chicago":{1235714219:-360,1236502619:-300,1257062219:-360,1268557019:-300,1289116619:-360,1300006619:-300,1320566219:-360,1331456219:-300,1352015819:-360,1362905819:-300,1383465419:-360,1394355419:-300,1414915019:-360,1425805019:-300,1446364619:-360,1457859419:-300,1478419019:-360,1489309019:-300,1509868619:-360,1520758619:-300,1541318219:-360},
"America/Chihuahua":{1235714220:-420,1238925420:-360,1256461020:-420,1270375020:-360,1288515420:-420,1301824620:-360,1319965020:-420,1333274220:-360,1351414620:-420,1365328620:-360,1382864220:-420,1396778220:-360,1414313820:-420,1428227820:-360,1445763420:-420,1459677420:-360,1477817820:-420,1491127020:-360,1509267420:-420,1522576620:-360,1540717020:-420},
"America/Costa Rica":{1235714221:-360},
"America/Cuiaba":{1235714222:-240,1255841822:-180,1266724622:-240,1287291422:-180,1298174222:-240,1318741022:-180,1330228622:-240,1350795422:-180,1361073422:-240,1382245022:-180,1392523022:-240,1413694622:-180,1424577422:-240,1445144222:-180,1456027022:-240,1476593822:-180,1487476622:-240,1508043422:-180,1518926222:-240,1540097822:-180,1550375822:-240},
"America/Curacao":{1235714222:-240},
"America/Danmarkshavn":{1235714223:0},
"America/Dawson":{1235714224:-480,1236509824:-420,1257069424:-480,1268564224:-420,1289123824:-480,1300013824:-420,1320573424:-480,1331463424:-420,1352023024:-480,1362913024:-420,1383472624:-480,1394362624:-420,1414922224:-480,1425812224:-420,1446371824:-480,1457866624:-420,1478426224:-480,1489316224:-420,1509875824:-480,1520765824:-420,1541325424:-480},
"America/Dawson Creek":{1235714225:-420},
"America/Denver":{1235714225:-420,1236506225:-360,1257065825:-420,1268560625:-360,1289120225:-420,1300010225:-360,1320569825:-420,1331459825:-360,1352019425:-420,1362909425:-360,1383469025:-420,1394359025:-360,1414918625:-420,1425808625:-360,1446368225:-420,1457863025:-360,1478422625:-420,1489312625:-360,1509872225:-420,1520762225:-360,1541321825:-420},
"America/Detroit":{1235714226:-300,1236499026:-240,1257058626:-300,1268553426:-240,1289113026:-300,1300003026:-240,1320562626:-300,1331452626:-240,1352012226:-300,1362902226:-240,1383461826:-300,1394351826:-240,1414911426:-300,1425801426:-240,1446361026:-300,1457855826:-240,1478415426:-300,1489305426:-240,1509865026:-300,1520755026:-240,1541314626:-300},
"America/Dominica":{1235714227:-240},
"America/Edmonton":{1235714228:-420,1236506228:-360,1257065828:-420,1268560628:-360,1289120228:-420,1300010228:-360,1320569828:-420,1331459828:-360,1352019428:-420,1362909428:-360,1383469028:-420,1394359028:-360,1414918628:-420,1425808628:-360,1446368228:-420,1457863028:-360,1478422628:-420,1489312628:-360,1509872228:-420,1520762228:-360,1541321828:-420},
"America/Eirunepe":{1235714228:-240},
"America/El Salvador":{1235714229:-360},
"America/Fortaleza":{1235714230:-180},
"America/Glace Bay":{1235714231:-240,1236495431:-180,1257055031:-240,1268549831:-180,1289109431:-240,1299999431:-180,1320559031:-240,1331449031:-180,1352008631:-240,1362898631:-180,1383458231:-240,1394348231:-180,1414907831:-240,1425797831:-180,1446357431:-240,1457852231:-180,1478411831:-240,1489301831:-180,1509861431:-240,1520751431:-180,1541311031:-240},
"America/Godthab":{1235714231:-180,1238291831:-120,1256435831:-180,1269741431:-120,1288490231:-180,1301191031:-120,1319939831:-180,1332640631:-120,1351389431:-180,1364695031:-120,1382839031:-180,1396144631:-120,1414288631:-180,1427594231:-120,1445738231:-180,1459043831:-120,1477792631:-180,1490493431:-120,1509242231:-180,1521943031:-120,1540691831:-180},
"America/Goose Bay":{1235714232:-240,1236488232:-180,1257047832:-240,1268542632:-180,1289102232:-240,1299992232:-180,1320551832:-240,1331441832:-180,1352001432:-240,1362891432:-180,1383451032:-240,1394341032:-180,1414900632:-240,1425790632:-180,1446350232:-240,1457845032:-180,1478404632:-240,1489294632:-180,1509854232:-240,1520744232:-180,1541303832:-240},
"America/Grand Turk":{1235714233:-300,1236499033:-240,1257058633:-300,1268553433:-240,1289113033:-300,1300003033:-240,1320562633:-300,1331452633:-240,1352012233:-300,1362902233:-240,1383461833:-300,1394351833:-240,1414911433:-300,1425801433:-240,1446361033:-300,1457855833:-240,1478415433:-300,1489305433:-240,1509865033:-300,1520755033:-240,1541314633:-300},
"America/Grenada":{1235714234:-240},
"America/Guadeloupe":{1235714234:-240},
"America/Guatemala":{1235714235:-360},
"America/Guayaquil":{1235714236:-300},
"America/Guyana":{1235714237:-240},
"America/Halifax":{1235714237:-240,1236495437:-180,1257055037:-240,1268549837:-180,1289109437:-240,1299999437:-180,1320559037:-240,1331449037:-180,1352008637:-240,1362898637:-180,1383458237:-240,1394348237:-180,1414907837:-240,1425797837:-180,1446357437:-240,1457852237:-180,1478411837:-240,1489301837:-180,1509861437:-240,1520751437:-180,1541311037:-240},
"America/Havana":{1235714238:-300,1237096638:-240,1256450238:-300,1269151038:-240,1288504638:-300,1300600638:-240,1319954238:-300,1332050238:-240,1351403838:-300,1363499838:-240,1382853438:-300,1394949438:-240,1414303038:-300,1426399038:-240,1445752638:-300,1458453438:-240,1477807038:-300,1489903038:-240,1509256638:-300,1521352638:-240,1540706238:-300},
"America/Hermosillo":{1235714239:-420},
"America/Indiana/Indianapolis":{1235714240:-300,1236499040:-240,1257058640:-300,1268553440:-240,1289113040:-300,1300003040:-240,1320562640:-300,1331452640:-240,1352012240:-300,1362902240:-240,1383461840:-300,1394351840:-240,1414911440:-300,1425801440:-240,1446361040:-300,1457855840:-240,1478415440:-300,1489305440:-240,1509865040:-300,1520755040:-240,1541314640:-300},
"America/Indiana/Knox":{1235714240:-360,1236502640:-300,1257062240:-360,1268557040:-300,1289116640:-360,1300006640:-300,1320566240:-360,1331456240:-300,1352015840:-360,1362905840:-300,1383465440:-360,1394355440:-300,1414915040:-360,1425805040:-300,1446364640:-360,1457859440:-300,1478419040:-360,1489309040:-300,1509868640:-360,1520758640:-300,1541318240:-360},
"America/Indiana/Marengo":{1235714241:-300,1236499041:-240,1257058641:-300,1268553441:-240,1289113041:-300,1300003041:-240,1320562641:-300,1331452641:-240,1352012241:-300,1362902241:-240,1383461841:-300,1394351841:-240,1414911441:-300,1425801441:-240,1446361041:-300,1457855841:-240,1478415441:-300,1489305441:-240,1509865041:-300,1520755041:-240,1541314641:-300},
"America/Indiana/Petersburg":{1235714242:-300,1236499042:-240,1257058642:-300,1268553442:-240,1289113042:-300,1300003042:-240,1320562642:-300,1331452642:-240,1352012242:-300,1362902242:-240,1383461842:-300,1394351842:-240,1414911442:-300,1425801442:-240,1446361042:-300,1457855842:-240,1478415442:-300,1489305442:-240,1509865042:-300,1520755042:-240,1541314642:-300},
"America/Indiana/Tell City":{1235714243:-360,1236502643:-300,1257062243:-360,1268557043:-300,1289116643:-360,1300006643:-300,1320566243:-360,1331456243:-300,1352015843:-360,1362905843:-300,1383465443:-360,1394355443:-300,1414915043:-360,1425805043:-300,1446364643:-360,1457859443:-300,1478419043:-360,1489309043:-300,1509868643:-360,1520758643:-300,1541318243:-360},
"America/Indiana/Vevay":{1235714243:-300,1236499043:-240,1257058643:-300,1268553443:-240,1289113043:-300,1300003043:-240,1320562643:-300,1331452643:-240,1352012243:-300,1362902243:-240,1383461843:-300,1394351843:-240,1414911443:-300,1425801443:-240,1446361043:-300,1457855843:-240,1478415443:-300,1489305443:-240,1509865043:-300,1520755043:-240,1541314643:-300},
"America/Indiana/Vincennes":{1235714244:-300,1236499044:-240,1257058644:-300,1268553444:-240,1289113044:-300,1300003044:-240,1320562644:-300,1331452644:-240,1352012244:-300,1362902244:-240,1383461844:-300,1394351844:-240,1414911444:-300,1425801444:-240,1446361044:-300,1457855844:-240,1478415444:-300,1489305444:-240,1509865044:-300,1520755044:-240,1541314644:-300},
"America/Indiana/Winamac":{1235714245:-300,1236499045:-240,1257058645:-300,1268553445:-240,1289113045:-300,1300003045:-240,1320562645:-300,1331452645:-240,1352012245:-300,1362902245:-240,1383461845:-300,1394351845:-240,1414911445:-300,1425801445:-240,1446361045:-300,1457855845:-240,1478415445:-300,1489305445:-240,1509865045:-300,1520755045:-240,1541314645:-300},
"America/Inuvik":{1235714246:-420,1236506246:-360,1257065846:-420,1268560646:-360,1289120246:-420,1300010246:-360,1320569846:-420,1331459846:-360,1352019446:-420,1362909446:-360,1383469046:-420,1394359046:-360,1414918646:-420,1425808646:-360,1446368246:-420,1457863046:-360,1478422646:-420,1489312646:-360,1509872246:-420,1520762246:-360,1541321846:-420},
"America/Iqaluit":{1235714247:-300,1236499047:-240,1257058647:-300,1268553447:-240,1289113047:-300,1300003047:-240,1320562647:-300,1331452647:-240,1352012247:-300,1362902247:-240,1383461847:-300,1394351847:-240,1414911447:-300,1425801447:-240,1446361047:-300,1457855847:-240,1478415447:-300,1489305447:-240,1509865047:-300,1520755047:-240,1541314647:-300},
"America/Jamaica":{1235714247:-300},
"America/Juneau":{1235714248:-540,1236513448:-480,1257073048:-540,1268567848:-480,1289127448:-540,1300017448:-480,1320577048:-540,1331467048:-480,1352026648:-540,1362916648:-480,1383476248:-540,1394366248:-480,1414925848:-540,1425815848:-480,1446375448:-540,1457870248:-480,1478429848:-540,1489319848:-480,1509879448:-540,1520769448:-480,1541329048:-540},
"America/Kentucky/Louisville":{1235714249:-300,1236499049:-240,1257058649:-300,1268553449:-240,1289113049:-300,1300003049:-240,1320562649:-300,1331452649:-240,1352012249:-300,1362902249:-240,1383461849:-300,1394351849:-240,1414911449:-300,1425801449:-240,1446361049:-300,1457855849:-240,1478415449:-300,1489305449:-240,1509865049:-300,1520755049:-240,1541314649:-300},
"America/Kentucky/Monticello":{1235714250:-300,1236499050:-240,1257058650:-300,1268553450:-240,1289113050:-300,1300003050:-240,1320562650:-300,1331452650:-240,1352012250:-300,1362902250:-240,1383461850:-300,1394351850:-240,1414911450:-300,1425801450:-240,1446361050:-300,1457855850:-240,1478415450:-300,1489305450:-240,1509865050:-300,1520755050:-240,1541314650:-300},
"America/La Paz":{1235714250:-240},
"America/Lima":{1235714251:-300},
"America/Los Angeles":{1235714252:-480,1236509852:-420,1257069452:-480,1268564252:-420,1289123852:-480,1300013852:-420,1320573452:-480,1331463452:-420,1352023052:-480,1362913052:-420,1383472652:-480,1394362652:-420,1414922252:-480,1425812252:-420,1446371852:-480,1457866652:-420,1478426252:-480,1489316252:-420,1509875852:-480,1520765852:-420,1541325452:-480},
"America/Maceio":{1235714253:-180},
"America/Managua":{1235714253:-360},
"America/Manaus":{1235714254:-240},
"America/Martinique":{1235714255:-240},
"America/Mazatlan":{1235714256:-420,1238925456:-360,1256461056:-420,1270375056:-360,1288515456:-420,1301824656:-360,1319965056:-420,1333274256:-360,1351414656:-420,1365328656:-360,1382864256:-420,1396778256:-360,1414313856:-420,1428227856:-360,1445763456:-420,1459677456:-360,1477817856:-420,1491127056:-360,1509267456:-420,1522576656:-360,1540717056:-420},
"America/Menominee":{1235714256:-360,1236502656:-300,1257062256:-360,1268557056:-300,1289116656:-360,1300006656:-300,1320566256:-360,1331456256:-300,1352015856:-360,1362905856:-300,1383465456:-360,1394355456:-300,1414915056:-360,1425805056:-300,1446364656:-360,1457859456:-300,1478419056:-360,1489309056:-300,1509868656:-360,1520758656:-300,1541318256:-360},
"America/Merida":{1235714257:-360,1238921857:-300,1256457457:-360,1270371457:-300,1288511857:-360,1301821057:-300,1319961457:-360,1333270657:-300,1351411057:-360,1365325057:-300,1382860657:-360,1396774657:-300,1414310257:-360,1428224257:-300,1445759857:-360,1459673857:-300,1477814257:-360,1491123457:-300,1509263857:-360,1522573057:-300,1540713457:-360},
"America/Mexico City":{1235714258:-360,1238921858:-300,1256457458:-360,1270371458:-300,1288511858:-360,1301821058:-300,1319961458:-360,1333270658:-300,1351411058:-360,1365325058:-300,1382860658:-360,1396774658:-300,1414310258:-360,1428224258:-300,1445759858:-360,1459673858:-300,1477814258:-360,1491123458:-300,1509263858:-360,1522573058:-300,1540713458:-360},
"America/Miquelon":{1235714259:-180,1236491859:-120,1257051459:-180,1268546259:-120,1289105859:-180,1299995859:-120,1320555459:-180,1331445459:-120,1352005059:-180,1362895059:-120,1383454659:-180,1394344659:-120,1414904259:-180,1425794259:-120,1446353859:-180,1457848659:-120,1478408259:-180,1489298259:-120,1509857859:-180,1520747859:-120,1541307459:-180},
"America/Moncton":{1235714259:-240,1236495459:-180,1257055059:-240,1268549859:-180,1289109459:-240,1299999459:-180,1320559059:-240,1331449059:-180,1352008659:-240,1362898659:-180,1383458259:-240,1394348259:-180,1414907859:-240,1425797859:-180,1446357459:-240,1457852259:-180,1478411859:-240,1489301859:-180,1509861459:-240,1520751459:-180,1541311059:-240},
"America/Monterrey":{1235714260:-360,1238921860:-300,1256457460:-360,1270371460:-300,1288511860:-360,1301821060:-300,1319961460:-360,1333270660:-300,1351411060:-360,1365325060:-300,1382860660:-360,1396774660:-300,1414310260:-360,1428224260:-300,1445759860:-360,1459673860:-300,1477814260:-360,1491123460:-300,1509263860:-360,1522573060:-300,1540713460:-360},
"America/Montevideo":{1235714261:-120,1236488261:-180,1254635861:-120,1268542661:-180,1286085461:-120,1299992261:-180,1317535061:-120,1331441861:-180,1349589461:-120,1362891461:-180,1381039061:-120,1394341061:-180,1412488661:-120,1425790661:-180,1443938261:-120,1457845061:-180,1475387861:-120,1489294661:-180,1506837461:-120,1520744261:-180,1538891861:-120},
"America/Montreal":{1235714262:-300,1236499062:-240,1257058662:-300,1268553462:-240,1289113062:-300,1300003062:-240,1320562662:-300,1331452662:-240,1352012262:-300,1362902262:-240,1383461862:-300,1394351862:-240,1414911462:-300,1425801462:-240,1446361062:-300,1457855862:-240,1478415462:-300,1489305462:-240,1509865062:-300,1520755062:-240,1541314662:-300},
"America/Montserrat":{1235714263:-240},
"America/Nassau":{1235714263:-300,1236499063:-240,1257058663:-300,1268553463:-240,1289113063:-300,1300003063:-240,1320562663:-300,1331452663:-240,1352012263:-300,1362902263:-240,1383461863:-300,1394351863:-240,1414911463:-300,1425801463:-240,1446361063:-300,1457855863:-240,1478415463:-300,1489305463:-240,1509865063:-300,1520755063:-240,1541314663:-300},
"America/New York":{1235714264:-300,1236499064:-240,1257058664:-300,1268553464:-240,1289113064:-300,1300003064:-240,1320562664:-300,1331452664:-240,1352012264:-300,1362902264:-240,1383461864:-300,1394351864:-240,1414911464:-300,1425801464:-240,1446361064:-300,1457855864:-240,1478415464:-300,1489305464:-240,1509865064:-300,1520755064:-240,1541314664:-300},
"America/Nipigon":{1235714265:-300,1236499065:-240,1257058665:-300,1268553465:-240,1289113065:-300,1300003065:-240,1320562665:-300,1331452665:-240,1352012265:-300,1362902265:-240,1383461865:-300,1394351865:-240,1414911465:-300,1425801465:-240,1446361065:-300,1457855865:-240,1478415465:-300,1489305465:-240,1509865065:-300,1520755065:-240,1541314665:-300},
"America/Nome":{1235714266:-540,1236513466:-480,1257073066:-540,1268567866:-480,1289127466:-540,1300017466:-480,1320577066:-540,1331467066:-480,1352026666:-540,1362916666:-480,1383476266:-540,1394366266:-480,1414925866:-540,1425815866:-480,1446375466:-540,1457870266:-480,1478429866:-540,1489319866:-480,1509879466:-540,1520769466:-480,1541329066:-540},
"America/Noronha":{1235714266:-120},
"America/North Dakota/Center":{1235714267:-360,1236502667:-300,1257062267:-360,1268557067:-300,1289116667:-360,1300006667:-300,1320566267:-360,1331456267:-300,1352015867:-360,1362905867:-300,1383465467:-360,1394355467:-300,1414915067:-360,1425805067:-300,1446364667:-360,1457859467:-300,1478419067:-360,1489309067:-300,1509868667:-360,1520758667:-300,1541318267:-360},
"America/North Dakota/New Salem":{1235714268:-360,1236502668:-300,1257062268:-360,1268557068:-300,1289116668:-360,1300006668:-300,1320566268:-360,1331456268:-300,1352015868:-360,1362905868:-300,1383465468:-360,1394355468:-300,1414915068:-360,1425805068:-300,1446364668:-360,1457859468:-300,1478419068:-360,1489309068:-300,1509868668:-360,1520758668:-300,1541318268:-360},
"America/Panama":{1235714269:-300},
"America/Pangnirtung":{1235714269:-300,1236499069:-240,1257058669:-300,1268553469:-240,1289113069:-300,1300003069:-240,1320562669:-300,1331452669:-240,1352012269:-300,1362902269:-240,1383461869:-300,1394351869:-240,1414911469:-300,1425801469:-240,1446361069:-300,1457855869:-240,1478415469:-300,1489305469:-240,1509865069:-300,1520755069:-240,1541314669:-300},
"America/Paramaribo":{1235714270:-180},
"America/Phoenix":{1235714271:-420},
"America/Port of Spain":{1235714272:-240},
"America/Port-au-Prince":{1235714272:-300},
"America/Porto Velho":{1235714273:-240},
"America/Puerto Rico":{1235714274:-240},
"America/Rainy River":{1235714275:-360,1236502675:-300,1257062275:-360,1268557075:-300,1289116675:-360,1300006675:-300,1320566275:-360,1331456275:-300,1352015875:-360,1362905875:-300,1383465475:-360,1394355475:-300,1414915075:-360,1425805075:-300,1446364675:-360,1457859475:-300,1478419075:-360,1489309075:-300,1509868675:-360,1520758675:-300,1541318275:-360},
"America/Rankin Inlet":{1235714275:-360,1236502675:-300,1257062275:-360,1268557075:-300,1289116675:-360,1300006675:-300,1320566275:-360,1331456275:-300,1352015875:-360,1362905875:-300,1383465475:-360,1394355475:-300,1414915075:-360,1425805075:-300,1446364675:-360,1457859475:-300,1478419075:-360,1489309075:-300,1509868675:-360,1520758675:-300,1541318275:-360},
"America/Recife":{1235714276:-180},
"America/Regina":{1235714277:-360},
"America/Resolute":{1235714278:-300},
"America/Rio Branco":{1235714278:-240},
"America/Santarem":{1235714279:-180},
"America/Santiago":{1235714280:-180,1237089480:-240,1255237080:-180,1268539080:-240,1286686680:-180,1299988680:-240,1318136280:-180,1331438280:-240,1350190680:-180,1362887880:-240,1381640280:-180,1394337480:-240,1413089880:-180,1426391880:-240,1444539480:-180,1457841480:-240,1475989080:-180,1489291080:-240,1508043480:-180,1520740680:-240,1539493080:-180},
"America/Santo Domingo":{1235714281:-240},
"America/Sao Paulo":{1235714281:-180,1255838281:-120,1266721081:-180,1287287881:-120,1298170681:-180,1318737481:-120,1330225081:-180,1350791881:-120,1361069881:-180,1382241481:-120,1392519481:-180,1413691081:-120,1424573881:-180,1445140681:-120,1456023481:-180,1476590281:-120,1487473081:-180,1508039881:-120,1518922681:-180,1540094281:-120,1550372281:-180},
"America/Scoresbysund":{1235714282:-60,1238291882:0,1256435882:-60,1269741482:0,1288490282:-60,1301191082:0,1319939882:-60,1332640682:0,1351389482:-60,1364695082:0,1382839082:-60,1396144682:0,1414288682:-60,1427594282:0,1445738282:-60,1459043882:0,1477792682:-60,1490493482:0,1509242282:-60,1521943082:0,1540691882:-60},
"America/St Johns":{1235714283:-210,1236484683:-150,1257044283:-210,1268539083:-150,1289098683:-210,1299988683:-150,1320548283:-210,1331438283:-150,1351997883:-210,1362887883:-150,1383447483:-210,1394337483:-150,1414897083:-210,1425787083:-150,1446346683:-210,1457841483:-150,1478401083:-210,1489291083:-150,1509850683:-210,1520740683:-150,1541300283:-210},
"America/St Kitts":{1235714284:-240},
"America/St Lucia":{1235714284:-240},
"America/St Thomas":{1235714285:-240},
"America/St Vincent":{1235714286:-240},
"America/Swift Current":{1235714287:-360},
"America/Tegucigalpa":{1235714287:-360},
"America/Thule":{1235714288:-240,1236495488:-180,1257055088:-240,1268549888:-180,1289109488:-240,1299999488:-180,1320559088:-240,1331449088:-180,1352008688:-240,1362898688:-180,1383458288:-240,1394348288:-180,1414907888:-240,1425797888:-180,1446357488:-240,1457852288:-180,1478411888:-240,1489301888:-180,1509861488:-240,1520751488:-180,1541311088:-240},
"America/Thunder Bay":{1235714289:-300,1236499089:-240,1257058689:-300,1268553489:-240,1289113089:-300,1300003089:-240,1320562689:-300,1331452689:-240,1352012289:-300,1362902289:-240,1383461889:-300,1394351889:-240,1414911489:-300,1425801489:-240,1446361089:-300,1457855889:-240,1478415489:-300,1489305489:-240,1509865089:-300,1520755089:-240,1541314689:-300},
"America/Tijuana":{1235714290:-480,1238929090:-420,1256464690:-480,1270378690:-420,1288519090:-480,1301828290:-420,1319968690:-480,1333277890:-420,1351418290:-480,1365332290:-420,1382867890:-480,1396781890:-420,1414317490:-480,1428231490:-420,1445767090:-480,1459681090:-420,1477821490:-480,1491130690:-420,1509271090:-480,1522580290:-420,1540720690:-480},
"America/Toronto":{1235714290:-300,1236499090:-240,1257058690:-300,1268553490:-240,1289113090:-300,1300003090:-240,1320562690:-300,1331452690:-240,1352012290:-300,1362902290:-240,1383461890:-300,1394351890:-240,1414911490:-300,1425801490:-240,1446361090:-300,1457855890:-240,1478415490:-300,1489305490:-240,1509865090:-300,1520755090:-240,1541314690:-300},
"America/Tortola":{1235714291:-240},
"America/Vancouver":{1235714292:-480,1236509892:-420,1257069492:-480,1268564292:-420,1289123892:-480,1300013892:-420,1320573492:-480,1331463492:-420,1352023092:-480,1362913092:-420,1383472692:-480,1394362692:-420,1414922292:-480,1425812292:-420,1446371892:-480,1457866692:-420,1478426292:-480,1489316292:-420,1509875892:-480,1520765892:-420,1541325492:-480},
"America/Whitehorse":{1235714293:-480,1236509893:-420,1257069493:-480,1268564293:-420,1289123893:-480,1300013893:-420,1320573493:-480,1331463493:-420,1352023093:-480,1362913093:-420,1383472693:-480,1394362693:-420,1414922293:-480,1425812293:-420,1446371893:-480,1457866693:-420,1478426293:-480,1489316293:-420,1509875893:-480,1520765893:-420,1541325493:-480},
"America/Winnipeg":{1235714293:-360,1236502693:-300,1257062293:-360,1268557093:-300,1289116693:-360,1300006693:-300,1320566293:-360,1331456293:-300,1352015893:-360,1362905893:-300,1383465493:-360,1394355493:-300,1414915093:-360,1425805093:-300,1446364693:-360,1457859493:-300,1478419093:-360,1489309093:-300,1509868693:-360,1520758693:-300,1541318293:-360},
"America/Yakutat":{1235714294:-540,1236513494:-480,1257073094:-540,1268567894:-480,1289127494:-540,1300017494:-480,1320577094:-540,1331467094:-480,1352026694:-540,1362916694:-480,1383476294:-540,1394366294:-480,1414925894:-540,1425815894:-480,1446375494:-540,1457870294:-480,1478429894:-540,1489319894:-480,1509879494:-540,1520769494:-480,1541329094:-540},
"America/Yellowknife":{1235714295:-420,1236506295:-360,1257065895:-420,1268560695:-360,1289120295:-420,1300010295:-360,1320569895:-420,1331459895:-360,1352019495:-420,1362909495:-360,1383469095:-420,1394359095:-360,1414918695:-420,1425808695:-360,1446368295:-420,1457863095:-360,1478422695:-420,1489312695:-360,1509872295:-420,1520762295:-360,1541321895:-420},
"Antarctica/Casey":{1235714296:480},
"Antarctica/Davis":{1235714296:420},
"Antarctica/DumontDUrville":{1235714297:600},
"Antarctica/Mawson":{1235714298:360},
"Antarctica/McMurdo":{1235714299:780,1238857099:720,1253977099:780,1270306699:720,1285426699:780,1301756299:720,1316876299:780,1333205899:720,1348930699:780,1365260299:720,1380380299:780,1396709899:720,1411829899:780,1428159499:720,1443279499:780,1459609099:720,1474729099:780,1491058699:720,1506178699:780,1522508299:720,1538233099:780},
"Antarctica/Palmer":{1235714299:-180,1237089499:-240,1255237099:-180,1268539099:-240,1286686699:-180,1299988699:-240,1318136299:-180,1331438299:-240,1350190699:-180,1362887899:-240,1381640299:-180,1394337499:-240,1413089899:-180,1426391899:-240,1444539499:-180,1457841499:-240,1475989099:-180,1489291099:-240,1508043499:-180,1520740699:-240,1539493099:-180},
"Antarctica/Rothera":{1235714300:-180},
"Antarctica/Syowa":{1235714301:180},
"Antarctica/Vostok":{1235714302:360},
"Asia/Aden":{1235714302:180},
"Asia/Almaty":{1235714303:360},
"Asia/Amman":{1235714304:120,1238021904:180,1256857104:120,1269471504:180,1288306704:120,1301525904:180,1319756304:120,1332975504:180,1351205904:120,1364425104:180,1382655504:120,1395874704:180,1414709904:120,1427324304:180,1446159504:120,1459378704:180,1477609104:120,1490828304:180,1509058704:120,1522277904:180,1540508304:120},
"Asia/Anadyr":{1235714305:720,1238252305:780,1256396305:720,1269701905:780,1288450705:720,1301151505:780,1319900305:720,1332601105:780,1351349905:720,1364655505:780,1382799505:720,1396105105:780,1414249105:720,1427554705:780,1445698705:720,1459004305:780,1477753105:720,1490453905:780,1509202705:720,1521903505:780,1540652305:720},
"Asia/Aqtau":{1235714305:300},
"Asia/Aqtobe":{1235714306:300},
"Asia/Ashgabat":{1235714307:300},
"Asia/Baghdad":{1235714308:180},
"Asia/Bahrain":{1235714308:180},
"Asia/Baku":{1235714309:240,1238288309:300,1256432309:240,1269737909:300,1288486709:240,1301187509:300,1319936309:240,1332637109:300,1351385909:240,1364691509:300,1382835509:240,1396141109:300,1414285109:240,1427590709:300,1445734709:240,1459040309:300,1477789109:240,1490489909:300,1509238709:240,1521939509:300,1540688309:240},
"Asia/Bangkok":{1235714310:420},
"Asia/Beirut":{1235714310:120,1238281110:180,1256421510:120,1269730710:180,1288475910:120,1301180310:180,1319925510:120,1332629910:180,1351375110:120,1364684310:180,1382824710:120,1396133910:180,1414274310:120,1427583510:180,1445723910:120,1459033110:180,1477778310:120,1490482710:180,1509227910:120,1521932310:180,1540677510:120},
"Asia/Bishkek":{1235714311:360},
"Asia/Brunei":{1235714312:480},
"Asia/Choibalsan":{1235714313:480},
"Asia/Chongqing":{1235714313:480},
"Asia/Colombo":{1235714314:330},
"Asia/Damascus":{1235714315:120,1238713115:180,1257026315:120,1270162715:180,1288562315:120,1301612315:180,1320098315:120,1333666715:180,1351720715:120,1365116315:180,1383256715:120,1396565915:180,1414792715:120,1428015515:180,1446328715:120,1459465115:180,1477951115:120,1491519515:180,1509487115:120,1522969115:180,1541023115:120},
"Asia/Dhaka":{1235714316:360},
"Asia/Dili":{1235714316:540},
"Asia/Dubai":{1235714317:240},
"Asia/Dushanbe":{1235714318:300},
"Asia/Gaza":{1235714319:120,1238540319:180,1251331119:120,1270076319:180,1282780719:120,1301612319:180,1314230319:120,1333234719:180,1346284719:120,1364770719:180,1377734319:120,1396306719:180,1409183919:120,1427842719:180,1440633519:120,1459465119:180,1472083119:120,1491001119:180,1504137519:120,1522537119:180,1535587119:120},
"Asia/Harbin":{1235714319:480},
"Asia/Ho Chi Minh":{1235714320:420},
"Asia/Hong Kong":{1235714321:480},
"Asia/Hovd":{1235714322:420},
"Asia/Irkutsk":{1235714322:480,1238266722:540,1256410722:480,1269716322:540,1288465122:480,1301165922:540,1319914722:480,1332615522:540,1351364322:480,1364669922:540,1382813922:480,1396119522:540,1414263522:480,1427569122:540,1445713122:480,1459018722:540,1477767522:480,1490468322:540,1509217122:480,1521917922:540,1540666722:480},
"Asia/Jakarta":{1235714323:420},
"Asia/Jayapura":{1235714324:540},
"Asia/Jerusalem":{1235714325:120,1238115525:180,1254009525:120,1269565125:180,1284249525:120,1301619525:180,1317513525:120,1333069125:180,1348358325:120,1364518725:180,1378598325:120,1395968325:180,1411862325:120,1427417925:180,1442707125:120,1459472325:180,1475971125:120,1490921925:180,1506211125:120,1522371525:180,1537055925:120},
"Asia/Kabul":{1235714325:270},
"Asia/Kamchatka":{1235714326:720,1238252326:780,1256396326:720,1269701926:780,1288450726:720,1301151526:780,1319900326:720,1332601126:780,1351349926:720,1364655526:780,1382799526:720,1396105126:780,1414249126:720,1427554726:780,1445698726:720,1459004326:780,1477753126:720,1490453926:780,1509202726:720,1521903526:780,1540652326:720},
"Asia/Karachi":{1235714327:300},
"Asia/Kashgar":{1235714328:480},
"Asia/Katmandu":{1235714328:345},
"Asia/Kolkata":{1235714329:330},
"Asia/Krasnoyarsk":{1235714330:420,1238270330:480,1256414330:420,1269719930:480,1288468730:420,1301169530:480,1319918330:420,1332619130:480,1351367930:420,1364673530:480,1382817530:420,1396123130:480,1414267130:420,1427572730:480,1445716730:420,1459022330:480,1477771130:420,1490471930:480,1509220730:420,1521921530:480,1540670330:420},
"Asia/Kuala Lumpur":{1235714331:480},
"Asia/Kuching":{1235714331:480},
"Asia/Kuwait":{1235714332:180},
"Asia/Macau":{1235714333:480},
"Asia/Magadan":{1235714333:660,1238255933:720,1256399933:660,1269705533:720,1288454333:660,1301155133:720,1319903933:660,1332604733:720,1351353533:660,1364659133:720,1382803133:660,1396108733:720,1414252733:660,1427558333:720,1445702333:660,1459007933:720,1477756733:660,1490457533:720,1509206333:660,1521907133:720,1540655933:660},
"Asia/Makassar":{1235714334:480},
"Asia/Manila":{1235714335:480},
"Asia/Muscat":{1235714336:240},
"Asia/New Delhi":{1235714336:330},
"Asia/Nicosia":{1235714337:120,1238291937:180,1256435937:120,1269741537:180,1288490337:120,1301191137:180,1319939937:120,1332640737:180,1351389537:120,1364695137:180,1382839137:120,1396144737:180,1414288737:120,1427594337:180,1445738337:120,1459043937:180,1477792737:120,1490493537:180,1509242337:120,1521943137:180,1540691937:120},
"Asia/Novosibirsk":{1235714338:360,1238273938:420,1256417938:360,1269723538:420,1288472338:360,1301173138:420,1319921938:360,1332622738:420,1351371538:360,1364677138:420,1382821138:360,1396126738:420,1414270738:360,1427576338:420,1445720338:360,1459025938:420,1477774738:360,1490475538:420,1509224338:360,1521925138:420,1540673938:360},
"Asia/Omsk":{1235714339:360,1238273939:420,1256417939:360,1269723539:420,1288472339:360,1301173139:420,1319921939:360,1332622739:420,1351371539:360,1364677139:420,1382821139:360,1396126739:420,1414270739:360,1427576339:420,1445720339:360,1459025939:420,1477774739:360,1490475539:420,1509224339:360,1521925139:420,1540673939:360},
"Asia/Oral":{1235714339:300},
"Asia/Phnom Penh":{1235714340:420},
"Asia/Pontianak":{1235714341:420},
"Asia/Pyongyang":{1235714342:540},
"Asia/Qatar":{1235714342:180},
"Asia/Qyzylorda":{1235714343:360},
"Asia/Rangoon":{1235714344:390},
"Asia/Riyadh":{1235714345:180},
"Asia/Sakhalin":{1235714345:600,1238259545:660,1256403545:600,1269709145:660,1288457945:600,1301158745:660,1319907545:600,1332608345:660,1351357145:600,1364662745:660,1382806745:600,1396112345:660,1414256345:600,1427561945:660,1445705945:600,1459011545:660,1477760345:600,1490461145:660,1509209945:600,1521910745:660,1540659545:600},
"Asia/Samarkand":{1235714346:300},
"Asia/Seoul":{1235714347:540},
"Asia/Shanghai":{1235714348:480},
"Asia/Singapore":{1235714348:480},
"Asia/Taipei":{1235714349:480},
"Asia/Tashkent":{1235714350:300},
"Asia/Tbilisi":{1235714351:240},
"Asia/Tehran":{1235714351:210,1237669151:270,1253563151:210,1269205151:270,1285099151:210,1300741151:270,1316635151:210,1332277151:270,1348171151:210,1363899551:270,1379793551:210,1395435551:270,1411329551:210,1426971551:270,1442865551:210,1458507551:270,1474401551:210,1490129951:270,1506023951:210,1521665951:270,1537559951:210},
"Asia/Thimphu":{1235714352:360},
"Asia/Tokyo":{1235714353:540},
"Asia/Ulaanbaatar":{1235714353:480},
"Asia/Urumqi":{1235714354:480},
"Asia/Vientiane":{1235714355:420},
"Asia/Vladivostok":{1235714356:600,1238259556:660,1256403556:600,1269709156:660,1288457956:600,1301158756:660,1319907556:600,1332608356:660,1351357156:600,1364662756:660,1382806756:600,1396112356:660,1414256356:600,1427561956:660,1445705956:600,1459011556:660,1477760356:600,1490461156:660,1509209956:600,1521910756:660,1540659556:600},
"Asia/Yakutsk":{1235714356:540,1238263156:600,1256407156:540,1269712756:600,1288461556:540,1301162356:600,1319911156:540,1332611956:600,1351360756:540,1364666356:600,1382810356:540,1396115956:600,1414259956:540,1427565556:600,1445709556:540,1459015156:600,1477763956:540,1490464756:600,1509213556:540,1521914356:600,1540663156:540},
"Asia/Yekaterinburg":{1235714357:300,1238277557:360,1256421557:300,1269727157:360,1288475957:300,1301176757:360,1319925557:300,1332626357:360,1351375157:300,1364680757:360,1382824757:300,1396130357:360,1414274357:300,1427579957:360,1445723957:300,1459029557:360,1477778357:300,1490479157:360,1509227957:300,1521928757:360,1540677557:300},
"Asia/Yerevan":{1235714358:240,1238281158:300,1256425158:240,1269730758:300,1288479558:240,1301180358:300,1319929158:240,1332629958:300,1351378758:240,1364684358:300,1382828358:240,1396133958:300,1414277958:240,1427583558:300,1445727558:240,1459033158:300,1477781958:240,1490482758:300,1509231558:240,1521932358:300,1540681158:240},
"Atlantic/Azores":{1235714359:-60,1238291959:0,1256435959:-60,1269741559:0,1288490359:-60,1301191159:0,1319939959:-60,1332640759:0,1351389559:-60,1364695159:0,1382839159:-60,1396144759:0,1414288759:-60,1427594359:0,1445738359:-60,1459043959:0,1477792759:-60,1490493559:0,1509242359:-60,1521943159:0,1540691959:-60},
"Atlantic/Bermuda":{1235714360:-240,1236495560:-180,1257055160:-240,1268549960:-180,1289109560:-240,1299999560:-180,1320559160:-240,1331449160:-180,1352008760:-240,1362898760:-180,1383458360:-240,1394348360:-180,1414907960:-240,1425797960:-180,1446357560:-240,1457852360:-180,1478411960:-240,1489301960:-180,1509861560:-240,1520751560:-180,1541311160:-240},
"Atlantic/Canary":{1235714360:0,1238291960:60,1256435960:0,1269741560:60,1288490360:0,1301191160:60,1319939960:0,1332640760:60,1351389560:0,1364695160:60,1382839160:0,1396144760:60,1414288760:0,1427594360:60,1445738360:0,1459043960:60,1477792760:0,1490493560:60,1509242360:0,1521943160:60,1540691960:0},
"Atlantic/Cape Verde":{1235714361:-60},
"Atlantic/Faroe":{1235714362:0,1238291962:60,1256435962:0,1269741562:60,1288490362:0,1301191162:60,1319939962:0,1332640762:60,1351389562:0,1364695162:60,1382839162:0,1396144762:60,1414288762:0,1427594362:60,1445738362:0,1459043962:60,1477792762:0,1490493562:60,1509242362:0,1521943162:60,1540691962:0},
"Atlantic/Madeira":{1235714363:0,1238291963:60,1256435963:0,1269741563:60,1288490363:0,1301191163:60,1319939963:0,1332640763:60,1351389563:0,1364695163:60,1382839163:0,1396144763:60,1414288763:0,1427594363:60,1445738363:0,1459043963:60,1477792763:0,1490493563:60,1509242363:0,1521943163:60,1540691963:0},
"Atlantic/Reykjavik":{1235714363:0},
"Atlantic/South Georgia":{1235714364:-120},
"Atlantic/St Helena":{1235714364:0},
"Atlantic/Stanley":{1235714365:-180,1240120765:-240,1252220365:-180,1271570365:-240,1283669965:-180,1303019965:-240,1315119565:-180,1334469565:-240,1346569165:-180,1366523965:-240,1378018765:-180,1397973565:-240,1410073165:-180,1429423165:-240,1441522765:-180,1460872765:-240,1472972365:-180,1492322365:-240,1504421965:-180,1523771965:-240,1535871565:-180},
"Australia/Adelaide":{1235714366:630,1238864366:570,1254589166:630,1270313966:570,1286038766:630,1301763566:570,1317488366:630,1333213166:570,1349542766:630,1365267566:570,1380992366:630,1396717166:570,1412441966:630,1428166766:570,1443891566:630,1459616366:570,1475341166:630,1491065966:570,1506790766:630,1522515566:570,1538845166:630},
"Australia/Brisbane":{1235714367:600},
"Australia/Broken Hill":{1235714368:630,1238864368:570,1254589168:630,1270313968:570,1286038768:630,1301763568:570,1317488368:630,1333213168:570,1349542768:630,1365267568:570,1380992368:630,1396717168:570,1412441968:630,1428166768:570,1443891568:630,1459616368:570,1475341168:630,1491065968:570,1506790768:630,1522515568:570,1538845168:630},
"Australia/Currie":{1235714368:660,1238864368:600,1254589168:660,1270313968:600,1286038768:660,1301763568:600,1317488368:660,1333213168:600,1349542768:660,1365267568:600,1380992368:660,1396717168:600,1412441968:660,1428166768:600,1443891568:660,1459616368:600,1475341168:660,1491065968:600,1506790768:660,1522515568:600,1538845168:660},
"Australia/Darwin":{1235714369:570},
"Australia/Eucla":{1235714370:585,1238263170:525},
"Australia/Hobart":{1235714371:660,1238864371:600,1254589171:660,1270313971:600,1286038771:660,1301763571:600,1317488371:660,1333213171:600,1349542771:660,1365267571:600,1380992371:660,1396717171:600,1412441971:660,1428166771:600,1443891571:660,1459616371:600,1475341171:660,1491065971:600,1506790771:660,1522515571:600,1538845171:660},
"Australia/Lindeman":{1235714371:600},
"Australia/Lord Howe":{1235714372:660,1238860772:630,1254585572:660,1270310372:630,1286035172:660,1301759972:630,1317484772:660,1333209572:630,1349539172:660,1365263972:630,1380988772:660,1396713572:630,1412438372:660,1428163172:630,1443887972:660,1459612772:630,1475337572:660,1491062372:630,1506787172:660,1522511972:630,1538841572:660},
"Australia/Melbourne":{1235714373:660,1238864373:600,1254589173:660,1270313973:600,1286038773:660,1301763573:600,1317488373:660,1333213173:600,1349542773:660,1365267573:600,1380992373:660,1396717173:600,1412441973:660,1428166773:600,1443891573:660,1459616373:600,1475341173:660,1491065973:600,1506790773:660,1522515573:600,1538845173:660},
"Australia/Perth":{1235714374:540,1238266774:480},
"Australia/Sydney":{1235714374:660,1238864374:600,1254589174:660,1270313974:600,1286038774:660,1301763574:600,1317488374:660,1333213174:600,1349542774:660,1365267574:600,1380992374:660,1396717174:600,1412441974:660,1428166774:600,1443891574:660,1459616374:600,1475341174:660,1491065974:600,1506790774:660,1522515574:600,1538845174:660},
"Europe/Amsterdam":{1235714375:60,1238291975:120,1256435975:60,1269741575:120,1288490375:60,1301191175:120,1319939975:60,1332640775:120,1351389575:60,1364695175:120,1382839175:60,1396144775:120,1414288775:60,1427594375:120,1445738375:60,1459043975:120,1477792775:60,1490493575:120,1509242375:60,1521943175:120,1540691975:60},
"Europe/Andorra":{1235714376:60,1238291976:120,1256435976:60,1269741576:120,1288490376:60,1301191176:120,1319939976:60,1332640776:120,1351389576:60,1364695176:120,1382839176:60,1396144776:120,1414288776:60,1427594376:120,1445738376:60,1459043976:120,1477792776:60,1490493576:120,1509242376:60,1521943176:120,1540691976:60},
"Europe/Athens":{1235714377:120,1238291977:180,1256435977:120,1269741577:180,1288490377:120,1301191177:180,1319939977:120,1332640777:180,1351389577:120,1364695177:180,1382839177:120,1396144777:180,1414288777:120,1427594377:180,1445738377:120,1459043977:180,1477792777:120,1490493577:180,1509242377:120,1521943177:180,1540691977:120},
"Europe/Belgrade":{1235714377:60,1238291977:120,1256435977:60,1269741577:120,1288490377:60,1301191177:120,1319939977:60,1332640777:120,1351389577:60,1364695177:120,1382839177:60,1396144777:120,1414288777:60,1427594377:120,1445738377:60,1459043977:120,1477792777:60,1490493577:120,1509242377:60,1521943177:120,1540691977:60},
"Europe/Berlin":{1235714378:60,1238291978:120,1256435978:60,1269741578:120,1288490378:60,1301191178:120,1319939978:60,1332640778:120,1351389578:60,1364695178:120,1382839178:60,1396144778:120,1414288778:60,1427594378:120,1445738378:60,1459043978:120,1477792778:60,1490493578:120,1509242378:60,1521943178:120,1540691978:60},
"Europe/Brussels":{1235714379:60,1238291979:120,1256435979:60,1269741579:120,1288490379:60,1301191179:120,1319939979:60,1332640779:120,1351389579:60,1364695179:120,1382839179:60,1396144779:120,1414288779:60,1427594379:120,1445738379:60,1459043979:120,1477792779:60,1490493579:120,1509242379:60,1521943179:120,1540691979:60},
"Europe/Bucharest":{1235714380:120,1238291980:180,1256435980:120,1269741580:180,1288490380:120,1301191180:180,1319939980:120,1332640780:180,1351389580:120,1364695180:180,1382839180:120,1396144780:180,1414288780:120,1427594380:180,1445738380:120,1459043980:180,1477792780:120,1490493580:180,1509242380:120,1521943180:180,1540691980:120},
"Europe/Budapest":{1235714381:60,1238291981:120,1256435981:60,1269741581:120,1288490381:60,1301191181:120,1319939981:60,1332640781:120,1351389581:60,1364695181:120,1382839181:60,1396144781:120,1414288781:60,1427594381:120,1445738381:60,1459043981:120,1477792781:60,1490493581:120,1509242381:60,1521943181:120,1540691981:60},
"Europe/Chisinau":{1235714381:120,1238291981:180,1256435981:120,1269741581:180,1288490381:120,1301191181:180,1319939981:120,1332640781:180,1351389581:120,1364695181:180,1382839181:120,1396144781:180,1414288781:120,1427594381:180,1445738381:120,1459043981:180,1477792781:120,1490493581:180,1509242381:120,1521943181:180,1540691981:120},
"Europe/Copenhagen":{1235714382:60,1238291982:120,1256435982:60,1269741582:120,1288490382:60,1301191182:120,1319939982:60,1332640782:120,1351389582:60,1364695182:120,1382839182:60,1396144782:120,1414288782:60,1427594382:120,1445738382:60,1459043982:120,1477792782:60,1490493582:120,1509242382:60,1521943182:120,1540691982:60},
"Europe/Dublin":{1235714383:0,1238291983:60,1256435983:0,1269741583:60,1288490383:0,1301191183:60,1319939983:0,1332640783:60,1351389583:0,1364695183:60,1382839183:0,1396144783:60,1414288783:0,1427594383:60,1445738383:0,1459043983:60,1477792783:0,1490493583:60,1509242383:0,1521943183:60,1540691983:0},
"Europe/Gibraltar":{1235714384:60,1238291984:120,1256435984:60,1269741584:120,1288490384:60,1301191184:120,1319939984:60,1332640784:120,1351389584:60,1364695184:120,1382839184:60,1396144784:120,1414288784:60,1427594384:120,1445738384:60,1459043984:120,1477792784:60,1490493584:120,1509242384:60,1521943184:120,1540691984:60},
"Europe/Helsinki":{1235714384:120,1238291984:180,1256435984:120,1269741584:180,1288490384:120,1301191184:180,1319939984:120,1332640784:180,1351389584:120,1364695184:180,1382839184:120,1396144784:180,1414288784:120,1427594384:180,1445738384:120,1459043984:180,1477792784:120,1490493584:180,1509242384:120,1521943184:180,1540691984:120},
"Europe/Istanbul":{1235714385:120,1238291985:180,1256435985:120,1269741585:180,1288490385:120,1301191185:180,1319939985:120,1332640785:180,1351389585:120,1364695185:180,1382839185:120,1396144785:180,1414288785:120,1427594385:180,1445738385:120,1459043985:180,1477792785:120,1490493585:180,1509242385:120,1521943185:180,1540691985:120},
"Europe/Kaliningrad":{1235714386:120,1238288386:180,1256432386:120,1269737986:180,1288486786:120,1301187586:180,1319936386:120,1332637186:180,1351385986:120,1364691586:180,1382835586:120,1396141186:180,1414285186:120,1427590786:180,1445734786:120,1459040386:180,1477789186:120,1490489986:180,1509238786:120,1521939586:180,1540688386:120},
"Europe/Kiev":{1235714387:120,1238291987:180,1256435987:120,1269741587:180,1288490387:120,1301191187:180,1319939987:120,1332640787:180,1351389587:120,1364695187:180,1382839187:120,1396144787:180,1414288787:120,1427594387:180,1445738387:120,1459043987:180,1477792787:120,1490493587:180,1509242387:120,1521943187:180,1540691987:120},
"Europe/Lisbon":{1235714387:0,1238291987:60,1256435987:0,1269741587:60,1288490387:0,1301191187:60,1319939987:0,1332640787:60,1351389587:0,1364695187:60,1382839187:0,1396144787:60,1414288787:0,1427594387:60,1445738387:0,1459043987:60,1477792787:0,1490493587:60,1509242387:0,1521943187:60,1540691987:0},
"Europe/London":{1235714388:0,1238291988:60,1256435988:0,1269741588:60,1288490388:0,1301191188:60,1319939988:0,1332640788:60,1351389588:0,1364695188:60,1382839188:0,1396144788:60,1414288788:0,1427594388:60,1445738388:0,1459043988:60,1477792788:0,1490493588:60,1509242388:0,1521943188:60,1540691988:0},
"Europe/Luxembourg":{1235714389:60,1238291989:120,1256435989:60,1269741589:120,1288490389:60,1301191189:120,1319939989:60,1332640789:120,1351389589:60,1364695189:120,1382839189:60,1396144789:120,1414288789:60,1427594389:120,1445738389:60,1459043989:120,1477792789:60,1490493589:120,1509242389:60,1521943189:120,1540691989:60},
"Europe/Madrid":{1235714390:60,1238291990:120,1256435990:60,1269741590:120,1288490390:60,1301191190:120,1319939990:60,1332640790:120,1351389590:60,1364695190:120,1382839190:60,1396144790:120,1414288790:60,1427594390:120,1445738390:60,1459043990:120,1477792790:60,1490493590:120,1509242390:60,1521943190:120,1540691990:60},
"Europe/Malta":{1235714391:60,1238291991:120,1256435991:60,1269741591:120,1288490391:60,1301191191:120,1319939991:60,1332640791:120,1351389591:60,1364695191:120,1382839191:60,1396144791:120,1414288791:60,1427594391:120,1445738391:60,1459043991:120,1477792791:60,1490493591:120,1509242391:60,1521943191:120,1540691991:60},
"Europe/Minsk":{1235714391:120,1238288391:180,1256432391:120,1269737991:180,1288486791:120,1301187591:180,1319936391:120,1332637191:180,1351385991:120,1364691591:180,1382835591:120,1396141191:180,1414285191:120,1427590791:180,1445734791:120,1459040391:180,1477789191:120,1490489991:180,1509238791:120,1521939591:180,1540688391:120},
"Europe/Monaco":{1235714392:60,1238291992:120,1256435992:60,1269741592:120,1288490392:60,1301191192:120,1319939992:60,1332640792:120,1351389592:60,1364695192:120,1382839192:60,1396144792:120,1414288792:60,1427594392:120,1445738392:60,1459043992:120,1477792792:60,1490493592:120,1509242392:60,1521943192:120,1540691992:60},
"Europe/Moscow":{1235714393:180,1238284793:240,1256428793:180,1269734393:240,1288483193:180,1301183993:240,1319932793:180,1332633593:240,1351382393:180,1364687993:240,1382831993:180,1396137593:240,1414281593:180,1427587193:240,1445731193:180,1459036793:240,1477785593:180,1490486393:240,1509235193:180,1521935993:240,1540684793:180},
"Europe/Oslo":{1235714394:60,1238291994:120,1256435994:60,1269741594:120,1288490394:60,1301191194:120,1319939994:60,1332640794:120,1351389594:60,1364695194:120,1382839194:60,1396144794:120,1414288794:60,1427594394:120,1445738394:60,1459043994:120,1477792794:60,1490493594:120,1509242394:60,1521943194:120,1540691994:60},
"Europe/Paris":{1235714394:60,1238291994:120,1256435994:60,1269741594:120,1288490394:60,1301191194:120,1319939994:60,1332640794:120,1351389594:60,1364695194:120,1382839194:60,1396144794:120,1414288794:60,1427594394:120,1445738394:60,1459043994:120,1477792794:60,1490493594:120,1509242394:60,1521943194:120,1540691994:60},
"Europe/Prague":{1235714395:60,1238291995:120,1256435995:60,1269741595:120,1288490395:60,1301191195:120,1319939995:60,1332640795:120,1351389595:60,1364695195:120,1382839195:60,1396144795:120,1414288795:60,1427594395:120,1445738395:60,1459043995:120,1477792795:60,1490493595:120,1509242395:60,1521943195:120,1540691995:60},
"Europe/Riga":{1235714396:120,1238291996:180,1256435996:120,1269741596:180,1288490396:120,1301191196:180,1319939996:120,1332640796:180,1351389596:120,1364695196:180,1382839196:120,1396144796:180,1414288796:120,1427594396:180,1445738396:120,1459043996:180,1477792796:120,1490493596:180,1509242396:120,1521943196:180,1540691996:120},
"Europe/Rome":{1235714397:60,1238291997:120,1256435997:60,1269741597:120,1288490397:60,1301191197:120,1319939997:60,1332640797:120,1351389597:60,1364695197:120,1382839197:60,1396144797:120,1414288797:60,1427594397:120,1445738397:60,1459043997:120,1477792797:60,1490493597:120,1509242397:60,1521943197:120,1540691997:60},
"Europe/Samara":{1235714398:240,1238281198:300,1256425198:240,1269730798:300,1288479598:240,1301180398:300,1319929198:240,1332629998:300,1351378798:240,1364684398:300,1382828398:240,1396133998:300,1414277998:240,1427583598:300,1445727598:240,1459033198:300,1477781998:240,1490482798:300,1509231598:240,1521932398:300,1540681198:240},
"Europe/Simferopol":{1235714398:120,1238291998:180,1256435998:120,1269741598:180,1288490398:120,1301191198:180,1319939998:120,1332640798:180,1351389598:120,1364695198:180,1382839198:120,1396144798:180,1414288798:120,1427594398:180,1445738398:120,1459043998:180,1477792798:120,1490493598:180,1509242398:120,1521943198:180,1540691998:120},
"Europe/Sofia":{1235714399:120,1238291999:180,1256435999:120,1269741599:180,1288490399:120,1301191199:180,1319939999:120,1332640799:180,1351389599:120,1364695199:180,1382839199:120,1396144799:180,1414288799:120,1427594399:180,1445738399:120,1459043999:180,1477792799:120,1490493599:180,1509242399:120,1521943199:180,1540691999:120},
"Europe/Stockholm":{1235714400:60,1238288400:120,1256432400:60,1269738000:120,1288486800:60,1301187600:120,1319936400:60,1332637200:120,1351386000:60,1364691600:120,1382835600:60,1396141200:120,1414285200:60,1427590800:120,1445734800:60,1459040400:120,1477789200:60,1490490000:120,1509238800:60,1521939600:120,1540688400:60},
"Europe/Tallinn":{1235714401:120,1238288401:180,1256432401:120,1269738001:180,1288486801:120,1301187601:180,1319936401:120,1332637201:180,1351386001:120,1364691601:180,1382835601:120,1396141201:180,1414285201:120,1427590801:180,1445734801:120,1459040401:180,1477789201:120,1490490001:180,1509238801:120,1521939601:180,1540688401:120},
"Europe/Tirane":{1235714401:60,1238288401:120,1256432401:60,1269738001:120,1288486801:60,1301187601:120,1319936401:60,1332637201:120,1351386001:60,1364691601:120,1382835601:60,1396141201:120,1414285201:60,1427590801:120,1445734801:60,1459040401:120,1477789201:60,1490490001:120,1509238801:60,1521939601:120,1540688401:60},
"Europe/Uzhgorod":{1235714402:120,1238288402:180,1256432402:120,1269738002:180,1288486802:120,1301187602:180,1319936402:120,1332637202:180,1351386002:120,1364691602:180,1382835602:120,1396141202:180,1414285202:120,1427590802:180,1445734802:120,1459040402:180,1477789202:120,1490490002:180,1509238802:120,1521939602:180,1540688402:120},
"Europe/Vaduz":{1235714403:60,1238288403:120,1256432403:60,1269738003:120,1288486803:60,1301187603:120,1319936403:60,1332637203:120,1351386003:60,1364691603:120,1382835603:60,1396141203:120,1414285203:60,1427590803:120,1445734803:60,1459040403:120,1477789203:60,1490490003:120,1509238803:60,1521939603:120,1540688403:60},
"Europe/Vienna":{1235714404:60,1238288404:120,1256432404:60,1269738004:120,1288486804:60,1301187604:120,1319936404:60,1332637204:120,1351386004:60,1364691604:120,1382835604:60,1396141204:120,1414285204:60,1427590804:120,1445734804:60,1459040404:120,1477789204:60,1490490004:120,1509238804:60,1521939604:120,1540688404:60},
"Europe/Vilnius":{1235714404:120,1238288404:180,1256432404:120,1269738004:180,1288486804:120,1301187604:180,1319936404:120,1332637204:180,1351386004:120,1364691604:180,1382835604:120,1396141204:180,1414285204:120,1427590804:180,1445734804:120,1459040404:180,1477789204:120,1490490004:180,1509238804:120,1521939604:180,1540688404:120},
"Europe/Volgograd":{1235714405:180,1238281205:240,1256425205:180,1269730805:240,1288479605:180,1301180405:240,1319929205:180,1332630005:240,1351378805:180,1364684405:240,1382828405:180,1396134005:240,1414278005:180,1427583605:240,1445727605:180,1459033205:240,1477782005:180,1490482805:240,1509231605:180,1521932405:240,1540681205:180},
"Europe/Warsaw":{1235714406:60,1238288406:120,1256432406:60,1269738006:120,1288486806:60,1301187606:120,1319936406:60,1332637206:120,1351386006:60,1364691606:120,1382835606:60,1396141206:120,1414285206:60,1427590806:120,1445734806:60,1459040406:120,1477789206:60,1490490006:120,1509238806:60,1521939606:120,1540688406:60},
"Europe/Zaporozhye":{1235714407:120,1238288407:180,1256432407:120,1269738007:180,1288486807:120,1301187607:180,1319936407:120,1332637207:180,1351386007:120,1364691607:180,1382835607:120,1396141207:180,1414285207:120,1427590807:180,1445734807:120,1459040407:180,1477789207:120,1490490007:180,1509238807:120,1521939607:180,1540688407:120},
"Europe/Zurich":{1235714408:60,1238288408:120,1256432408:60,1269738008:120,1288486808:60,1301187608:120,1319936408:60,1332637208:120,1351386008:60,1364691608:120,1382835608:60,1396141208:120,1414285208:60,1427590808:120,1445734808:60,1459040408:120,1477789208:60,1490490008:120,1509238808:60,1521939608:120,1540688408:60},
"GMT-12":{0:-720},
"GMT-11":{0:-660},
"GMT-10":{0:-600},
"GMT-09":{0:-540},
"GMT-08":{0:-480},
"GMT-07":{0:-420},
"GMT-06":{0:-360},
"GMT-05":{0:-300},
"GMT-04":{0:-240},
"GMT-03":{0:-180},
"GMT-02":{0:-120},
"GMT-01":{0:-60},
"GMT+00":{0:0},
"GMT+01":{0:60},
"GMT+02":{0:120},
"GMT+03":{0:180},
"GMT+04":{0:240},
"GMT+05":{0:300},
"GMT+06":{0:360},
"GMT+07":{0:420},
"GMT+08":{0:480},
"GMT+09":{0:540},
"GMT+10":{0:600},
"GMT+11":{0:660},
"Indian Ocean/Antananarivo":{1235714408:180},
"Indian Ocean/Chagos":{1235714409:360},
"Indian Ocean/Christmas":{1235714410:420},
"Indian Ocean/Cocos":{1235714410:390},
"Indian Ocean/Comoro":{1235714411:180},
"Indian Ocean/Kerguelen":{1235714411:300},
"Indian Ocean/Mahe":{1235714412:240},
"Indian Ocean/Maldives":{1235714413:300},
"Indian Ocean/Mauritius":{1235714414:300,1238277614:240,1256421614:300,1269727214:240,1288476014:300,1301176814:240,1319925614:300,1332626414:240,1351375214:300,1364680814:240,1382824814:300,1396130414:240,1414274414:300,1427580014:240,1445724014:300,1459029614:240,1477778414:300,1490479214:240,1509228014:300,1521928814:240,1540677614:300},
"Indian Ocean/Mayotte":{1235714414:180},
"Indian Ocean/Reunion":{1235714415:240},
"Pacific/Apia":{1235714416:-660},
"Pacific/Auckland":{1235714416:780,1238853616:720,1253973616:780,1270303216:720,1285423216:780,1301752816:720,1316872816:780,1333202416:720,1348927216:780,1365256816:720,1380376816:780,1396706416:720,1411826416:780,1428156016:720,1443276016:780,1459605616:720,1474725616:780,1491055216:720,1506175216:780,1522504816:720,1538229616:780},
"Pacific/Chatham":{1235714417:825,1238853617:765,1253973617:825,1270303217:765,1285423217:825,1301752817:765,1316872817:825,1333202417:765,1348927217:825,1365256817:765,1380376817:825,1396706417:765,1411826417:825,1428156017:765,1443276017:825,1459605617:765,1474725617:825,1491055217:765,1506175217:825,1522504817:765,1538229617:825},
"Pacific/Easter":{1235714418:-300,1237086018:-360,1255233618:-300,1268535618:-360,1286683218:-300,1299985218:-360,1318132818:-300,1331434818:-360,1350187218:-300,1362884418:-360,1381636818:-300,1394334018:-360,1413086418:-300,1426388418:-360,1444536018:-300,1457838018:-360,1475985618:-300,1489287618:-360,1508040018:-300,1520737218:-360,1539489618:-300},
"Pacific/Efate":{1235714419:660},
"Pacific/Enderbury":{1235714420:780},
"Pacific/Fakaofo":{1235714420:-600},
"Pacific/Fiji":{1235714421:720},
"Pacific/Funafuti":{1235714421:720},
"Pacific/Galapagos":{1235714422:-360},
"Pacific/Gambier":{1235714423:-540},
"Pacific/Guadalcanal":{1235714423:660},
"Pacific/Guam":{1235714424:600},
"Pacific/Honolulu":{1235714425:-600},
"Pacific/Johnston":{1235714425:-600},
"Pacific/Kiritimati":{1235714426:840},
"Pacific/Kosrae":{1235714427:660},
"Pacific/Kwajalein":{1235714427:720},
"Pacific/Majuro":{1235714428:720},
"Pacific/Marquesas":{1235714429:-570},
"Pacific/Midway":{1235714429:-660},
"Pacific/Nauru":{1235714430:720},
"Pacific/Niue":{1235714431:-660},
"Pacific/Norfolk":{1235714432:690},
"Pacific/Noumea":{1235714432:660},
"Pacific/Pago Pago":{1235714433:-660},
"Pacific/Palau":{1235714434:540},
"Pacific/Pitcairn":{1235714434:-480},
"Pacific/Ponape":{1235714435:660},
"Pacific/Port Moresby":{1235714435:600},
"Pacific/Rarotonga":{1235714436:-600},
"Pacific/Saipan":{1235714437:600},
"Pacific/Tahiti":{1235714437:-600},
"Pacific/Tarawa":{1235714438:720},
"Pacific/Tongatapu":{1235714438:780},
"Pacific/Truk":{1235714439:600},
"Pacific/Wake":{1235714440:720},
"Pacific/Wallis":{1235714440:720},
"UTC":{1235714440:0}
};
/* 
 * This code from
 * http://www.srrb.noaa.gov/highlights/sunrise/calcdetails.html
 *
 */

//***********************************************************************/
//*	DATA STRUCTURES									*/
//***********************************************************************/

	function month(name, numdays, abbr) 
	{
		this.name = name;
		this.numdays = numdays;
		this.abbr = abbr;
	}

//*********************************************************************/

	function ans(daySave,value)
	{
		this.daySave = daySave;
		this.value = value;
	}

//*********************************************************************/

	function city(name, lat, lng, zoneHr) 
	{
		this.name = name;
		this.lat = lat;
		this.lng = lng;
		this.zoneHr = zoneHr;
	}


//***********************************************************************/
//*	Data for Selectbox Controls							*/
//***********************************************************************/

	var monthList = new Array();	//	list of months and days for non-leap year
	var i = 0;
	monthList[i++] = new month("January", 31, "Jan");
	monthList[i++] = new month("February", 28, "Feb");
	monthList[i++] = new month("March", 31, "Mar");
	monthList[i++] = new month("April", 30, "Apr");
	monthList[i++] = new month("May", 31, "May");
	monthList[i++] = new month("June", 30, "Jun");
	monthList[i++] = new month("July", 31, "Jul");
	monthList[i++] = new month("August", 31, "Aug");
	monthList[i++] = new month("September", 30, "Sep");
	monthList[i++] = new month("October", 31, "Oct");
	monthList[i++] = new month("November", 30, "Nov");
	monthList[i++] = new month("December", 31, "Dec");

//*********************************************************************/

	var YesNo = new Array();	//Daylight Saving array	
	i=0;
	YesNo[i++] = new ans("No",0);
	YesNo[i++] = new ans("Yes",60);

//*********************************************************************/

	var City = new Array();

	j = 0;
	City[j++] = new city("Enter Lat/Long -->",0,0,0);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("US CITIES",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
	City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
	City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
	City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
	City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
	City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
	City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
	City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
	City[j++] = new city("Chicago, IL", 41.85,87.65,6);
	City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
	City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
	City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
	City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
	City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
	City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
	City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
	City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
	City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
	City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
	City[j++] = new city("Miami, FL", 25.767, 80.183,5);
	City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
	City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
	City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
	City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
	City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
	City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
	City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
	City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
	City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
	City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
	City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
	City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
	City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
	City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
	City[j++] = new city("Seattle, WA",47.60,122.3167,8);
	City[j++] = new city("Washington DC", 38.8833, 77.0333,5);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("WORLD CITIES",0,0,0);
	City[j++] = new city("Beijing, China",39.9167, -116.4167,-8);
	City[j++] = new city("Berlin, Germany",52.33, -13.30, -1);
	City[j++] = new city("Bombay, India", 18.9333, -72.8333, -5.5);
	City[j++] = new city("Buenos Aires, Argentina", -34.60,58.45,3);
	City[j++] = new city("Cairo, Egypt", 30.10,-31.3667,-2);
	City[j++] = new city("Cape Town, South Africa",-33.9167,-18.3667,-2);
	City[j++] = new city("Caracas, Venezuela", 10.50,66.9333,4);
	City[j++] = new city("Helsinki, Finland", 60.1667, -24.9667,-2);
	City[j++] = new city("Hong Kong, China", 22.25,-114.1667, -8);
	City[j++] = new city("Jerusalem, Israel", 31.7833, -35.2333, -2);
	City[j++] = new city("London, England", 51.50, 0.1667,0);
	City[j++] = new city("Mexico City, Mexico", 19.4,99.15,6);
	City[j++] = new city("Moscow, Russia", 55.75, -37.5833, -3);
	City[j++] = new city("New Delhi, India",28.6, -77.2, -5.5);
	City[j++] = new city("Ottawa, Canada", 45.41667,75.7,5);
	City[j++] = new city("Paris, France", 48.8667, -2.667, -1);
	City[j++] = new city("Rio de Janeiro, Brazil",-22.90,43.2333,3);
	City[j++] = new city("Riyadh, Saudi Arabia", 24.633, -46.71667, -3);
	City[j++] = new city("Rome, Italy",41.90, -12.4833,-1);
	City[j++] = new city("Sydney, Australia",-33.8667,-151.2167,-10);
	City[j++] = new city("Tokyo, Japan", 35.70, -139.7667, -9); 
	City[j++] = new city("Zurich, Switzerland", 47.3833, -8.5333,-1);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("SURFRAD NETWORK",0,0,0);
	City[j++] = new city("Goodwin Creek, MS",34.2544444,89.8738888, 6);
	City[j++] = new city("Fort Peck, MT",48.310555,105.1025, 7);
	City[j++] = new city("Bondville, IL",40.055277,88.371944, 6);
	City[j++] = new city("Table Mountain, CO",40.125,105.23694, 7);
	City[j++] = new city("Desert Rock, NV",36.626, 116.018, 8);
	City[j++] = new city("Penn State, PA", 40.72, 77.93, 5);
	City[j++] = new city("Canaan Valley, WV", 39.1, 79.4, 5);
	City[j++] = new city("Sioux Falls, SD", 43.733, 96.6233, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ARM/CART NETWORK",0,0,0);
	City[j++] = new city("Atqasuk, AK", 70.47215, 157.4078, 9);
	City[j++] = new city("Barrow, AK", 71.30,156.683, 9);
	City[j++] = new city("Manus Island, PNG", -2.06, -147.425,-10);
	City[j++] = new city("Nauru Island", -0.52, -166.92, -12);
	City[j++] = new city("Darwin, Australia", -12.425, -130.891, -9.5);
	City[j++] = new city("SGP Central Facility", 36.6167, 97.5, 6);
	City[j++] = new city("",0,0,0);
	City[j++] = new city("ISIS NETWORK",0,0,0);
	City[j++] = new city("Albuquerque, NM", 35.04, 106.62,7);
	City[j++] = new city("Bismarck, ND", 46.77, 100.77,6);
	City[j++] = new city("Hanford, CA", 36.31, 119.63,8);
	City[j++] = new city("Madison, WI", 43.13, 89.33,6);	
	City[j++] = new city("Oak Ridge, TN", 35.96, 84.37,5);
	City[j++] = new city("Salt Lake City, UT", 40.77,111.97,7);
	City[j++] = new city("Seattle, WA", 47.68, 122.25,8);
	City[j++] = new city("Sterling, VA", 38.98, 77.47,5);
	City[j++] = new city("Tallahassee, FL", 30.38, 84.37,5);

//*********************************************************************/

	function setLatLong(f, index)
	{
		// Decimal degrees are passed in the array.  Temporarily store these 
		// degs in lat and lon deg and have convLatLong modify them.

		f["latDeg"].value = City[index].lat;
		f["lonDeg"].value = City[index].lng;
	
		// These are needed to prevent iterative adding of min and sec when 
		// set button is clicked.

		f["latMin"].value = 0;
		f["latSec"].value = 0;
		f["lonMin"].value = 0;
		f["lonSec"].value = 0;
		
		//call convLatLong to convert decimal degrees into table form.

		convLatLong(f);

		//Local time zone value set in table

		f["hrsToGMT"].value =  City[index].zoneHr;
	}


//*********************************************************************/

// isLeapYear returns 1 if the 4-digit yr is a leap year, 0 if it is not

	function isLeapYear(yr) 
	{
		return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);
	}


//*********************************************************************/

// isPosInteger returns false if the value is not a positive integer, true is
// returned otherwise.  The code is from taken from Danny Goodman's Javascript
// Handbook, p. 372.

	function isPosInteger(inputVal) 
	{
		inputStr = ("" + inputVal);
		for (var i = 0; i < inputStr.length; i++) {
			var oneChar = inputStr.charAt(i);
			if (oneChar < "0" || oneChar > "9")
				return false;
		}
		return true;
	}

//*********************************************************************/

	function isInteger(inputVal) 
	{
		inputStr = "" + inputVal;
		if(inputStr == "NaN") return false;
		if(inputStr == "-NaN") return false;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

	function isNumber(inputVal) 
	{
		var oneDecimal = false;
		var inputStr = "" + inputVal;
		for (var i = 0; i < inputStr.length; i++) 
		{
			var oneChar = inputStr.charAt(i);
			if (i == 0 && (oneChar == "-" || oneChar == "+"))
			{
				continue;
			}
			if (oneChar == "." && !oneDecimal) 
			{
				oneDecimal = true;
				continue;
			}
			if (oneChar < "0" || oneChar > "9")
			{
				return false;
			}
		}
		return true;
	}


//*********************************************************************/

// isValidInput makes sure valid input is entered before going ahead to 
// calculate the sunrise and sunset.  False is returned if an invalid entry 
// was made, true is the entry is valid.

	function isValidInput(f, index, latLongForm) 
	{
		if (f["day"].value == "") 
		{	//	see if the day field is empty
			alert("You must enter a day before attempting the calculation.");
			return false;
		}
		else if (f["year"].value == "") 
		{	//	 see if the year field is empty
			alert("You must enter a year before attempting the calculation.");
			return false;
		}
		else if (!isPosInteger(f["day"].value) || f["day"].value == 0)
		{
			alert("The day must be a positive integer.");
			return false;
		}
		else if (!isInteger(f["year"].value)) 
		{
			alert("The year must be an integer.");
			return false;
		}
		else if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}


		//	For the non-February months see if the day entered is greater than
		//	the number of days in the selected month

		else if ((index != 1) && (f["day"].value > monthList[index].numdays)) 
		{
			alert("There are only " + monthList[index].numdays + " days in " 
				+ monthList[index].name + ".");
			return false;
		}

		//	First see if the year entered is a leap year.  If so we have to make sure
		//	the days entered is <= 29.  If not a leap year we make sure that the days
		//	entered is <= 28.

		else if (index == 1) 
		{	//	 month selected is February the screwball month
			if (isLeapYear(f["year"].value)) {	//	year entered is a leap year
				if (f["day"].value > (monthList[index].numdays + 1)) 
				{
					alert("There are only " + (monthList[index].numdays + 1) 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else 
			{	//	year entered is not a leap year
				if (f["day"].value > monthList[index].numdays) 
				{
					alert("There are only " + monthList[index].numdays 
						+ " days in " + monthList[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else 
			return true;	
	}

//*********************************************************************/

//convLatLong converts any type of lat/long input
//into  the table form and then handles bad input
//it is nested in the calcSun function.

	function convLatLong(f)
	{
		if(f["latDeg"].value == "")
		{
			f["latDeg"].value = 0;
		}
		if(f["latMin"].value == "")
		{
			f["latMin"].value = 0;
		}
		if(f["latSec"].value == "")
		{
			f["latSec"].value = 0;
		}
		if(f["lonDeg"].value == "")
		{
			f["lonDeg"].value = 0;
		}
		if(f["lonMin"].value == "")
		{
			f["lonMin"].value = 0;
		}
		if(f["lonSec"].value == "")
		{
			f["lonSec"].value = 0;
		}

		var neg = 0;
		if(f["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var latSeconds = (parseFloat(f["latDeg"].value))*3600 
				+ parseFloat(f["latMin"].value)*60 
				+ parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.floor(latSeconds/3600);
			f["latMin"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((latSeconds
				- (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}
		else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600 
				- parseFloat(f["latMin"].value)*60 
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600) 
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				+ parseFloat(f["lonMin"].value)*60 
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600 
				- parseFloat(f["lonMin"].value)*60 
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		//Test for invalid lat/long input

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}

	}



//***********************************************************************/
//***********************************************************************/
//*												*/
//*This section contains subroutines used in calculating solar position */
//*												*/
//***********************************************************************/
//***********************************************************************/

// Convert radian angle to degrees

	function radToDeg(angleRad) 
	{
		return (180.0 * angleRad / Math.PI);
	}

//*********************************************************************/

// Convert degree angle to radians

	function degToRad(angleDeg) 
	{
		return (Math.PI * angleDeg / 180.0);
	}

//*********************************************************************/


//***********************************************************************/
//* Name:    calcDayOfYear								*/
//* Type:    Function									*/
//* Purpose: Finds numerical day-of-year from mn, day and lp year info  */
//* Arguments:										*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//*   lpyr : 1 if leap year, 0 if not						*/
//* Return value:										*/
//*   The numerical day of year							*/
//***********************************************************************/

	function calcDayOfYear(mn, dy, lpyr) 
	{
		var k = (lpyr ? 1 : 2);
		var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
		return doy;
	}


//***********************************************************************/
//* Name:    calcDayOfWeek								*/
//* Type:    Function									*/
//* Purpose: Derives weekday from Julian Day					*/
//* Arguments:										*/
//*   juld : Julian Day									*/
//* Return value:										*/
//*   String containing name of weekday						*/
//***********************************************************************/

	function calcDayOfWeek(juld)
	{
		var A = (juld + 1.5) % 7;
		var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
		return DOW;
	}


//***********************************************************************/
//* Name:    calcJD									*/
//* Type:    Function									*/
//* Purpose: Julian day from calendar day						*/
//* Arguments:										*/
//*   year : 4 digit year								*/
//*   month: January = 1								*/
//*   day  : 1 - 31									*/
//* Return value:										*/
//*   The Julian day corresponding to the date					*/
//* Note:											*/
//*   Number is returned for start of day.  Fractional days should be	*/
//*   added later.									*/
//***********************************************************************/

	function calcJD(year, month, day)
	{
		if (month <= 2) {
			year -= 1;
			month += 12;
		}
		var A = Math.floor(year/100);
		var B = 2 - A + Math.floor(A/4);

		var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
		return JD;
	}



//***********************************************************************/
//* Name:    calcDateFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar date from Julian Day					*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTHNAME-YYYY					*/
//* Note:											*/
//***********************************************************************/

	function calcDateFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		// alert ("date: " + day + "-" + monthList[month-1].name + "-" + year);
		return (day + "-" + monthList[month-1].name + "-" + year);
	}


//***********************************************************************/
//* Name:    calcDayFromJD								*/
//* Type:    Function									*/
//* Purpose: Calendar day (minus year) from Julian Day			*/
//* Arguments:										*/
//*   jd   : Julian Day									*/
//* Return value:										*/
//*   String date in the form DD-MONTH						*/
//***********************************************************************/

	function calcDayFromJD(jd)
	{
		var z = Math.floor(jd + 0.5);
		var f = (jd + 0.5) - z;

		if (z < 2299161) {
			var A = z;
		} else {
			alpha = Math.floor((z - 1867216.25)/36524.25);
			var A = z + 1 + alpha - Math.floor(alpha/4);
		}

		var B = A + 1524;
		var C = Math.floor((B - 122.1)/365.25);
		var D = Math.floor(365.25 * C);
		var E = Math.floor((B - D)/30.6001);

		var day = B - D - Math.floor(30.6001 * E) + f;
		var month = (E < 14) ? E - 1 : E - 13;
		var year = (month > 2) ? C - 4716 : C - 4715;

		return ((day<10 ? "0" : "") + day + monthList[month-1].abbr);
	}


//***********************************************************************/
//* Name:    calcTimeJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert Julian Day to centuries since J2000.0.			*/
//* Arguments:										*/
//*   jd : the Julian Day to convert						*/
//* Return value:										*/
//*   the T value corresponding to the Julian Day				*/
//***********************************************************************/

	function calcTimeJulianCent(jd)
	{
		var T = (jd - 2451545.0)/36525.0;
		return T;
	}


//***********************************************************************/
//* Name:    calcJDFromJulianCent							*/
//* Type:    Function									*/
//* Purpose: convert centuries since J2000.0 to Julian Day.			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Julian Day corresponding to the t value				*/
//***********************************************************************/

	function calcJDFromJulianCent(t)
	{
		var JD = t * 36525.0 + 2451545.0;
		return JD;
	}


//***********************************************************************/
//* Name:    calGeomMeanLongSun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Longitude of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Longitude of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanLongSun(t)
	{
		var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
		while(L0 > 360.0)
		{
			L0 -= 360.0;
		}
		while(L0 < 0.0)
		{
			L0 += 360.0;
		}
		return L0;		// in degrees
	}


//***********************************************************************/
//* Name:    calGeomAnomalySun							*/
//* Type:    Function									*/
//* Purpose: calculate the Geometric Mean Anomaly of the Sun		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the Geometric Mean Anomaly of the Sun in degrees			*/
//***********************************************************************/

	function calcGeomMeanAnomalySun(t)
	{
		var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
		return M;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEccentricityEarthOrbit						*/
//* Type:    Function									*/
//* Purpose: calculate the eccentricity of earth's orbit			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   the unitless eccentricity							*/
//***********************************************************************/


	function calcEccentricityEarthOrbit(t)
	{
		var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
		return e;		// unitless
	}

//***********************************************************************/
//* Name:    calcSunEqOfCenter							*/
//* Type:    Function									*/
//* Purpose: calculate the equation of center for the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   in degrees										*/
//***********************************************************************/


	function calcSunEqOfCenter(t)
	{
		var m = calcGeomMeanAnomalySun(t);

		var mrad = degToRad(m);
		var sinm = Math.sin(mrad);
		var sin2m = Math.sin(mrad+mrad);
		var sin3m = Math.sin(mrad+mrad+mrad);

		var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
		return C;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueLong								*/
//* Type:    Function									*/
//* Purpose: calculate the true longitude of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true longitude in degrees						*/
//***********************************************************************/


	function calcSunTrueLong(t)
	{
		var l0 = calcGeomMeanLongSun(t);
		var c = calcSunEqOfCenter(t);

		var O = l0 + c;
		return O;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunTrueAnomaly							*/
//* Type:    Function									*/
//* Purpose: calculate the true anamoly of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's true anamoly in degrees							*/
//***********************************************************************/

	function calcSunTrueAnomaly(t)
	{
		var m = calcGeomMeanAnomalySun(t);
		var c = calcSunEqOfCenter(t);

		var v = m + c;
		return v;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRadVector								*/
//* Type:    Function									*/
//* Purpose: calculate the distance to the sun in AU				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun radius vector in AUs							*/
//***********************************************************************/

	function calcSunRadVector(t)
	{
		var v = calcSunTrueAnomaly(t);
		var e = calcEccentricityEarthOrbit(t);
 
		var R = (1.000001018 * (1 - e * e)) / (1 + e * Math.cos(degToRad(v)));
		return R;		// in AUs
	}

//***********************************************************************/
//* Name:    calcSunApparentLong							*/
//* Type:    Function									*/
//* Purpose: calculate the apparent longitude of the sun			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's apparent longitude in degrees						*/
//***********************************************************************/

	function calcSunApparentLong(t)
	{
		var o = calcSunTrueLong(t);

		var omega = 125.04 - 1934.136 * t;
		var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
		return lambda;		// in degrees
	}

//***********************************************************************/
//* Name:    calcMeanObliquityOfEcliptic						*/
//* Type:    Function									*/
//* Purpose: calculate the mean obliquity of the ecliptic			*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   mean obliquity in degrees							*/
//***********************************************************************/

	function calcMeanObliquityOfEcliptic(t)
	{
		var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
		var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
		return e0;		// in degrees
	}

//***********************************************************************/
//* Name:    calcObliquityCorrection						*/
//* Type:    Function									*/
//* Purpose: calculate the corrected obliquity of the ecliptic		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   corrected obliquity in degrees						*/
//***********************************************************************/

	function calcObliquityCorrection(t)
	{
		var e0 = calcMeanObliquityOfEcliptic(t);

		var omega = 125.04 - 1934.136 * t;
		var e = e0 + 0.00256 * Math.cos(degToRad(omega));
		return e;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunRtAscension							*/
//* Type:    Function									*/
//* Purpose: calculate the right ascension of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's right ascension in degrees						*/
//***********************************************************************/

	function calcSunRtAscension(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);
 
		var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
		var tanadenom = (Math.cos(degToRad(lambda)));
		var alpha = radToDeg(Math.atan2(tananum, tanadenom));
		return alpha;		// in degrees
	}

//***********************************************************************/
//* Name:    calcSunDeclination							*/
//* Type:    Function									*/
//* Purpose: calculate the declination of the sun				*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   sun's declination in degrees							*/
//***********************************************************************/

	function calcSunDeclination(t)
	{
		var e = calcObliquityCorrection(t);
		var lambda = calcSunApparentLong(t);

		var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
		var theta = radToDeg(Math.asin(sint));
		return theta;		// in degrees
	}

//***********************************************************************/
//* Name:    calcEquationOfTime							*/
//* Type:    Function									*/
//* Purpose: calculate the difference between true solar time and mean	*/
//*		solar time									*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//* Return value:										*/
//*   equation of time in minutes of time						*/
//***********************************************************************/

	function calcEquationOfTime(t)
	{
		var epsilon = calcObliquityCorrection(t);
		var l0 = calcGeomMeanLongSun(t);
		var e = calcEccentricityEarthOrbit(t);
		var m = calcGeomMeanAnomalySun(t);

		var y = Math.tan(degToRad(epsilon)/2.0);
		y *= y;

		var sin2l0 = Math.sin(2.0 * degToRad(l0));
		var sinm   = Math.sin(degToRad(m));
		var cos2l0 = Math.cos(2.0 * degToRad(l0));
		var sin4l0 = Math.sin(4.0 * degToRad(l0));
		var sin2m  = Math.sin(2.0 * degToRad(m));

		var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
				- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;

		return radToDeg(Etime)*4.0;	// in minutes of time
	}

//***********************************************************************/
//* Name:    calcHourAngleSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunrise for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunrise in radians						*/
//***********************************************************************/

	function calcHourAngleSunrise(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return HA;		// in radians
	}

//***********************************************************************/
//* Name:    calcHourAngleSunset							*/
//* Type:    Function									*/
//* Purpose: calculate the hour angle of the sun at sunset for the	*/
//*			latitude								*/
//* Arguments:										*/
//*   lat : latitude of observer in degrees					*/
//*	solarDec : declination angle of sun in degrees				*/
//* Return value:										*/
//*   hour angle of sunset in radians						*/
//***********************************************************************/

	function calcHourAngleSunset(lat, solarDec)
	{
		var latRad = degToRad(lat);
		var sdRad  = degToRad(solarDec)

		var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));

		var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));

		return -HA;		// in radians
	}


//***********************************************************************/
//* Name:    calcSunriseUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunrise	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunriseUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// *** First pass to approximate sunrise (using solar noon)

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunrise(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;	// in minutes of time
		var timeUTC = 720 + timeDiff - eqTime;	// in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		// *** Second pass includes fractional jday in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunrise(latitude, solarDec);
		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		// alert("eqTime = " + eqTime + "\nsolarDec = " + solarDec + "\ntimeUTC = " + timeUTC);

		return timeUTC;
	}

//***********************************************************************/
//* Name:    calcSolNoonUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of solar	*/
//*		noon for the given day at the given location on earth		*/
//* Arguments:										*/
//*   t : number of Julian centuries since J2000.0				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSolNoonUTC(t, longitude)
	{
		// First pass uses approximate solar noon to calculate eqtime
		var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
		var eqTime = calcEquationOfTime(tnoon);
		var solNoonUTC = 720 + (longitude * 4) - eqTime; // min

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0); 

		eqTime = calcEquationOfTime(newt);
		// var solarNoonDec = calcSunDeclination(newt);
		solNoonUTC = 720 + (longitude * 4) - eqTime; // min
		
		return solNoonUTC;
	}

//***********************************************************************/
//* Name:    calcSunsetUTC								*/
//* Type:    Function									*/
//* Purpose: calculate the Universal Coordinated Time (UTC) of sunset	*/
//*			for the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   time in minutes from zero Z							*/
//***********************************************************************/

	function calcSunsetUTC(JD, latitude, longitude)
	{
		var t = calcTimeJulianCent(JD);

		// *** Find the time of solar noon at the location, and use
        //     that declination. This is better than start of the 
        //     Julian day

		var noonmin = calcSolNoonUTC(t, longitude);
		var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);

		// First calculates sunrise and approx length of day

		var eqTime = calcEquationOfTime(tnoon);
		var solarDec = calcSunDeclination(tnoon);
		var hourAngle = calcHourAngleSunset(latitude, solarDec);

		var delta = longitude - radToDeg(hourAngle);
		var timeDiff = 4 * delta;
		var timeUTC = 720 + timeDiff - eqTime;

		// first pass used to include fractional day in gamma calc

		var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0); 
		eqTime = calcEquationOfTime(newt);
		solarDec = calcSunDeclination(newt);
		hourAngle = calcHourAngleSunset(latitude, solarDec);

		delta = longitude - radToDeg(hourAngle);
		timeDiff = 4 * delta;
		timeUTC = 720 + timeDiff - eqTime; // in minutes

		return timeUTC;
	}


//*********************************************************************/

// Returns the decimal latitude from the degrees, minutes and seconds entered 
// into the form	

	function getLatitude(latLongForm)
	{
		var neg = 0;
		var strLatDeg = latLongForm["latDeg"].value;
		var degs = parseFloat(latLongForm["latDeg"].value);
		if (latLongForm["latDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLatDeg.indexOf(".") != -1) 
		{
			latLongForm["latMin"].value = 0;
			latLongForm["latSec"].value = 0;
		}

		if(latLongForm["latMin"].value == "")
		{
			latLongForm["latMin"].value = 0;
		}
		if(latLongForm["latSec"].value == "")
		{
			latLongForm["latSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["latMin"].value);

		var secs = parseFloat(latLongForm["latSec"].value);

		if(neg != 1)
		{
			var decLat = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLat = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLat;
	}	


//*********************************************************************/

// Returns the decimal longitude from the degrees, minutes and seconds entered 
// into the form	

	function getLongitude(latLongForm)
	{
		var neg = 0;
		var strLonDeg = latLongForm["lonDeg"].value;
		var degs = parseFloat(latLongForm["lonDeg"].value);
		if (latLongForm["lonDeg"].value.charAt(0) == '-') 
		{
			neg = 1;
		}

		if (strLonDeg.indexOf(".") != -1) 
		{
			latLongForm["lonMin"].value = 0;
			latLongForm["lonSec"].value = 0;
		}

		if(latLongForm["lonMin"].value == "")
		{
			latLongForm["lonMin"].value = 0;
		}
		if(latLongForm["lonSec"].value == "")
		{
			latLongForm["lonSec"].value = 0;
		}

		var mins = parseFloat(latLongForm["lonMin"].value);
		var secs = parseFloat(latLongForm["lonSec"].value);
		var decLon = degs + (mins / 60) + (secs / 3600);

		if(neg != 1)
		{
			var decLon = degs + (mins / 60) + (secs / 3600);
		} else if(neg == 1)
		{
			var decLon = degs - (mins / 60) - (secs / 3600);
		} else 
		{
			return -9999;
		}
		return decLon;
	}	


//***********************************************************************/
//* Name:    findRecentSunrise							*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunrise		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunrise					*/
//***********************************************************************/

	function findRecentSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findRecentSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the most recent sunset		*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the most recent sunset					*/
//***********************************************************************/

	function findRecentSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday -= 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunrise								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunrise			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunrise						*/
//***********************************************************************/

	function findNextSunrise(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunriseUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunriseUTC(julianday, latitude, longitude);
		}

		return julianday;
	}


//***********************************************************************/
//* Name:    findNextSunset								*/
//* Type:    Function									*/
//* Purpose: calculate the julian day of the next sunset			*/
//*		starting from the given day at the given location on earth	*/
//* Arguments:										*/
//*   JD  : julian day									*/
//*   latitude : latitude of observer in degrees				*/
//*   longitude : longitude of observer in degrees				*/
//* Return value:										*/
//*   julian day of the next sunset							*/
//***********************************************************************/

	function findNextSunset(jd, latitude, longitude)
	{
		var julianday = jd;

		var time = calcSunsetUTC(julianday, latitude, longitude);
		while(!isNumber(time)){
			julianday += 1.0;
			time = calcSunsetUTC(julianday, latitude, longitude);
		}

		return julianday;
	}

//***********************************************************************/
//* Name:    timeString									*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields			*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//* Return value:										*/
//*   string of the format HH:MM:SS, minutes and seconds are zero padded*/
//***********************************************************************/

	function timeString(minutes)
	// timeString returns a zero-padded string (HH:MM:SS) given time in minutes
	{
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ":";
		else
			timeStr += minute + ":";
		if (second < 10)	//	i.e. only one digit
			timeStr += "0" + second;
		else
			timeStr += second;

		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringShortAMPM							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] (DDMon)					*/
//***********************************************************************/

// timeStringShortAMPM returns a zero-padded string (HH:MM *M) given time in 
// minutes and appends short date if time is > 24 or < 0, resp.

	function timeStringShortAMPM(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);
		var PM = false;

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			daychange = true;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			daychange = true;
			julianday -= 1.0;
		}

		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

            if (hour == 12)
		{
              PM = true;
            }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += "" + minute + ((PM)?"PM":"AM");

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}


//***********************************************************************/
//* Name:    timeStringAMPMDate							*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded string	*/
//*		suitable for printing to the form text fields, and appends	*/
//*		the date.									*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM[AM/PM] DDMon					*/
//***********************************************************************/

// timeStringAMPMDate returns a zero-padded string (HH:MM[AM/PM]) given time 
// in minutes and julian day, and appends the short date

	function timeStringAMPMDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
		}

		var PM = false;
		if (hour > 12)
		{
			hour -= 12;
			PM = true;
		}

        if (hour == 12)
		{
            PM = true;
        }

		if (hour == 0)
		{
			PM = false;
			hour = 12;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute + ((PM)?"PM":"AM");
		else
			timeStr += minute + ((PM)?"PM":"AM");

		return timeStr + " " + calcDayFromJD(julianday);
	}


//***********************************************************************/
//* Name:    timeStringDate								*/
//* Type:    Function									*/
//* Purpose: convert time of day in minutes to a zero-padded 24hr time	*/
//*		suitable for printing to the form text fields.  If time	*/
//*		crosses a day boundary, date is appended.				*/
//* Arguments:										*/
//*   minutes : time of day in minutes						*/
//*   JD  : julian day									*/
//* Return value:										*/
//*   string of the format HH:MM (DDMon)						*/
//***********************************************************************/

// timeStringDate returns a zero-padded string (HH:MM) given time in minutes
// and julian day, and appends the short date if time crosses a day boundary

	function timeStringDate(minutes, JD)
	{
		var julianday = JD;
		var floatHour = minutes / 60.0;
		var hour = Math.floor(floatHour);
		var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
		var minute = Math.floor(floatMinute);
		var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
		var second = Math.floor(floatSec + 0.5);

		minute += (second >= 30)? 1 : 0;

		if (minute >= 60) 
		{
			minute -= 60;
			hour ++;
		}

		var daychange = false;
		if (hour > 23) 
		{
			hour -= 24;
			julianday += 1.0;
			daychange = true;
		}

		if (hour < 0)
		{
			hour += 24;
			julianday -= 1.0;
			daychange = true;
		}

		var timeStr = hour + ":";
		if (minute < 10)	//	i.e. only one digit
			timeStr += "0" + minute;
		else
			timeStr += minute;

		if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
	}

	
//***********************************************************************/
//* Name:    calcSun									*/
//* Type:    Main Function called by form controls				*/
//* Purpose: calculate time of sunrise and sunset for the entered date	*/
//*		and location.  In the special cases near earth's poles, 	*/
//*		the date of nearest sunrise and set are reported.		*/
//* Arguments:										*/
//*   riseSetForm : for displaying results					*/
//*   latLongForm : for reading latitude and longitude data			*/
//*   index : daylight saving yes/no select					*/
//*   index2 : city select index							*/
//* Return value:										*/
//*   none											*/
//*	(fills riseSetForm text fields with results of calculations)	*/
//***********************************************************************/

	function calcSun(riseSetForm, latLongForm, index, index2) 
	{
		if(index2 != 0)
		{
			setLatLong(latLongForm, index2);
		}

		var latitude = getLatitude(latLongForm);
		var longitude = getLongitude(latLongForm);
		var indexRS = riseSetForm.mos.selectedIndex
		if (isValidInput(riseSetForm, indexRS, latLongForm)) 
		{
			if((latitude >= -90) && (latitude < -89))
			{
				alert("All latitudes between 89 and 90 S\n will be set to -89");
				latLongForm["latDeg"].value = -89;
				latitude = -89;
			}
			if ((latitude <= 90) && (latitude > 89))
			{
				alert("All latitudes between 89 and 90 N\n will be set to 89");
				latLongForm["latDeg"].value = 89;
				latitude = 89;
			}
			
			//*****	Calculate the time of sunrise			

//*********************************************************************/
//****************   NEW STUFF   ******   January, 2001   ****************
//*********************************************************************/

			var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(riseSetForm["day"].value));
			var dow = calcDayOfWeek(JD);
			var doy = calcDayOfYear(indexRS + 1, parseFloat(riseSetForm["day"].value), isLeapYear(riseSetForm["year"].value));
			var T = calcTimeJulianCent(JD);

			var alpha = calcSunRtAscension(T);
			var theta = calcSunDeclination(T);
			var Etime = calcEquationOfTime(T);

			//riseSetForm["dbug"].value = doy;

//*********************************************************************/

			var eqTime = Etime;
			var solarDec = theta;

			// Calculate sunrise for this date
			// if no sunrise is found, set flag nosunrise

			var nosunrise = false;

			var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
			if (!isNumber(riseTimeGMT))
			{
				nosunrise = true;
			}

			// Calculate sunset for this date
			// if no sunset is found, set flag nosunset

			var nosunset = false;
			var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
			if (!isNumber(setTimeGMT))
			{
				nosunset = true;
			}

			var daySavings = YesNo[index].value;  // = 0 (no) or 60 (yes)
			var zone = latLongForm["hrsToGMT"].value;
			if(zone > 12 || zone < -12.5)
			{
				alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
				zone = "0";
				latLongForm["hrsToGMT"].value = zone;
			}

			if (!nosunrise)		// Sunrise was found
			{
				var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;	
					//	in minutes
				var riseStr = timeStringShortAMPM(riseTimeLST, JD);
				var utcRiseStr = timeStringDate(riseTimeGMT, JD);

				riseSetForm["sunrise"].value = riseStr;
				riseSetForm["utcsunrise"].value = utcRiseStr;
			}

			if (!nosunset)		// Sunset was found
			{
				var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
				var setStr = timeStringShortAMPM(setTimeLST, JD);
				var utcSetStr = timeStringDate(setTimeGMT, JD);

				riseSetForm["sunset"].value = setStr;
				riseSetForm["utcsunset"].value = utcSetStr;
			}

			// Calculate solar noon for this date

			var solNoonGMT = calcSolNoonUTC(T, longitude);
			var solNoonLST = solNoonGMT - (60 * zone) + daySavings;

			var solnStr = timeString(solNoonLST);
			var utcSolnStr = timeString(solNoonGMT);

			riseSetForm["solnoon"].value = solnStr;
			riseSetForm["utcsolnoon"].value = utcSolnStr;

			var tsnoon = calcTimeJulianCent(calcJDFromJulianCent(T) -0.5 + solNoonGMT/1440.0); 

			eqTime = calcEquationOfTime(tsnoon);
			solarDec = calcSunDeclination(tsnoon);

			riseSetForm["eqTime"].value = (Math.floor(100*eqTime))/100;
			riseSetForm["solarDec"].value = (Math.floor(100*(solarDec)))/100;
			
			//***********Convert lat and long to standard format
			convLatLong(latLongForm);

			// report special cases of no sunrise

			if(nosunrise)
			{ 
				riseSetForm["utcsunrise"].value = "";
				// if Northern hemisphere and spring or summer, OR  
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findRecentSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "prior sunrise";
				}

				// if Northern hemisphere and fall or winter, OR 
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and previous sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findNextSunrise(JD, latitude, longitude);
					newtime = calcSunriseUTC(newjd, latitude, longitude)
						 - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunrise"].value = 
						timeStringAMPMDate(newtime, newjd);
//					riseSetForm["sunrise"].value = calcDayFromJD(newjd)
//						+ " " + timeStringDate(newtime, newjd);
					riseSetForm["utcsunrise"].value = "next sunrise";
				}
				else 
				{
					alert("Cannot Find Sunrise!");
				}

				// alert("Last Sunrise was on day " + findRecentSunrise(JD, latitude, longitude));
				// alert("Next Sunrise will be on day " + findNextSunrise(JD, latitude, longitude));

			}

			if(nosunset)
			{ 
				riseSetForm["utcsunset"].value = "";
				// if Northern hemisphere and spring or summer, OR
				// if Southern hemisphere and fall or winter, use 
				// previous sunrise and next sunset

				if ( ((latitude > 66.4) && (doy > 79) && (doy < 267)) ||
				   ((latitude < -66.4) && ((doy < 83) || (doy > 263))) )
				{
					newjd = findNextSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "next sunset";
					riseSetForm["utcsolnoon"].value = "";
				}

				// if Northern hemisphere and fall or winter, OR
				// if Southern hemisphere and spring or summer, use 
				// next sunrise and last sunset

				else if ( ((latitude > 66.4) && ((doy < 83) || (doy > 263))) ||
					((latitude < -66.4) && (doy > 79) && (doy < 267)) )
				{
					newjd = findRecentSunset(JD, latitude, longitude);
					newtime = calcSunsetUTC(newjd, latitude, longitude) - (60 * zone) + daySavings;
					if (newtime > 1440)
					{
						newtime -= 1440;
						newjd += 1.0;
					}
					if (newtime < 0)
					{
						newtime += 1440;
						newjd -= 1.0;
					}
					riseSetForm["sunset"].value = 
						timeStringAMPMDate(newtime, newjd);
					riseSetForm["utcsunset"].value = "prior sunset";
					riseSetForm["solnoon"].value = "N/A";
					riseSetForm["utcsolnoon"].value = "";
				}

				else 
				{
					alert ("Cannot Find Sunset!");
				}
			}
		}
	}



//*********************************************************************/
var latlon = {
"Europe/Andorra":[42.5,1.51666666667], "Asia/Dubai":[25.3,55.3], "Asia/Kabul":[34.5166666667,69.2], "America/Antigua":[17.05,-61.8], "America/Anguilla":[18.2,-63.0666666667], "Europe/Tirane":[41.3333333333,19.8333333333], "Asia/Yerevan":[40.1833333333,44.5], "America/Curacao":[12.1833333333,-69.0], "Africa/Luanda":[-8.8,13.2333333333], "Antarctica/McMurdo":[-77.8333333333,166.6], "Antarctica/South_Pole":[-90.0,0.0], "Antarctica/Rothera":[-67.5666666667,-68.1333333333], "Antarctica/Palmer":[-64.8,-64.1], "Antarctica/Mawson":[-67.6,62.8833333333], "Antarctica/Davis":[-68.5833333333,77.9666666667], "Antarctica/Casey":[-66.2833333333,110.516666667], "Antarctica/Vostok":[-78.4,106.9], "Antarctica/DumontDUrville":[-66.6666666667,140.016666667], "Antarctica/Syowa":[-69.0,39.5833333333], "America/Argentina/Buenos_Aires":[-34.6,-58.45], "America/Argentina/Cordoba":[-31.4,-64.1833333333], "America/Argentina/Jujuy":[-24.1833333333,-65.3], "America/Argentina/Tucuman":[-26.8166666667,-65.2166666667], "America/Argentina/Catamarca":[-28.4666666667,-65.7833333333], "America/Argentina/La_Rioja":[-29.4333333333,-66.85], "America/Argentina/San_Juan":[-31.5333333333,-68.5166666667], "America/Argentina/Mendoza":[-32.8833333333,-68.8166666667], "America/Argentina/Rio_Gallegos":[-51.6333333333,-69.2166666667], "America/Argentina/Ushuaia":[-54.8,-68.3], "Pacific/Pago_Pago":[-14.2666666667,-170.7], "Europe/Vienna":[48.2166666667,16.3333333333], "Australia/Lord_Howe":[-31.55,159.083333333], "Australia/Hobart":[-42.8833333333,147.316666667], "Australia/Currie":[-39.9333333333,143.866666667], "Australia/Melbourne":[-37.8166666667,144.966666667], "Australia/Sydney":[-33.8666666667,151.216666667], "Australia/Broken_Hill":[-31.95,141.45], "Australia/Brisbane":[-27.4666666667,153.033333333], "Australia/Lindeman":[-20.2666666667,149.0], "Australia/Adelaide":[-34.9166666667,138.583333333], "Australia/Darwin":[-12.4666666667,130.833333333], "Australia/Perth":[-31.95,115.85], "Australia/Eucla":[-31.7166666667,128.866666667], "America/Aruba":[12.5,-69.9666666667], "Europe/Mariehamn":[60.1,19.95], "Asia/Baku":[40.3833333333,49.85], "Europe/Sarajevo":[43.8666666667,18.4166666667], "America/Barbados":[13.1,-59.6166666667], "Asia/Dhaka":[23.7166666667,90.4166666667], "Europe/Brussels":[50.8333333333,4.33333333333], "Africa/Ouagadougou":[12.3666666667,-1.51666666667], "Europe/Sofia":[42.6833333333,23.3166666667], "Asia/Bahrain":[26.3833333333,50.5833333333], "Africa/Bujumbura":[-3.38333333333,29.3666666667], "Africa/Porto-Novo":[6.48333333333,2.61666666667], "America/St_Barthelemy":[17.8833333333,-62.85], "Atlantic/Bermuda":[32.2833333333,-64.7666666667], "Asia/Brunei":[4.93333333333,114.916666667], "America/La_Paz":[-16.5,-68.15], "America/Noronha":[-3.85,-32.4166666667], "America/Belem":[-1.45,-48.4833333333], "America/Fortaleza":[-3.71666666667,-38.5], "America/Recife":[-8.05,-34.9], "America/Araguaina":[-7.2,-48.2], "America/Maceio":[-9.66666666667,-35.7166666667], "America/Bahia":[-12.9833333333,-38.5166666667], "America/Sao_Paulo":[-23.5333333333,-46.6166666667], "America/Campo_Grande":[-20.45,-54.6166666667], "America/Cuiaba":[-15.5833333333,-56.0833333333], "America/Porto_Velho":[-8.76666666667,-63.9], "America/Boa_Vista":[2.81666666667,-60.6666666667], "America/Manaus":[-3.13333333333,-60.0166666667], "America/Eirunepe":[-6.66666666667,-69.8666666667], "America/Rio_Branco":[-9.96666666667,-67.8], "America/Nassau":[25.0833333333,-77.35], "Asia/Thimphu":[27.4666666667,89.65], "Africa/Gaborone":[-25.75,25.9166666667], "Europe/Minsk":[53.9,27.5666666667], "America/Belize":[17.5,-88.2], "America/St_Johns":[47.5666666667,-52.7166666667], "America/Halifax":[44.65,-63.6], "America/Glace_Bay":[46.2,-59.95], "America/Moncton":[46.1,-64.7833333333], "America/Goose_Bay":[53.3333333333,-60.4166666667], "America/Blanc-Sablon":[51.4166666667,-57.1166666667], "America/Montreal":[45.5166666667,-73.5666666667], "America/Toronto":[43.65,-79.3833333333], "America/Nipigon":[49.0166666667,-88.2666666667], "America/Thunder_Bay":[48.3833333333,-89.25], "America/Iqaluit":[63.7333333333,-68.4666666667], "America/Pangnirtung":[66.1333333333,-65.7333333333], "America/Resolute":[74.6833333333,-94.8166666667], "America/Atikokan":[48.75,-91.6166666667], "America/Rankin_Inlet":[62.8166666667,-92.0666666667], "America/Winnipeg":[49.8833333333,-97.15], "America/Rainy_River":[48.7166666667,-94.5666666667], "America/Regina":[50.4,-104.65], "America/Swift_Current":[50.2833333333,-107.833333333], "America/Edmonton":[53.55,-113.466666667], "America/Cambridge_Bay":[69.1,-105.05], "America/Yellowknife":[62.45,-114.35], "America/Inuvik":[68.3333333333,-133.716666667], "America/Dawson_Creek":[59.7666666667,-120.233333333], "America/Vancouver":[49.2666666667,-123.116666667], "America/Whitehorse":[60.7166666667,-135.05], "America/Dawson":[64.0666666667,-139.416666667], "Indian/Cocos":[-12.1666666667,96.9166666667], "Africa/Kinshasa":[-4.3,15.3], "Africa/Lubumbashi":[-11.6666666667,27.4666666667], "Africa/Bangui":[4.36666666667,18.5833333333], "Africa/Brazzaville":[-4.26666666667,15.2833333333], "Europe/Zurich":[47.3833333333,8.53333333333], "Africa/Abidjan":[5.31666666667,-4.03333333333], "Pacific/Rarotonga":[-21.2333333333,-159.766666667], "America/Santiago":[-33.45,-70.6666666667], "Pacific/Easter":[-27.15,-109.433333333], "Africa/Douala":[4.05,9.7], "Asia/Shanghai":[31.2333333333,121.466666667], "Asia/Harbin":[45.75,126.683333333], "Asia/Chongqing":[29.5666666667,106.583333333], "Asia/Urumqi":[43.8,87.5833333333], "Asia/Kashgar":[39.4833333333,75.9833333333], "America/Bogota":[4.6,-74.0833333333], "America/Costa_Rica":[9.93333333333,-84.0833333333], "America/Havana":[23.1333333333,-82.3666666667], "Atlantic/Cape_Verde":[14.9166666667,-23.5166666667], "Indian/Christmas":[-10.4166666667,105.716666667], "Asia/Nicosia":[35.1666666667,33.3666666667], "Europe/Prague":[50.0833333333,14.4333333333], "Europe/Berlin":[52.5,13.3666666667], "Africa/Djibouti":[11.6,43.15], "Europe/Copenhagen":[55.6666666667,12.5833333333], "America/Dominica":[15.3,-61.4], "America/Santo_Domingo":[18.4666666667,-69.9], "Africa/Algiers":[36.7833333333,3.05], "America/Guayaquil":[-2.16666666667,-79.8333333333], "Pacific/Galapagos":[-0.9,-89.6], "Europe/Tallinn":[59.4166666667,24.75], "Africa/Cairo":[30.05,31.25], "Africa/El_Aaiun":[27.15,-13.2], "Africa/Asmara":[15.3333333333,38.8833333333], "Europe/Madrid":[40.4,-3.68333333333], "Africa/Ceuta":[35.8833333333,-5.31666666667], "Atlantic/Canary":[28.1,-15.4], "Africa/Addis_Ababa":[9.03333333333,38.7], "Europe/Helsinki":[60.1666666667,24.9666666667], "Pacific/Fiji":[-18.1333333333,178.416666667], "Atlantic/Stanley":[-51.7,-57.85], "Pacific/Truk":[7.41666666667,151.783333333], "Pacific/Ponape":[6.96666666667,158.216666667], "Pacific/Kosrae":[5.31666666667,162.983333333], "Atlantic/Faroe":[62.0166666667,-6.76666666667], "Europe/Paris":[48.8666666667,2.33333333333], "Africa/Libreville":[0.383333333333,9.45], "Europe/London":[51.5,-0.116666666667], "America/Grenada":[12.05,-61.75], "Asia/Tbilisi":[41.7166666667,44.8166666667], "America/Cayenne":[4.93333333333,-52.3333333333], "Europe/Guernsey":[49.45,-2.53333333333], "Africa/Accra":[5.55,-0.216666666667], "Europe/Gibraltar":[36.1333333333,-5.35], "America/Godthab":[64.1833333333,-51.7333333333], "America/Danmarkshavn":[76.7666666667,-18.6666666667], "America/Scoresbysund":[70.4833333333,-21.9666666667], "America/Thule":[76.5666666667,-68.7833333333], "Africa/Banjul":[13.4666666667,-16.65], "Africa/Conakry":[9.51666666667,-13.7166666667], "America/Guadeloupe":[16.2333333333,-61.5333333333], "Africa/Malabo":[3.75,8.78333333333], "Europe/Athens":[37.9666666667,23.7166666667], "Atlantic/South_Georgia":[-54.2666666667,-36.5333333333], "America/Guatemala":[14.6333333333,-90.5166666667], "Pacific/Guam":[13.4666666667,144.75], "Africa/Bissau":[11.85,-15.5833333333], "America/Guyana":[6.8,-58.1666666667], "Asia/Hong_Kong":[22.2833333333,114.15], "America/Tegucigalpa":[14.1,-87.2166666667], "Europe/Zagreb":[45.8,15.9666666667], "America/Port-au-Prince":[18.5333333333,-72.3333333333], "Europe/Budapest":[47.5,19.0833333333], "Asia/Jakarta":[-6.16666666667,106.8], "Asia/Pontianak":[-0.0333333333333,109.333333333], "Asia/Makassar":[-5.11666666667,119.4], "Asia/Jayapura":[-2.53333333333,140.7], "Europe/Dublin":[53.3333333333,-6.25], "Asia/Jerusalem":[31.7666666667,35.2333333333], "Europe/Isle_of_Man":[54.15,-4.46666666667], "Asia/Calcutta":[22.5333333333,88.3666666667], "Indian/Chagos":[-7.33333333333,72.4166666667], "Asia/Baghdad":[33.35,44.4166666667], "Asia/Tehran":[35.6666666667,51.4333333333], "Atlantic/Reykjavik":[64.15,-21.85], "Europe/Rome":[41.9,12.4833333333], "Europe/Jersey":[49.2,-2.11666666667], "America/Jamaica":[18.0,-76.8], "Asia/Amman":[31.95,35.9333333333], "Asia/Tokyo":[35.65,139.733333333], "Africa/Nairobi":[-1.28333333333,36.8166666667], "Asia/Bishkek":[42.9,74.6], "Asia/Phnom_Penh":[11.55,104.916666667], "Pacific/Tarawa":[1.41666666667,173.0], "Pacific/Enderbury":[-3.13333333333,-171.083333333], "Pacific/Kiritimati":[1.86666666667,-157.333333333], "Indian/Comoro":[-11.6833333333,43.2666666667], "America/St_Kitts":[17.3,-62.7166666667], "Asia/Pyongyang":[39.0166666667,125.75], "Asia/Seoul":[37.55,126.966666667], "Asia/Kuwait":[29.3333333333,47.9833333333], "America/Cayman":[19.3,-81.3833333333], "Asia/Almaty":[43.25,76.95], "Asia/Qyzylorda":[44.8,65.4666666667], "Asia/Aqtobe":[50.2833333333,57.1666666667], "Asia/Aqtau":[44.5166666667,50.2666666667], "Asia/Oral":[51.2166666667,51.35], "Asia/Vientiane":[17.9666666667,102.6], "Asia/Beirut":[33.8833333333,35.5], "America/St_Lucia":[14.0166666667,-61.0], "Europe/Vaduz":[47.15,9.51666666667], "Asia/Colombo":[6.93333333333,79.85], "Africa/Monrovia":[6.3,-10.7833333333], "Africa/Maseru":[-29.4666666667,27.5], "Europe/Vilnius":[54.6833333333,25.3166666667], "Europe/Luxembourg":[49.6,6.15], "Europe/Riga":[56.95,24.1], "Africa/Tripoli":[32.9,13.1833333333], "Africa/Casablanca":[33.65,-7.58333333333], "Europe/Monaco":[43.7,7.38333333333], "Europe/Chisinau":[47.0,28.8333333333], "Europe/Podgorica":[42.4333333333,19.2666666667], "America/Marigot":[18.0666666667,-63.0833333333], "Indian/Antananarivo":[-18.9166666667,47.5166666667], "Pacific/Majuro":[7.15,171.2], "Pacific/Kwajalein":[9.08333333333,167.333333333], "Europe/Skopje":[41.9833333333,21.4333333333], "Africa/Bamako":[12.65,-8.0], "Asia/Rangoon":[16.7833333333,96.1666666667], "Asia/Ulaanbaatar":[47.9166666667,106.883333333], "Asia/Hovd":[48.0166666667,91.65], "Asia/Choibalsan":[48.0666666667,114.5], "Asia/Macau":[22.2333333333,113.583333333], "Pacific/Saipan":[15.2,145.75], "America/Martinique":[14.6,-61.0833333333], "Africa/Nouakchott":[18.1,-15.95], "America/Montserrat":[16.7166666667,-62.2166666667], "Europe/Malta":[35.9,14.5166666667], "Indian/Mauritius":[-20.1666666667,57.5], "Indian/Maldives":[4.16666666667,73.5], "Africa/Blantyre":[-15.7833333333,35.0], "America/Mexico_City":[19.4,-99.15], "America/Cancun":[21.0833333333,-86.7666666667], "America/Merida":[20.9666666667,-89.6166666667], "America/Monterrey":[25.6666666667,-100.316666667], "America/Mazatlan":[23.2166666667,-106.416666667], "America/Chihuahua":[28.6333333333,-106.083333333], "America/Hermosillo":[29.0666666667,-110.966666667], "America/Tijuana":[32.5333333333,-117.016666667], "Asia/Kuala_Lumpur":[3.16666666667,101.7], "Asia/Kuching":[1.55,110.333333333], "Africa/Maputo":[-25.9666666667,32.5833333333], "Africa/Windhoek":[-22.5666666667,17.1], "Pacific/Noumea":[-22.2666666667,165.5], "Africa/Niamey":[13.5166666667,2.11666666667], "Pacific/Norfolk":[-29.05,167.966666667], "Africa/Lagos":[6.45,3.4], "America/Managua":[12.15,-86.2833333333], "Europe/Amsterdam":[52.3666666667,4.9], "Europe/Oslo":[59.9166666667,10.75], "Asia/Katmandu":[27.7166666667,85.3166666667], "Pacific/Nauru":[-0.516666666667,166.916666667], "Pacific/Niue":[-19.0166666667,169.916666667], "Pacific/Auckland":[-36.8666666667,174.766666667], "Pacific/Chatham":[-43.95,-176.55], "Asia/Muscat":[23.6,58.5833333333], "America/Panama":[8.96666666667,-79.5333333333], "America/Lima":[-12.05,-77.05], "Pacific/Tahiti":[-17.5333333333,-149.566666667], "Pacific/Marquesas":[-9.0,-139.5], "Pacific/Gambier":[-23.1333333333,-134.95], "Pacific/Port_Moresby":[-9.5,147.166666667], "Asia/Manila":[14.5833333333,121.0], "Asia/Karachi":[24.8666666667,67.05], "Europe/Warsaw":[52.25,21.0], "America/Miquelon":[47.05,-56.3333333333], "Pacific/Pitcairn":[-25.0666666667,-130.083333333], "America/Puerto_Rico":[18.4666666667,-66.1], "Asia/Gaza":[31.5,34.4666666667], "Europe/Lisbon":[38.7166666667,-9.13333333333], "Atlantic/Madeira":[32.6333333333,-16.9], "Atlantic/Azores":[37.7333333333,-25.6666666667], "Pacific/Palau":[7.33333333333,134.483333333], "America/Asuncion":[-25.2666666667,-57.6666666667], "Asia/Qatar":[25.2833333333,51.5333333333], "Indian/Reunion":[-20.8666666667,55.4666666667], "Europe/Bucharest":[44.4333333333,26.1], "Europe/Belgrade":[44.8333333333,20.5], "Europe/Kaliningrad":[54.7166666667,20.5], "Europe/Moscow":[55.75,37.5833333333], "Europe/Volgograd":[48.7333333333,44.4166666667], "Europe/Samara":[53.2,50.15], "Asia/Yekaterinburg":[56.85,60.6], "Asia/Omsk":[55.0,73.4], "Asia/Novosibirsk":[55.0333333333,82.9166666667], "Asia/Krasnoyarsk":[56.0166666667,92.8333333333], "Asia/Irkutsk":[52.2666666667,104.333333333], "Asia/Yakutsk":[62.0,129.666666667], "Asia/Vladivostok":[43.1666666667,131.933333333], "Asia/Sakhalin":[46.9666666667,142.7], "Asia/Magadan":[59.5666666667,150.8], "Asia/Kamchatka":[53.0166666667,158.65], "Asia/Anadyr":[64.75,177.483333333], "Africa/Kigali":[-1.95,30.0666666667], "Asia/Riyadh":[24.6333333333,46.7166666667], "Pacific/Guadalcanal":[-9.53333333333,160.2], "Indian/Mahe":[-4.66666666667,55.4666666667], "Africa/Khartoum":[15.6,32.5333333333], "Europe/Stockholm":[59.3333333333,18.05], "Asia/Singapore":[1.28333333333,103.85], "Atlantic/St_Helena":[-15.9166666667,-5.7], "Europe/Ljubljana":[46.05,14.5166666667], "Arctic/Longyearbyen":[78.0,16.0], "Europe/Bratislava":[48.15,17.1166666667], "Africa/Freetown":[8.5,-13.25], "Europe/San_Marino":[43.9166666667,12.4666666667], "Africa/Dakar":[14.6666666667,-17.4333333333], "Africa/Mogadishu":[2.06666666667,45.3666666667], "America/Paramaribo":[5.83333333333,-55.1666666667], "Africa/Sao_Tome":[0.333333333333,6.73333333333], "America/El_Salvador":[13.7,-89.2], "Asia/Damascus":[33.5,36.3], "Africa/Mbabane":[-26.3,31.1], "America/Grand_Turk":[21.4666666667,-71.1333333333], "Africa/Ndjamena":[12.1166666667,15.05], "Indian/Kerguelen":[-49.35,70.2166666667], "Africa/Lome":[6.13333333333,1.21666666667], "Asia/Bangkok":[13.75,100.516666667], "Asia/Dushanbe":[38.5833333333,68.8], "Pacific/Fakaofo":[-9.36666666667,-171.233333333], "Asia/Dili":[-8.55,125.583333333], "Asia/Ashgabat":[37.95,58.3833333333], "Africa/Tunis":[36.8,10.1833333333], "Pacific/Tongatapu":[-21.1666666667,175.166666667], "Europe/Istanbul":[41.0166666667,28.9666666667], "America/Port_of_Spain":[10.65,-61.5166666667], "Pacific/Funafuti":[-8.51666666667,179.216666667], "Asia/Taipei":[25.05,121.5], "Africa/Dar_es_Salaam":[-6.8,39.2833333333], "Europe/Kiev":[50.4333333333,30.5166666667], "Europe/Uzhgorod":[48.6166666667,22.3], "Europe/Zaporozhye":[47.8333333333,35.1666666667], "Europe/Simferopol":[44.95,34.1], "Africa/Kampala":[0.316666666667,32.4166666667], "Pacific/Johnston":[16.75,-169.516666667], "Pacific/Midway":[28.2166666667,-177.366666667], "Pacific/Wake":[19.2833333333,166.616666667], "America/New_York":[40.7,-74.0], "America/Detroit":[42.3166666667,-83.0333333333], "America/Kentucky/Louisville":[38.25,-85.75], "America/Kentucky/Monticello":[36.8166666667,-84.8333333333], "America/Indiana/Indianapolis":[39.7666666667,-86.15], "America/Indiana/Vincennes":[38.6666666667,-87.5166666667], "America/Indiana/Knox":[41.2833333333,-86.6166666667], "America/Indiana/Winamac":[41.05,-86.6], "America/Indiana/Marengo":[38.3666666667,-86.3333333333], "America/Indiana/Vevay":[38.7333333333,-85.0666666667], "America/Chicago":[41.85,-87.65], "America/Indiana/Tell_City":[37.95,-86.75], "America/Indiana/Petersburg":[38.4833333333,-87.2666666667], "America/Menominee":[45.1,-87.6], "America/North_Dakota/Center":[47.1,-101.283333333], "America/North_Dakota/New_Salem":[46.8333333333,-101.4], "America/Denver":[39.7333333333,-104.983333333], "America/Boise":[43.6,-116.2], "America/Shiprock":[36.7833333333,-108.683333333], "America/Phoenix":[33.4333333333,-112.066666667], "America/Los_Angeles":[34.05,-118.233333333], "America/Anchorage":[61.2166666667,-149.9], "America/Juneau":[58.3,-134.416666667], "America/Yakutat":[59.5333333333,-139.716666667], "America/Nome":[64.5,-165.4], "America/Adak":[51.8666666667,-176.65], "Pacific/Honolulu":[21.3,-157.85], "America/Montevideo":[-34.8833333333,-56.1833333333], "Asia/Samarkand":[39.6666666667,66.8], "Asia/Tashkent":[41.3333333333,69.3], "Europe/Vatican":[41.9,12.45], "America/St_Vincent":[13.15,-61.2333333333], "America/Caracas":[10.5,-66.9333333333], "America/Tortola":[18.45,-64.6166666667], "America/St_Thomas":[18.35,-64.9333333333], "Asia/Saigon":[10.75,106.666666667], "Pacific/Efate":[-17.6666666667,168.416666667], "Pacific/Wallis":[-13.3,-176.166666667], "Pacific/Apia":[-13.8333333333,-171.733333333], "Asia/Aden":[12.75,45.2], "Indian/Mayotte":[-12.7833333333,45.2333333333], "Africa/Johannesburg":[-26.25,28.0], "Africa/Lusaka":[-15.4166666667,28.2833333333], "Africa/Harare":[-17.8333333333,31.05] };
// vim: fileencoding=utf-8 nospell ts=2 et

// Translation instructions:
// Each line has one phrase that needs translating.  Only edit the 
// part after the colon.  Try to use a Unicode/UTF-8 editor to 
// preserve special characters.
//
// Example:
//   't_label':      'Replace this part with the translation'

var translations = {

'en': {
  // Do not change the order of the days or months!
	'daysLong':    ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	'daysShort':   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	'monthsLong':  ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Date format:',
	't_timeformat':     'Time format:',
	't_timezone':       'Time zone:',
	't_localtime':      'Local time',
	't_bottomlabel':    'Bottom label:',
	't_optional':       '(optional)',
	't_examples':       'Examples:',
	't_date':           'Date:',
	't_time':           'Time:',
	't_label':          'Label:',
	't_dateexamples':   'D M d = Sat Apr 07<br>n/j l = 4/7 Saturday',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (unsupported: T, e, o, u)',
	't_version':        'Version xxVER (xxDATE)',
	't_about':          'About this gadget',
	't_translateby':    '',
	't_language':       'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General', 
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'English'
},

// Russian translation by Denis Baumgaertner <denco@freenet.de>
'ru': {
  // Do not change the order of the days or months!
	'daysLong':    ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
	'daysShort':   ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
	'monthsLong':  ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
	'monthsShort': ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':     'Формат даты:',
	't_timeformat':     'Формат времени:',
	't_timezone':       'Часовой пояс:',
	't_localtime':      'Местное время',
	't_bottomlabel':    'Текст:',
	't_optional':       '(дополнительно)',
	't_examples':       'Примеры:',
	't_date':           'Дата:',
	't_time':           'Время:',
	't_label':          'Текст:',
	't_dateexamples':   'D M d = Сб Апр 07<br>n/j l = 4/7 Суббота',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Москва, GMT+3',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Справка по формату</a> (не поддерживаются: T, e, o, u)',
	't_version':        'Версия xxVER (xxDATE)',
	't_about':          'О гаджете',
	't_translateby':    'Перевод на русский от Дениса Баумгертнера',
	't_language':       'Язык:',
	't_charity':        "Presto's Clock это Charityware. Если приложение Вам понравилось, пожалуйста внесите пожертвования в поддержку нуждающихся. Подробная <a href=\"http://prestonhunt.com/story/110\">информация для пожертвований</a> находится на моей домашней странице.",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Размер шрифта:',
	't_fontsize2':       'Размер шрифта:',
	't_fontsize3':       'Размер шрифта:',
	't_fontcolor1':      'Цвет шрифта:',
	't_fontcolor2':      'Цвет шрифта:',
	't_fontcolor3':      'Цвет шрифта:',
//	't_background':  		'Фоновое изображение',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Время',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Поменять местами дату и текст',
  't_tab1':            'Общее', 
  't_tab2':            'Настройки',
  't_tab3':            'О программе',
  't_copyright':       'Copyright 2009 Preston Hunt',
  't_languagename':    'Русский'
},

// Spanish translation by Tom <getkresh@yahoo.ca>
'es': {
	'daysLong':    ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
	'daysShort':   ["D", "L", "M", "X", "J", "V", "S"],
	'monthsShort': ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
	'monthsLong':  ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato de fecha:',
	't_timeformat':    'Formato de hora:',
	't_timezone':      'Zona horaria:',
	't_localtime':     'Hora local',
	't_bottomlabel':   'Etiqueta:',
	't_optional':      '(opcional)',
	't_examples':      'Ejemplos:',
	't_date':          'Fecha:',
	't_time':          'Hora:',
	't_label':         'Etiqueta:',
	't_dateexamples':  'D M d = L abr 07<br>n/j l = 4/7 sábado',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'CET, Madrid, Paris, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/es/function.date.php">Ayuda con el formato</a> (no posibles: T, e, o, u)',
	't_version':       'Versión xxVER (xxDATE)',
	't_about':         'Acerca de este gadget',
	't_translateby':   'Traducción en español por Lucía y Tom',
	't_language':      'Idioma:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:', // TODO
	't_fontfamily2':     'Font:', // TODO
	't_fontfamily3':     'Font:', // TODO
	't_fontsize1':       'Font size:', // TODO
	't_fontsize2':       'Font size:', // TODO
	't_fontsize3':       'Font size:', // TODO
	't_fontcolor1':      'Font color:', // TODO
	't_fontcolor2':      'Font color:', // TODO
	't_fontcolor3':      'Font color:', // TODO
//	't_background':  		'Background image', // TODO
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Hora',
	't_label2': 			 	 'Etiqueta',
	't_swap_labels':     'Swap date and bottom label', // TODO
  't_tab1':            'General', // TODO
  't_tab2':            'Apariencia', // TODO
  't_tab3':            'Sobre', // TODO
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Danish translation by Dennis Boffy <adidas.lover2000@yahoo.com>
'dk': {
	'daysLong':    ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
	'daysShort':   ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
	'monthsShort': ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
	'monthsLong':  ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formatering af dato:',
	't_timeformat':    'Formatering af tid:',
	't_timezone':      'Tidszone:',
	't_localtime':     'Lokal tid',
	't_bottomlabel':   'Angivelse af tidszone:',
	't_optional':      '(valgfrit)',
	't_examples':      'Eksempler:',
	't_date':          'Dato:',
	't_time':          'Tid:',
	't_label':         'Angivelse:',
	't_dateexamples':  'D d M = lør 10 apr<br>l j/n = lørdag 4/7',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'CET, GMT+1, København, London',
	't_formathelp':    '<a href="http://php.net/date">Hjælp til formatering</a>',
	't_formathelplong':'<a href="http://php.net/date">Hjælp til formatering</a> (ikke understøttet: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'Om denne gadget',
	't_translateby':   'Dansk oversættelse af Dennis Boffy',
	't_language':      'Sprog:',
	't_charity':        "Presto's Clock er charityware. Hvis du kan lide denne gadget, kan du overveje at donere et beløb til mennesker, der ikke er lige så godt stillet som dig. Besøg projektsiden for <a href=\"http://prestonhunt.com/story/110\">oplysninger om, hvordan du kan give et bidrag</a>.",
	't_fontfamily1':     'Skrifttype:',
	't_fontfamily2':     'Skrifttype:',
	't_fontfamily3':     'Skrifttype:',
	't_fontsize1':       'Skriftstørrelse:',
	't_fontsize2':       'Skriftstørrelse:',
	't_fontsize3':       'Skriftstørrelse:',
	't_fontcolor1':      'Skriftfarve:',
	't_fontcolor2':      'Skriftfarve:',
	't_fontcolor3':      'Skriftfarve:',
//	't_background':  		'Baggrundsbillede',
	't_date2': 				 	 'Dato',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Angivelse af tidszone',
	't_swap_labels':     'Byt om på dato og angivelse af tidszone',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// French translation by Erik Vandevoorde <erik.vdvoorde@gmail.com>
'fr': {
	'daysLong':    ["Dimanche", "Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi"],
	'daysShort':   ["Dim", "Lun", "Mar", "Mer","Jeu", "Ven", "Sam"],
	'monthsShort': ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Aoû", "Sep", "Oct", "Nov", "Déc"],
	'monthsLong':  [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format de la date:',
	't_timeformat':    "Format de l'heure:",
	't_timezone':      'Fuseau horaire:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nom:',
	't_optional':      '(facultatif)',
	't_examples':      'Exemples:',
	't_date':          'La date:',
	't_time':          "L'heure:",
	't_label':         'Nom:',
	't_dateexamples':  'D d M = Sam 07 Avr<br>l j/n = Samedi 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Paris, Bruxelles, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/fr/function.date.php">Aide paramètrage format</a> (non reconnus: T, e, o, u)',
	't_version':       'Version xxVER (xxDATE)',
	't_about':         'A propos de ce gadget',
	't_translateby':   'Traduction française par DionysosX',
	't_language':      'Language:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Appearance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Italian translation by Mirko Mazzacano <michy91@alice.it>
'it': {
	'daysLong':    ["Lunedi", "Martedi", "Mercoledi", "Giovedi", "Venerdi", "Sabato"],
	'daysShort':   ["Dom", "Lun", "Mar" , "Mer", "Giov", "Ven","Sab"],
	'monthsShort': ["Gen","Feb","Mar","Apr", "Mag","Giu","Lug","Agosto","Set","Ott","Nov","Dic"],
	'monthsLong':  ["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Formato data:',
	't_timeformat':    'Formato orario:',
	't_timezone':      'Nome orologio:',
	't_localtime':     'Local time',
	't_bottomlabel':   'Nomi:',
	't_optional':      '(optioneel)',
	't_examples':      'Esempi:',
	't_date':          'Data:',
	't_time':          'Orario:',
	't_label':         'Nomi:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'H:i = 17:44',
	't_labelexamples': 'Roma, Tokyo, GMT+1',
	't_formathelp':    '<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a>',
	't_formathelplong':'<a href="http://us3.php.net/manual/it/function.date.php">Aiuto formato</a> (non supportato: T, e, o, u)',
	't_version':       'Versione xxVER (xxDATE)',
	't_about':         'Informazioni su gadget',
	't_translateby':   'Traduzione italiana di Mirko Mazzacano.',
	't_language':      'Lingua:',
	't_charity':        "Presto's Clock is Charityware. If you like it, please consider a donation to the less fortunate of the world. See the project page for <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Font size:',
	't_fontsize2':       'Font size:',
	't_fontsize3':       'Font size:',
	't_fontcolor1':      'Font color:',
	't_fontcolor2':      'Font color:',
	't_fontcolor3':      'Font color:',
//	't_background':  		'Background image',
	't_date2': 				 	 'Date',
	't_time2': 				 	 'Time',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Swap date and bottom label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Polish translation by Marcin Michalak <marcin.michalak@gmail.com>
'pl': {
	'daysLong':    ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
	'daysShort':   ["Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
	'monthsLong':  ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
	'monthsShort': ["Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Format daty:',
	't_timeformat':    'Format godziny:',
	't_timezone':      'Strefa czasu:',
	't_localtime':     'Czas lokalny',
	't_bottomlabel':   'Tekst:',
	't_optional':      '(opcjonalnie)',
	't_examples':      'Przykłady:',
	't_date':          'Data:',
	't_time':          'Godzina:',
	't_label':         'Tekst:',
	't_dateexamples':  'D d M = Sob Kwi 07<br>l/j n = Sobota 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Warszawa, GMT+1',
	't_formathelp':    '<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/pl/function.date.php">Więcej o formacie</a> (nieobsługiwane: T, e, o, u)',
	't_version':       'Wersja xxVER (xxDATE)',
	't_about':         'O tym gadżecie',
	't_translateby':   'Przetłumaczył na polski Marcin Michalak',
	't_language':      'Język:',
	't_charity':        "Zegar Preston'a jest oprogramowaniem darowiznowym. Jeśli Ci się podoba, pomyśl o darowiźnie dla mniej szczęśliwych tego świata. Na stronie projektu znajdziesz <a href=\"http://prestonhunt.com/story/110\">informację, jak złożyć darowiznę</a>.",
	't_fontfamily1':     'Czcionka:',
	't_fontfamily2':     'Czcionka:',
	't_fontfamily3':     'Czcionka:',
	't_fontsize1':       'Rozmiar czcionki:',
	't_fontsize2':       'Rozmiar czcionki:',
	't_fontsize3':       'Rozmiar czcionki:',
	't_fontcolor1':      'Kolor czcionki:',
	't_fontcolor2':      'Kolor czcionki:',
	't_fontcolor3':      'Kolor czcionki:',
//	't_background':  		'Obraz tła',
	't_date2': 				 	 'Data',
	't_time2': 				 	 'Godzina',
	't_label2': 			 	 'Tekst',
	't_swap_labels':     'Zamień datę i dolny tekst',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Dutch translation by Edwin Walstra <ewalstra@xs4all.nl>
'nl': {
	'daysLong':    ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
	'daysShort':   ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
	'monthsShort': ["Jan", "Feb", "Maa", "Apr","Mei", "Jun", "Jul", "Aug", "Sep","Okt", "Nov", "Dec"],
	'monthsLong':  ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
	'defaultDateFormat': "D d M",
	'defaultTimeFormat': "H:i",

	't_dateformat':    'Datumaanduiding:',
	't_timeformat':    'Tijdsaanduiding:',
	't_timezone':      'Tijdzone:',
	't_localtime':     'Lokale Tijd',
	't_bottomlabel':   'Label:',
	't_optional':      '(optioneel)',
	't_examples':      'Voorbeelden:',
	't_date':          'Datum:',
	't_time':          'Tijd:',
	't_label':         'Label:',
	't_dateexamples':  'D d M = Za 07 Apr<br>l j/n = Zaterdag 7/4',
	't_timeexamples':  'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples': 'Amsterdam, CET, GMT+2',
	't_formathelp':    '<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a>',
	't_formathelplong':'<a href="http://us.php.net/manual/nl/function.date.php">Formaat help</a> (niet ondersteund: T, e, o, u)',
	't_version':       'Versie xxVER (xxDATE)',
	't_about':         'Informatie over deze gadget',
	't_translateby':   'Nederlandse vertaling door Edwin Walstra',
	't_language':      'Taal:',
  't_charity':       "Presto's Clock is Liefdadigheidsware. Vind je deze gadget goed, overweeg dan een gift aan de minderbedeelden van deze wereld. Zie de projectpagina voor <a href=\"http://prestonhunt.com/story/110\">informatie over giften</a>.",
	't_fontfamily1':     'Lettertype:',
	't_fontfamily2':     'Lettertype:',
	't_fontfamily3':     'Lettertype:',
	't_fontsize1':       'Lettergrootte:',
	't_fontsize2':       'Lettergrootte:',
	't_fontsize3':       'Lettergrootte:',
	't_fontcolor1':      'Letterkleur:',
	't_fontcolor2':      'Letterkleur:',
	't_fontcolor3':      'Letterkleur:',
//	't_background':  		'Achtergrond plaatje',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tijd',
	't_label2': 			 	 'Label',
	't_swap_labels':     'Verwissel datum en onderste label',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Swedish translation by Jari Tammisto <jari@bildagenturen.se>
'se': {
  "daysLong":    ["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],
	"daysShort":   ["sön","mån","tis","ons","tor","fre","lör"],
	"monthsShort": ["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],
	"monthsLong":  ["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],
	"defaultDateFormat": "D d M",
	"defaultTimeFormat": "H:i",

	"t_dateformat":     "Formatering av datum:",
	"t_timeformat":     "Formatering av tid:",
	"t_timezone":       "Tidszon:",
	"t_localtime":      "Lokal tid",
	"t_bottomlabel":    "Etikett:",
	"t_optional":       "(valfri)",
	"t_examples":       "Exempel:",
	"t_date":           "Datum:",
	"t_time":           "Tid:",
	"t_label":          "Etikett:",
	"t_dateexamples":   "D d M = lör 10 apr<br>l j/n = lördag 4/7",
	"t_timeexamples":   "g:i a = 5:44 pm<br>H:i = 17:44",
	"t_labelexamples":  "CET, GMT+1, Stockholm, London",
	"t_formathelp":     '<a href="http://php.net/date">Hjälp till formatering</a>',
	"t_formathelplong": '<a href="http://php.net/date">Formateringshjälp</a> (Stöds ej: T, e, o, u)',
	"t_version":        "Version xxVER (xxDATE)",
	"t_about":          "Om denna gadget",
	"t_translateby":    "Svensk översättning av Jari Tammisto",
	"t_language":       "Språk:",
	't_charity':        "Presto's Clock är så kallat Charityware. Om du gillar programmet, vänligen överväg att skänka ett bidrag till de mindre lyckligt lottade i världen. Se projektsidan för <a href=\"http://prestonhunt.com/story/110\">information om hur du kan bidra</a>.",
	't_fontfamily1':     'Teckensnitt:',
	't_fontfamily2':     'Teckensnitt:',
	't_fontfamily3':     'Teckensnitt:',
	't_fontsize1':       'Teckenstorlek:',
	't_fontsize2':       'Teckenstorlek:',
	't_fontsize3':       'Teckenstorlek:',
	't_fontcolor1':      'Teckenfärg:',
	't_fontcolor2':      'Teckenfärg:',
	't_fontcolor3':      'Teckenfärg:',
//	't_background':  		'Bakgrundsbild',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Tid',
	't_label2': 			 	 'Etikett',
	't_swap_labels':     'Växla datum och etikett',
  't_tab1':            'Allmän',
  't_tab2':            'Utseende',
  't_tab3':            'Om',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Czech translation by Jan Pintr <jan.pintr@gmail.com>
'cs': {
	'daysLong':    ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota"],
	'daysShort':   ["NE", "PO", "ÚT", "ST", "ČT", "PÁ", "SO"],
	'monthsLong':  ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"],
	'monthsShort': ["Led", "Úno", "Bře", "Dub", "Kvě", "Čen", "Čec", "Srp", "Zář", "Říj", "Lis", "Pro"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Formát data:',
	't_timeformat':     'Formát času:',
	't_timezone':       'Časové pásmo:',
	't_localtime':      'Lokální čas',
	't_bottomlabel':    'Spodní označení:',
	't_optional':       '(nepovinné)',
	't_examples':       'Příklad:',
	't_date':           'Datum:',
	't_time':           'Čas:',
	't_label':          'Označení:',
	't_dateexamples':   'D M d = SO Dub 07<br>n/j l = 4/7 sobota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Další možnosti uspořádání</a> (nepodporuje: T, e, o, u)',
	't_version':        'Verze xxVER (xxDATE)',
	't_about':          'Informace o této aplikaci',
	't_translateby':    'Český překlad vytvořil: jan.pintr@gmail.com',
	't_language':       'Jazyk:',
	't_charity':         "Presto's Clock je Charityware. Pokud budete chtít, prosím obdarujte méně šťastné na tomto světě. Podívejte se na stránku <a href=\"http://prestonhunt.com/story/110\">s informacemi jak pomoci</a>.",
	't_fontfamily1':     'Písmo:',
	't_fontfamily2':     'Písmo:',
	't_fontfamily3':     'Písmo:',
	't_fontsize1':       'Velikost písma:',
	't_fontsize2':       'Velikost písma:',
	't_fontsize3':       'Velikost písma:',
	't_fontcolor1':      'Barva písma:',
	't_fontcolor2':      'Barva písma:',
	't_fontcolor3':      'Barva písma:',
//	't_background':  		'Obrázek na pozadí',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Čas',
	't_label2': 			 	 'Označení',
	't_swap_labels':     'Prohodit datum a spodní označení',
  't_tab1':            'Všeobecný',
  't_tab2':            'Vzhled',
  't_tab3':            'Info',
  't_copyright':       'Copyright 2009 Preston Hunt',
	't_languagename':    'Čeština'
},

// German translation by Florian Thomsen <florian.thomsen@gmx.com>
'de': {
  "daysLong":    ["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],
	"daysShort":   ["So","Mo","Di","Mi","Do","Fr","Sa"],
	"monthsLong":  ["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],
	"monthsShort": ["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],
	"defaultDateFormat": "D., d. F",
	"defaultTimeFormat": "H:i",
	
	"t_dateformat":      "Datumsformat:",
	"t_timeformat":      "Zeitformat:",
	"t_timezone":        "Zeitzone:",
	"t_localtime":       "Ortszeit",
	"t_bottomlabel":     "Zusätzlicher Text:",
	"t_optional":        "(Optional)",
	"t_examples":        "Beispiele:",
	"t_date":            "Datum:",
	"t_time":            "Zeit:",
	"t_label":           "Optional:",
	"t_dateexamples":    "D M d = Sa Apr 07<br>n/j l = 4/7 Samstag",
	"t_timeexamples":    "H:i a = 17:44",
	"t_labelexamples":   "Berlin, GMT+1",
	"t_formathelp":      '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a>',
	"t_formathelplong":  '<a href="http://us.php.net/manual/de/function.date.php">Hilfe zu den Formaten</a> (Nicht unterstützt: T, e, o, u)',
	"t_version":         "Version xxVER (xxDATE)",
	"t_about":           "Über dieses Gadget",
	"t_translateby":     "Deutsche Übersetzung von Florian Thomsen",
	"t_language":        "Sprache:",
	't_charity':         "Presto's Clock ist Charityware. Wenn Ihnen diese Software gefällt, spenden Sie bitte für die hilfsbedürftigen Menschen dieser Welt. Auf meiner Homepage finden Sie weitere Infos, <a href=\"http://prestonhunt.com/story/110\">wie Sie spenden</a>.",
	't_fontfamily1':     'Schrift:',
	't_fontfamily2':     'Schrift:',
	't_fontfamily3':     'Schrift:',
	't_fontsize1':       'Schriftgröße:',
	't_fontsize2':       'Schriftgröße:',
	't_fontsize3':       'Schriftgröße:',
	't_fontcolor1':       'Schriftfarbe:',
	't_fontcolor2':      'Schriftfarbe:',
	't_fontcolor3':      'Schriftfarbe:',
//	't_background': 		'Hintergrundbild',
	't_date2': 					 'Datum',
	't_time2': 					 'Zeit',
	't_label2': 				 'Optional',
	't_swap_labels':     'Datum und zusätzlichen Text vertauschen',
  't_tab1':            'General',
  't_tab2':            'Apperance',
  't_tab3':            'About',
  't_copyright':       'Copyright 2009 Preston Hunt'
},

// Ukrainian translation by mr.gorka <mr.gorka@gmail.com>
'uk': {
	'daysLong':    ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота"],
	'daysShort':   ["Нед", "Пон", "Вів", "Сер", "Чет", "Пʼят", "Суб"],
	'monthsLong':  ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
	'monthsShort': ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
	'defaultDateFormat': "D d M ",
	'defaultTimeFormat': "h:i ",

	't_dateformat':     'Формат дати:',
	't_timeformat':     'Формат часу:',
	't_timezone':       'Часовий пояс:',
	't_localtime':      'Локальний час:',
	't_bottomlabel':    'Текст:',
	't_optional':       "(необов'язково)",
	't_examples':       'Наприклад:',
	't_date':           'Дата:',
	't_time':           'Час:',
	't_label':          'Текст:',
	't_dateexamples':   'D d M = Суб 07 Кві<br>l n/j = Субота 7/4',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Ukraine, Kiev, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Format help</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (не підтримується: T, e, o, u)',
	't_version':        'Версія xxVER (xxDATE)',
	't_about':          'Про гаджет',
	't_translateby':    '',
	't_language':       'Мова:',
	't_charity':        "Годинник Presto's - Безкоштовний гаджет. Якщо Вам він сподобався, будь-ласка розгляньте  можливість пожертвування менш вдалому з цього світу. Див. сторінку для цього <a href=\"http://prestonhunt.com/story/110\">information on how to donate</a>. Переклав українською Ігор Каплін",
	't_fontfamily1':     'Шрифт:',
	't_fontfamily2':     'Шрифт:',
	't_fontfamily3':     'Шрифт:',
	't_fontsize1':       'Розмір шрифту:',
	't_fontsize2':       'Розмір шрифту:',
	't_fontsize3':       'Розмір шрифту:',
	't_fontcolor1':      'Колір шрифту:',
	't_fontcolor2':      'Колір шрифту:',
	't_fontcolor3':      'Колір шрифту:',
//	't_background':  		'Другорядне зображення',
	't_date2': 				 	 'Дата',
	't_time2': 				 	 'Час',
	't_label2': 			 	 'Текст',
	't_swap_labels':     'Зміна розташування дати',
  't_tab1':            'Загально', 
  't_tab2':            'Зовнішній вигляд',
  't_tab3':            'Про',
  't_copyright':       'Авторське право 2009 Preston Hunt'
},

// Hungarian translation by Nagy László <nalaszi@gmail.com>
'hu': {
	'daysLong':    ["Vasárnap", "Hétfõ", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
	'daysShort':   ["Va", "Hé", "Ke", "Sze", "Csü", "Pé", "Szo"],
	'monthsLong':  ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
	'monthsShort': ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "Y M d",
	'defaultTimeFormat': "H:i:s",

	't_dateformat':     'Dátum formátuma:',
	't_timeformat':     'Idõ formátuma:',
	't_timezone':       'Idõzóna:',
	't_localtime':      'Helyi idõ',
	't_bottomlabel':    'Alsó felirat:',
	't_optional':       '(választható)',
	't_examples':       'Példák:',
	't_date':           'Dátum:',
	't_time':           'Idõ:',
	't_label':          'Felirat:',
	't_dateexamples':   'D M d = Szo Ápr 07<br>n/j l = 4/7 Szombat',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Budapest, Kaposvár, GMT+1',
	't_formathelp':     '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/hu/function.date.php">Formázási segítség</a> (nem támogatott: T, e, o, u)',
	't_version':        'Verzió: xxVER (xxDATE)',
	't_about':          'Információk a minialkalmazásról',
	't_translateby':    'A magyar fordítást készítette: Nagy László',
	't_language':       'Nyelv:',
	't_charity':        "Presto Órája Charityware program. Amennyiben tetszik kérlek támogasd adományoddal a világ kevésbé szerencsés embereit. Nézd meg a részleteket <a href=\"http://prestonhunt.com/story/110\">információért hogyan adakozhatsz</a>.",
	't_fontfamily1':     'Betû:',
	't_fontfamily2':     'Betû:',
	't_fontfamily3':     'Betû:',
	't_fontsize1':       'Betûméret:',
	't_fontsize2':       'Betûméret:',
	't_fontsize3':       'Betûméret:',
	't_fontcolor1':      'Betûszín:',
	't_fontcolor2':      'Betûszín:',
	't_fontcolor3':      'Betûszín:',
//	't_background':  		'Háttérkép',
	't_date2': 				 	 'Dátum',
	't_time2': 				 	 'Idõ',
	't_label2': 			 	 'Felirat',
	't_swap_labels':     'Dátum és az alsó felirat felcserélése',
  't_tab1':            'Általános', 
  't_tab2':            'Megjelenés',
  't_tab3':            'Rólunk',
  't_copyright':       'Szerzõi Jog: 2009 Preston Hunt'
},

// Serbian translation by Milan <n.milan.n@gmail.com>
'sr': {
	'daysLong':    ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
	'daysShort':   ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
	'monthsLong':  ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
	'monthsShort': ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
	'defaultDateFormat': "D M d",
	'defaultTimeFormat': "h:i a",

	't_dateformat':     'Format datuma:',
	't_timeformat':     'Format vremena:',
	't_timezone':       'Vremenska zona:',
	't_localtime':      'Lokalno vreme',
	't_bottomlabel':    'Donji naslov:',
	't_optional':       '(opcionalno)',
	't_examples':       'Primer:',
	't_date':           'Datum:',
	't_time':           'Vreme:',
	't_label':          'Naslov:',
	't_dateexamples':   'D M d = Sub Apr 07<br>n/j l = 4/7 Subota',
	't_timeexamples':   'g:i a = 5:44 pm<br>H:i = 17:44',
	't_labelexamples':  'Portland, Tokyo, GMT+2',
	't_formathelp':     '<a href="http://us.php.net/manual/en/function.date.php">Pomoć za oblik prikaza</a>',
	't_formathelplong': '<a href="http://us.php.net/manual/en/function.date.php">Format help</a> (Nije podržano: T, e, o, u)',
	't_version':        'Verzija xxVER (xxDATE)',
	't_about':          'Info o gadget-u',
	't_translateby':    'Na srpski preveo Milan Nagulić',
	't_language':       'Jezik:',
	't_charity':        "Presto's Clock je zasnovan na dobrovoljnim donacijama. Ako Vam se sviđa, molim Vas razmislite o donaciji manje srećnim ljudima u svetu. Pogledajte projektnu stranicu za <a href=\"http://prestonhunt.com/story/110\">Informaciju kako da date donaciju</a>.",
	't_fontfamily1':     'Font:',
	't_fontfamily2':     'Font:',
	't_fontfamily3':     'Font:',
	't_fontsize1':       'Veličina fonta:',
	't_fontsize2':       'Veličina fonta:',
	't_fontsize3':       'Veličina fonta:',
	't_fontcolor1':      'Boja fonta:',
	't_fontcolor2':      'Boja fonta:',
	't_fontcolor3':      'Boja fonta:',
//	't_background':  		'Pozadinska slika',
	't_date2': 				 	 'Datum',
	't_time2': 				 	 'Vreme',
	't_label2': 			 	 'Naslov',
	't_swap_labels':     'Zamenite datum sa donjim naslovom',
  't_tab1':            'Opšte', 
  't_tab2':            'Izgled',
  't_tab3':            'Info',
  't_copyright':       'Autorsko pravo 2009 Preston Hunt'
}

};
/*
 * Non-localized javascript
 * vim: ts=2 et nospell nowrap
 */

var isDirty = true;

// Global stored settings
var G = {
  'mainDateFormat': null,
  'mainTimeFormat': null,
  'tzLabel': null,
  'tzName': null,
  'swaplabels': false,

  'gDatefontfamily': null,
  'gDatefontsize': null,
  'gDatefontcolor': null,

  'gTimefontfamily': null,
  'gTimefontsize': null,
  'gTimefontcolor': null,

  'gLabelfontfamily': null,
  'gLabelfontsize': null,
  'gLabelfontcolor': null,

  'locale': 'en'
};

// Localized text
var L = null;

var gTime = null;
var gDate = null;
var gLabel = null;

function alert( mesg ) {
  /*jsl:ignore*/
  return; // uncomment this line for release app
  System.Debug.outputString( mesg );
  /*jsl:end*/
  // See: http://keithelder.net/blog/archive/2008/01/31/Debugging-Vista-Sidebar-Gadgets-in-Visual-Studio-2008.aspx
}

function readSetting( settingName ) {
  return System.Gadget.Settings.read( settingName );
}

function setLocale() {
  if ( G.locale === '' ) G.locale = 'en';
	L = translations[ G.locale ];
}

function readSettings() {
  for ( var key in G ) {
    G[key] = readSetting( key );
  }

  setLocale();
}

function setDefaults() {
  var lang = getSystemLanguage();
  setLocale(lang);
  
  System.Gadget.Settings.write( "mainDateFormat", L.defaultDateFormat );
  System.Gadget.Settings.write( "mainTimeFormat", L.defaultTimeFormat );
  System.Gadget.Settings.write( "locale", lang );

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    System.Gadget.Settings.write( base+"fontfamily", "Segoe UI" );
    System.Gadget.Settings.write( base+"fontsize", "Auto" );
    System.Gadget.Settings.write( base+"fontcolor", "White" );
  }
}

function startup() {
  System.Gadget.settingsUI = "settings.html";
  System.Gadget.onSettingsClosed = afterSettingsClosed;
  System.Gadget.visibilityChanged = checkVisibility;

  readSettings();

	if ( ! G.mainTimeFormat ) {
		setDefaults();
		readSettings();
	}

  imgBackground.src = 'images/background-black.png';

  gDate = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );
  gTime = imgBackground.addTextObject("", "Segoe UI", 12, "white", 0, 0 );
  gLabel = imgBackground.addTextObject("", "Segoe UI", 11, "white", 0, 0 );

  updateFonts();
  updateGadget();
}

function afterSettingsClosed() {
  readSettings();
  updateFonts();
}

function changeColor( lat, lon, gmt ) {
  if ( G.tzLabel != 'sunrise' ) return;
  var now = new Date();

  var jd = calcJD( now.getFullYear(), 1+now.getMonth(), now.getDate() );
  var sunriseUTC = calcSunriseUTC( jd, lat, lon );
  var sunsetUTC = calcSunsetUTC( jd, lat, lon );

  var h = sunriseUTC + gmt*60;
  var i = sunsetUTC + gmt*60;

  //var dateArea = document.getElementById( "dateArea" );
  var sunrise = timeStringDate(h,jd);
  var sunset = timeStringDate(i,jd);

  //dateArea.innerHTML = sunrise + " " + sunset;
  gLabel.value = sunrise + " " + sunset;
}

function updateGadget() {
  if ( ! System.Gadget.visible ) {
    isDirty = true;
  } else {
    displayGadget();
    isDirty = false;
    window.setTimeout(updateGadget, 1000);
  }
}

function checkVisibility() {
  // See http://blogs.msdn.com/sidebar/archive/2006/08/18/706495.aspx
  if ( System.Gadget.visible && isDirty ) {
    updateGadget();
  }
}

function getOffsetInMinutes( tzName, utcEpoch ) {
//  var tzOffsets = document.tzOffsets;
  var tzOffsets = tzdata[ tzName ];
	var offset = 0;
	for ( var cutoff in tzOffsets ) {
	  if ( utcEpoch > cutoff ) {
		  offset = tzOffsets[ cutoff ];
		}
	}
	return offset;
}

function displayGadget() {
  var now = new Date();
  var gmtOffset = now.getTimezoneOffset();

  gLabel.opacity = G.tzLabel ? 100 : 0; // this has to be done BEFORE changing the text!
  gLabel.value = G.tzLabel;
  gLabel.width = gLabel.height = 0; // force recalculation of width

  if ( G.tzName.length > 0 ) {
    try {
      var utc = now.getTime() + gmtOffset*60*1000;
			var utcEpoch = Math.round(utc/1000.0);
      var otherOffset = getOffsetInMinutes( G.tzName, utcEpoch );
      var otherTime = utc + otherOffset*60*1000;

      now = new Date( otherTime );
      gmtOffset = otherOffset;
    } catch(err) {
      G.tzName = ''; // no tzdata for this entry, clear it away
    }
  }

// window.dateArea.innerHTML = '<a href="http://www.timeanddate.com/calendar/">' + formatDate( mainDateFormat, now ) + '</a>';
//  gTime.value = '<a href="http://www.timeanddate.com/worldclock/">' + formatDate( mainTimeFormat, now ) + '</a>';

  gDate.opacity = G.mainDateFormat ? 100 : 0;
  gDate.value = G.mainDateFormat ? formatDate( G.mainDateFormat, now ) : '';
  gDate.height = gDate.width = 0;

  gTime.value = formatDate( G.mainTimeFormat, now );

  adjustTimeToFit();
  adjustDateToFit();
  adjustLabelToFit();

  adjustPositions();

  var okToUpdate = now.getMinutes() % 15;

  if ( okToUpdate && G.tzName.length ) {
    var coords = latlon[ G.tzName ];
    if ( coords ) {
      var lat = coords[0];
      var lon = -coords[1];
      changeColor( lat, lon, gmtOffset/60 );
    }
  }
}

function adjustPositions() {
  var maxWidth = 130;
  var maxHeight = 67;

  // Horizontal center
  gDate.left = ( maxWidth - gDate.width ) / 2;
  gLabel.left = ( maxWidth - gLabel.width ) / 2;
  gTime.left = ( maxWidth - gTime.width ) / 2;

  // Normal display
  var gTop = gDate;
  var gBottom = gLabel;

  if ( G.swaplabels ) {
    gTop = gLabel;
    gBottom = gDate;
  }

  // Adjust tops
  gTop.top = 5;
  gBottom.top = 47;

  // Now the trickiest to adjust, the time position
  // Start off directly in the middle
  gTime.top = ( maxHeight - gTime.height ) / 2;

  var topOnly = gTop.value.length && ! gBottom.value.length;
  var bottomOnly = ! gTop.value.length && gBottom.value.length;

  if ( topOnly ) {
    // Adjust down if there is no bottom field
    gTime.top += ( gTop.height - 5 ) / 2;
  } else if ( bottomOnly ) {
    // Adjust up if there is no top field
    gTime.top -= ( gBottom.height - 5 ) / 2;
  }
}

function workingadjustTimeToFit() {
  if ( G.gTimefontsize != 'Auto' ) {
    gTime.fontsize = G.gTimefontsize;
    return;
  }

  var maxWidth = 130;
  var maxHeight = getProperTimeHeight();

//  gLabel.value = gTime.fontsize * maxWidth / gTime.width;
//gLabel.value = maxHeight;
//  gLabel.opacity = 100;

  var newFontSize = Math.floor( gTime.fontSize * maxWidth / gTime.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  gTime.fontsize = newFontSize;

  if ( gTime.height > maxHeight ) {
    gTime.fontsize *= maxHeight / gTime.height;
  }
}

function adjustTimeToFit() {
  adjustToFit( gTime, G.gTimefontsize, 130, getProperTimeHeight() );
}

function adjustDateToFit() {
  adjustToFit( gDate, G.gDatefontsize, 130, 16 );
}

function adjustLabelToFit() {
  adjustToFit( gLabel, G.gLabelfontsize, 130, 16 );
}

function adjustToFit( obj, size, maxWidth, maxHeight ) {
  if ( size != 'Auto' ) {
    obj.fontsize = size;
    return;
  }

  var newFontSize = Math.floor( obj.fontSize * maxWidth / obj.width );
  if ( newFontSize > 100 ) newFontSize = 12;
  obj.fontsize = newFontSize;

  if ( obj.height > maxHeight ) {
    obj.fontsize *= maxHeight / obj.height;
  }
}

function oldadjustTimeToFit() {
  var fontSize = 100;
  var maxWidth = 120;

  window.timeArea.style.fontSize = fontSize + 'px';

  var hscale = maxWidth / window.timeArea.offsetWidth;
  fontSize = Math.floor( fontSize * hscale );
  window.timeArea.style.fontSize = fontSize + 'px';

  var timeHeight = getProperTimeHeight();
  var vscale = timeHeight / window.timeArea.offsetHeight;
  if ( vscale < 1 ) {
    fontSize = Math.floor( fontSize * vscale );
    window.timeArea.style.fontSize = fontSize + 'px';
  }

  var whiteSpace = window.timeArea.offsetHeight - fontSize;
  window.timeArea.style.paddingTop = whiteSpace/2 + 'px';
  window.timeArea.style.lineHeight = 1.0;
}

function getProperTimeHeight() {
  var height = 67;
  if ( gLabel.value.length ) height -= gLabel.height - 5;
  if ( gDate.value.length ) height -= gDate.height - 5;
  return height;
}

var shown = false;
function dd( msg ) {
  if ( shown ) return;

  shown = true;
  var shell = new ActiveXObject("WScript.Shell");
  shell.Popup( msg );
}

function CheckAndSet( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal;
  if ( varEl.type == 'checkbox' ) {
    varVal = varEl.checked ? true : false;
  } else {
    varVal = varEl.value;
  }
  System.Gadget.Settings.write( variablename, varVal );
}

function LoadVarForSettings( variablename ) {
  var varEl = document.getElementById( variablename );
  var varVal = readSetting( variablename );

  if ( varEl.type == 'checkbox' ) {
    varEl.checked = varVal;
  } else {
    varEl.value = varVal;
  }
}

function setTzOptions() {
  var selectId = document.getElementById( "tzName" );
	var zones = tzdata;

  selectId.length = 0;
  selectId.add( new Option( L.t_localtime, '' ) );

  for ( var z in zones ) {
		selectId.add( new Option( z, z ) );
  } 

  selectId.value = readSetting( "tzName" );
}

function getSystemLanguage() {
  var localeCode = window.navigator.userLanguage;
  if ( ! localeCode ) return 'en';
  var lang = localeCode.split( '-', 1 );
  if ( ! tzdata[lang] ) return 'en';
  return lang;
}

function init_settings() {
  System.Gadget.onSettingsClosing = settingsClosing;
  var varsToLoad = [ 'mainDateFormat', 'mainTimeFormat', 'tzLabel', 'swaplabels' ];

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    document.getElementById(base+'_fontList').innerHTML = createFontSelect( base+'fontfamily');
    document.getElementById(base+'_fontSizeList').innerHTML = createFontSizeSelect( base+'fontsize' );
    document.getElementById(base+'_fontColorList').innerHTML = createFontColorSelect( base+'fontcolor' );

    varsToLoad.push( base+'fontfamily', base+'fontsize', base+'fontcolor' );
  }

  for ( var v in varsToLoad ) {
    LoadVarForSettings( varsToLoad[v] );
  }

  G.locale = document.getElementById("locale").value = readSetting( "locale" );

  setLocale();
  displaySettings();
}

function localizeText() {
	for ( var key in L ) {
	  var el = document.getElementById(key);
		if ( ! el ) continue;
		el.innerHTML = L[key] + ' ';
	}
}

function displaySettings( newlocale ) {
  if ( newlocale !== undefined ) {
    G.locale = newlocale;
    setLocale();
    document.getElementById("mainDateFormat").value = L.defaultDateFormat;
    document.getElementById("mainTimeFormat").value = L.defaultTimeFormat;
  }

  setTzOptions();
  localizeText();
  gotoTab( 1 );
}

function settingsClosing(event) {
  if ( event.closeAction == event.Action.commit ) {
    CheckAndSet( "mainDateFormat" );
    CheckAndSet( "mainTimeFormat" );
    CheckAndSet( "tzLabel" );
    CheckAndSet( "tzName" );
    CheckAndSet( "locale" );
    CheckAndSet( "swaplabels" );

    var elements = [ 'gDate', 'gTime', 'gLabel' ];
    for ( var el in elements ) {
      var base = elements[el];
      CheckAndSet( base+"fontfamily" );
      CheckAndSet( base+"fontsize" );
      CheckAndSet( base+"fontcolor" );
    }
  }

  event.cancel = false;
}

function updateFonts() {
  // Only need to run this once, on first gadget startup or when
  // settings have been changed

  if ( ! gTime ) return;

  var elements = [ 'gDate', 'gTime', 'gLabel' ];
  for ( var el in elements ) {
    var base = elements[el];
    var cur; // declaring here to avoid lint warnings
    eval( 'cur = ' + base );

    if ( cur.font != G[base+'fontfamily'] ) {
      eval( base + '.font = G.'+base+'fontfamily' );
    }
    if ( cur.color != G[base+'fontcolor'] ) {
      eval( base + '.color = G.'+base+'fontcolor' );
    }
  }
}

function getSystemFontsList() {
 // http://msdn.microsoft.com/en-us/library/ms537454.aspx

  var fontNames = new Array();

  for (var i=1; i < dlgHelper.fonts.count; i++) {
    fontNames.push( dlgHelper.fonts(i) );
  }
 
 return fontNames.sort();
}

function createFontSelect( id ) {
  var values = createSelectOptions( getSystemFontsList() );
  return '<select id='+id+'>' + values + '</select>';
}

function createSelectOptions( values ) {
  var out = '';

  for ( var el in values ) {
    var name = values[el];
    out += '<option value="' + name + '">' + name + '</option>';
  }

  return out;
}

function getFontColor() {
  var decimalColor = dlgHelper.ChooseColorDlg();

  document.getElementById('fontColor').style.backgroundColor = decimalColor;
}

function createFontColorSelect( id ) {
  var colors = getMicrosoftColors();
  var out = '';
  for ( var c in colors ) {
    var display_color = colors[c];
    var background_color = 'Black';
//    if ( display_color == 'White' ) display_color = 'Black';
    out += '<option value="' + colors[c] + 
      '" style="color: ' + display_color + 
      '; background-color: ' + background_color + 
      '">' + colors[c] + '</option>';

  }
  
  return '<select id=' + id + '>' + out + '</select>';
}

function createFontSizeSelect( id ) {
  var sizes = [ 'Auto', '8', '10', '12', '14', '16', '18', '20', '22',
    '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44',
    '46', '48', '50' ];
  var values = createSelectOptions( sizes );
  return '<select id=' + id + '>' + values + '</select>';
}

function getMicrosoftColors() {
  // list of colors supported by g:text
  // http://msdn.microsoft.com/en-us/library/aa359339(VS.85).aspx

  var MicrosoftColors = [ 'AliceBlue', 'AntiqueWhite', 'Aqua',
  'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond',
  'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue',
  'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk',
  'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod',
  'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta',
  'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed',
  'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray',
  'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray',
  'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia',
  'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green',
  'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo',
  'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen',
  'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
  'LightGoldenrodYellow', 'LightGreen', 'LightGrey', 'LightPink',
  'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray',
  'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen',
  'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue',
  'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue',
  'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed',
  'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
  'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed',
  'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise',
  'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum',
  'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue',
  'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'Seashell',
  'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow',
  'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato',
  'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow',
  'YellowGreen' ];

  return MicrosoftColors;
}

function gotoTab( tabNum ) {
  for ( var i=1; i<=3; i++ ) {
    document.getElementById( 'tab'+i ).style.display = 'none';
    document.getElementById( 'tabcontrol'+i ).className = '';
  }

  document.getElementById( 'tab'+tabNum ).style.display = 'block';
  document.getElementById( 'tabcontrol'+tabNum ).className = 'tab_selected';
}
